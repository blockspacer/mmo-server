// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/zone_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2fzone_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2fzone_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg/ts_cmd.pb.h"
#include "common/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2fzone_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[92]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fzone_5fservice_2eproto;
class CS_ACHI_TAKE;
class CS_ACHI_TAKEDefaultTypeInternal;
extern CS_ACHI_TAKEDefaultTypeInternal _CS_ACHI_TAKE_default_instance_;
class CS_ACTIVE_NPC;
class CS_ACTIVE_NPCDefaultTypeInternal;
extern CS_ACTIVE_NPCDefaultTypeInternal _CS_ACTIVE_NPC_default_instance_;
class CS_CASTSKILL;
class CS_CASTSKILLDefaultTypeInternal;
extern CS_CASTSKILLDefaultTypeInternal _CS_CASTSKILL_default_instance_;
class CS_CHANGEMAP;
class CS_CHANGEMAPDefaultTypeInternal;
extern CS_CHANGEMAPDefaultTypeInternal _CS_CHANGEMAP_default_instance_;
class CS_CHANGE_PKMODE;
class CS_CHANGE_PKMODEDefaultTypeInternal;
extern CS_CHANGE_PKMODEDefaultTypeInternal _CS_CHANGE_PKMODE_default_instance_;
class CS_DIALOG_CLICK;
class CS_DIALOG_CLICKDefaultTypeInternal;
extern CS_DIALOG_CLICKDefaultTypeInternal _CS_DIALOG_CLICK_default_instance_;
class CS_EQUIP;
class CS_EQUIPDefaultTypeInternal;
extern CS_EQUIPDefaultTypeInternal _CS_EQUIP_default_instance_;
class CS_GUILDACCEPTAPPLY;
class CS_GUILDACCEPTAPPLYDefaultTypeInternal;
extern CS_GUILDACCEPTAPPLYDefaultTypeInternal _CS_GUILDACCEPTAPPLY_default_instance_;
class CS_GUILDACCEPTINVITE;
class CS_GUILDACCEPTINVITEDefaultTypeInternal;
extern CS_GUILDACCEPTINVITEDefaultTypeInternal _CS_GUILDACCEPTINVITE_default_instance_;
class CS_GUILDAPPLYMEMBER;
class CS_GUILDAPPLYMEMBERDefaultTypeInternal;
extern CS_GUILDAPPLYMEMBERDefaultTypeInternal _CS_GUILDAPPLYMEMBER_default_instance_;
class CS_GUILDCREATE;
class CS_GUILDCREATEDefaultTypeInternal;
extern CS_GUILDCREATEDefaultTypeInternal _CS_GUILDCREATE_default_instance_;
class CS_GUILDINVITEMEMBER;
class CS_GUILDINVITEMEMBERDefaultTypeInternal;
extern CS_GUILDINVITEMEMBERDefaultTypeInternal _CS_GUILDINVITEMEMBER_default_instance_;
class CS_GUILDKICKMEMBER;
class CS_GUILDKICKMEMBERDefaultTypeInternal;
extern CS_GUILDKICKMEMBERDefaultTypeInternal _CS_GUILDKICKMEMBER_default_instance_;
class CS_GUILDNEWLEADER;
class CS_GUILDNEWLEADERDefaultTypeInternal;
extern CS_GUILDNEWLEADERDefaultTypeInternal _CS_GUILDNEWLEADER_default_instance_;
class CS_GUILDQUIT;
class CS_GUILDQUITDefaultTypeInternal;
extern CS_GUILDQUITDefaultTypeInternal _CS_GUILDQUIT_default_instance_;
class CS_ITEM_COMBINE;
class CS_ITEM_COMBINEDefaultTypeInternal;
extern CS_ITEM_COMBINEDefaultTypeInternal _CS_ITEM_COMBINE_default_instance_;
class CS_ITEM_SPLIT;
class CS_ITEM_SPLITDefaultTypeInternal;
extern CS_ITEM_SPLITDefaultTypeInternal _CS_ITEM_SPLIT_default_instance_;
class CS_ITEM_STORAGE_CHECKIN;
class CS_ITEM_STORAGE_CHECKINDefaultTypeInternal;
extern CS_ITEM_STORAGE_CHECKINDefaultTypeInternal _CS_ITEM_STORAGE_CHECKIN_default_instance_;
class CS_ITEM_STORAGE_CHECKOUT;
class CS_ITEM_STORAGE_CHECKOUTDefaultTypeInternal;
extern CS_ITEM_STORAGE_CHECKOUTDefaultTypeInternal _CS_ITEM_STORAGE_CHECKOUT_default_instance_;
class CS_ITEM_STORAGE_OPEN;
class CS_ITEM_STORAGE_OPENDefaultTypeInternal;
extern CS_ITEM_STORAGE_OPENDefaultTypeInternal _CS_ITEM_STORAGE_OPEN_default_instance_;
class CS_ITEM_SWAP;
class CS_ITEM_SWAPDefaultTypeInternal;
extern CS_ITEM_SWAPDefaultTypeInternal _CS_ITEM_SWAP_default_instance_;
class CS_ITEM_TIDY;
class CS_ITEM_TIDYDefaultTypeInternal;
extern CS_ITEM_TIDYDefaultTypeInternal _CS_ITEM_TIDY_default_instance_;
class CS_ITEM_USE;
class CS_ITEM_USEDefaultTypeInternal;
extern CS_ITEM_USEDefaultTypeInternal _CS_ITEM_USE_default_instance_;
class CS_LOADMAP_SUCC;
class CS_LOADMAP_SUCCDefaultTypeInternal;
extern CS_LOADMAP_SUCCDefaultTypeInternal _CS_LOADMAP_SUCC_default_instance_;
class CS_MOVE;
class CS_MOVEDefaultTypeInternal;
extern CS_MOVEDefaultTypeInternal _CS_MOVE_default_instance_;
class CS_REBORN;
class CS_REBORNDefaultTypeInternal;
extern CS_REBORNDefaultTypeInternal _CS_REBORN_default_instance_;
class CS_SKILL_BREAK;
class CS_SKILL_BREAKDefaultTypeInternal;
extern CS_SKILL_BREAKDefaultTypeInternal _CS_SKILL_BREAK_default_instance_;
class CS_SKILL_CHGTARGETPOS;
class CS_SKILL_CHGTARGETPOSDefaultTypeInternal;
extern CS_SKILL_CHGTARGETPOSDefaultTypeInternal _CS_SKILL_CHGTARGETPOS_default_instance_;
class CS_TALK;
class CS_TALKDefaultTypeInternal;
extern CS_TALKDefaultTypeInternal _CS_TALK_default_instance_;
class CS_TASK_SUBMIT;
class CS_TASK_SUBMITDefaultTypeInternal;
extern CS_TASK_SUBMITDefaultTypeInternal _CS_TASK_SUBMIT_default_instance_;
class CS_TEAMACCEPTAPPLY;
class CS_TEAMACCEPTAPPLYDefaultTypeInternal;
extern CS_TEAMACCEPTAPPLYDefaultTypeInternal _CS_TEAMACCEPTAPPLY_default_instance_;
class CS_TEAMACCEPTINVITE;
class CS_TEAMACCEPTINVITEDefaultTypeInternal;
extern CS_TEAMACCEPTINVITEDefaultTypeInternal _CS_TEAMACCEPTINVITE_default_instance_;
class CS_TEAMAPPLYMEMBER;
class CS_TEAMAPPLYMEMBERDefaultTypeInternal;
extern CS_TEAMAPPLYMEMBERDefaultTypeInternal _CS_TEAMAPPLYMEMBER_default_instance_;
class CS_TEAMCREATE;
class CS_TEAMCREATEDefaultTypeInternal;
extern CS_TEAMCREATEDefaultTypeInternal _CS_TEAMCREATE_default_instance_;
class CS_TEAMINVITEMEMBER;
class CS_TEAMINVITEMEMBERDefaultTypeInternal;
extern CS_TEAMINVITEMEMBERDefaultTypeInternal _CS_TEAMINVITEMEMBER_default_instance_;
class CS_TEAMKICKMEMBER;
class CS_TEAMKICKMEMBERDefaultTypeInternal;
extern CS_TEAMKICKMEMBERDefaultTypeInternal _CS_TEAMKICKMEMBER_default_instance_;
class CS_TEAMNEWLEADER;
class CS_TEAMNEWLEADERDefaultTypeInternal;
extern CS_TEAMNEWLEADERDefaultTypeInternal _CS_TEAMNEWLEADER_default_instance_;
class CS_TEAMQUIT;
class CS_TEAMQUITDefaultTypeInternal;
extern CS_TEAMQUITDefaultTypeInternal _CS_TEAMQUIT_default_instance_;
class CS_UNEQUIP;
class CS_UNEQUIPDefaultTypeInternal;
extern CS_UNEQUIPDefaultTypeInternal _CS_UNEQUIP_default_instance_;
class SC_ACHI_INFO;
class SC_ACHI_INFODefaultTypeInternal;
extern SC_ACHI_INFODefaultTypeInternal _SC_ACHI_INFO_default_instance_;
class SC_ACHI_INFO_Info;
class SC_ACHI_INFO_InfoDefaultTypeInternal;
extern SC_ACHI_INFO_InfoDefaultTypeInternal _SC_ACHI_INFO_Info_default_instance_;
class SC_ACTORATTRIB;
class SC_ACTORATTRIBDefaultTypeInternal;
extern SC_ACTORATTRIBDefaultTypeInternal _SC_ACTORATTRIB_default_instance_;
class SC_AOI_NEW;
class SC_AOI_NEWDefaultTypeInternal;
extern SC_AOI_NEWDefaultTypeInternal _SC_AOI_NEW_default_instance_;
class SC_AOI_REMOVE;
class SC_AOI_REMOVEDefaultTypeInternal;
extern SC_AOI_REMOVEDefaultTypeInternal _SC_AOI_REMOVE_default_instance_;
class SC_AOI_UPDATE;
class SC_AOI_UPDATEDefaultTypeInternal;
extern SC_AOI_UPDATEDefaultTypeInternal _SC_AOI_UPDATE_default_instance_;
class SC_ATTRIB_CHANGE;
class SC_ATTRIB_CHANGEDefaultTypeInternal;
extern SC_ATTRIB_CHANGEDefaultTypeInternal _SC_ATTRIB_CHANGE_default_instance_;
class SC_ATTRIB_CHANGE_Data;
class SC_ATTRIB_CHANGE_DataDefaultTypeInternal;
extern SC_ATTRIB_CHANGE_DataDefaultTypeInternal _SC_ATTRIB_CHANGE_Data_default_instance_;
class SC_CASTSKILL;
class SC_CASTSKILLDefaultTypeInternal;
extern SC_CASTSKILLDefaultTypeInternal _SC_CASTSKILL_default_instance_;
class SC_CHANGE_PKMODE;
class SC_CHANGE_PKMODEDefaultTypeInternal;
extern SC_CHANGE_PKMODEDefaultTypeInternal _SC_CHANGE_PKMODE_default_instance_;
class SC_COMMONDATA;
class SC_COMMONDATADefaultTypeInternal;
extern SC_COMMONDATADefaultTypeInternal _SC_COMMONDATA_default_instance_;
class SC_COMMONDATA_Data;
class SC_COMMONDATA_DataDefaultTypeInternal;
extern SC_COMMONDATA_DataDefaultTypeInternal _SC_COMMONDATA_Data_default_instance_;
class SC_COOLDOWN;
class SC_COOLDOWNDefaultTypeInternal;
extern SC_COOLDOWNDefaultTypeInternal _SC_COOLDOWN_default_instance_;
class SC_COOLDOWN_Data;
class SC_COOLDOWN_DataDefaultTypeInternal;
extern SC_COOLDOWN_DataDefaultTypeInternal _SC_COOLDOWN_Data_default_instance_;
class SC_DAMAGE;
class SC_DAMAGEDefaultTypeInternal;
extern SC_DAMAGEDefaultTypeInternal _SC_DAMAGE_default_instance_;
class SC_DATACOUNT;
class SC_DATACOUNTDefaultTypeInternal;
extern SC_DATACOUNTDefaultTypeInternal _SC_DATACOUNT_default_instance_;
class SC_DATACOUNT_Data;
class SC_DATACOUNT_DataDefaultTypeInternal;
extern SC_DATACOUNT_DataDefaultTypeInternal _SC_DATACOUNT_Data_default_instance_;
class SC_DEAD;
class SC_DEADDefaultTypeInternal;
extern SC_DEADDefaultTypeInternal _SC_DEAD_default_instance_;
class SC_DIALOG;
class SC_DIALOGDefaultTypeInternal;
extern SC_DIALOGDefaultTypeInternal _SC_DIALOG_default_instance_;
class SC_DIALOG_dialog_link;
class SC_DIALOG_dialog_linkDefaultTypeInternal;
extern SC_DIALOG_dialog_linkDefaultTypeInternal _SC_DIALOG_dialog_link_default_instance_;
class SC_ENTERMAP;
class SC_ENTERMAPDefaultTypeInternal;
extern SC_ENTERMAPDefaultTypeInternal _SC_ENTERMAP_default_instance_;
class SC_GUILDAPPLYMEMBER;
class SC_GUILDAPPLYMEMBERDefaultTypeInternal;
extern SC_GUILDAPPLYMEMBERDefaultTypeInternal _SC_GUILDAPPLYMEMBER_default_instance_;
class SC_GUILDINVITEMEMBER;
class SC_GUILDINVITEMEMBERDefaultTypeInternal;
extern SC_GUILDINVITEMEMBERDefaultTypeInternal _SC_GUILDINVITEMEMBER_default_instance_;
class SC_GUILDMEMBER_ACTION;
class SC_GUILDMEMBER_ACTIONDefaultTypeInternal;
extern SC_GUILDMEMBER_ACTIONDefaultTypeInternal _SC_GUILDMEMBER_ACTION_default_instance_;
class SC_GUILDMEMBER_INFO;
class SC_GUILDMEMBER_INFODefaultTypeInternal;
extern SC_GUILDMEMBER_INFODefaultTypeInternal _SC_GUILDMEMBER_INFO_default_instance_;
class SC_ITEM_CHANGE;
class SC_ITEM_CHANGEDefaultTypeInternal;
extern SC_ITEM_CHANGEDefaultTypeInternal _SC_ITEM_CHANGE_default_instance_;
class SC_ITEM_CHANGE_ChangeData;
class SC_ITEM_CHANGE_ChangeDataDefaultTypeInternal;
extern SC_ITEM_CHANGE_ChangeDataDefaultTypeInternal _SC_ITEM_CHANGE_ChangeData_default_instance_;
class SC_ITEM_DELETE;
class SC_ITEM_DELETEDefaultTypeInternal;
extern SC_ITEM_DELETEDefaultTypeInternal _SC_ITEM_DELETE_default_instance_;
class SC_ITEM_INFO;
class SC_ITEM_INFODefaultTypeInternal;
extern SC_ITEM_INFODefaultTypeInternal _SC_ITEM_INFO_default_instance_;
class SC_LOADMAP;
class SC_LOADMAPDefaultTypeInternal;
extern SC_LOADMAPDefaultTypeInternal _SC_LOADMAP_default_instance_;
class SC_MAPVAL;
class SC_MAPVALDefaultTypeInternal;
extern SC_MAPVALDefaultTypeInternal _SC_MAPVAL_default_instance_;
class SC_MAPVAL_MapVal;
class SC_MAPVAL_MapValDefaultTypeInternal;
extern SC_MAPVAL_MapValDefaultTypeInternal _SC_MAPVAL_MapVal_default_instance_;
class SC_PLAYERINFO;
class SC_PLAYERINFODefaultTypeInternal;
extern SC_PLAYERINFODefaultTypeInternal _SC_PLAYERINFO_default_instance_;
class SC_SKILL_BREAK;
class SC_SKILL_BREAKDefaultTypeInternal;
extern SC_SKILL_BREAKDefaultTypeInternal _SC_SKILL_BREAK_default_instance_;
class SC_SKILL_DAMAGE;
class SC_SKILL_DAMAGEDefaultTypeInternal;
extern SC_SKILL_DAMAGEDefaultTypeInternal _SC_SKILL_DAMAGE_default_instance_;
class SC_SKILL_DAMAGE_DamageInfo;
class SC_SKILL_DAMAGE_DamageInfoDefaultTypeInternal;
extern SC_SKILL_DAMAGE_DamageInfoDefaultTypeInternal _SC_SKILL_DAMAGE_DamageInfo_default_instance_;
class SC_SKILL_EFFACT;
class SC_SKILL_EFFACTDefaultTypeInternal;
extern SC_SKILL_EFFACTDefaultTypeInternal _SC_SKILL_EFFACT_default_instance_;
class SC_SKILL_STUN;
class SC_SKILL_STUNDefaultTypeInternal;
extern SC_SKILL_STUNDefaultTypeInternal _SC_SKILL_STUN_default_instance_;
class SC_STATUS_ACTION;
class SC_STATUS_ACTIONDefaultTypeInternal;
extern SC_STATUS_ACTIONDefaultTypeInternal _SC_STATUS_ACTION_default_instance_;
class SC_STATUS_INFO;
class SC_STATUS_INFODefaultTypeInternal;
extern SC_STATUS_INFODefaultTypeInternal _SC_STATUS_INFO_default_instance_;
class SC_STATUS_INFO_Data;
class SC_STATUS_INFO_DataDefaultTypeInternal;
extern SC_STATUS_INFO_DataDefaultTypeInternal _SC_STATUS_INFO_Data_default_instance_;
class SC_STATUS_LIST;
class SC_STATUS_LISTDefaultTypeInternal;
extern SC_STATUS_LISTDefaultTypeInternal _SC_STATUS_LIST_default_instance_;
class SC_STATUS_LIST_Data;
class SC_STATUS_LIST_DataDefaultTypeInternal;
extern SC_STATUS_LIST_DataDefaultTypeInternal _SC_STATUS_LIST_Data_default_instance_;
class SC_SYSVAR;
class SC_SYSVARDefaultTypeInternal;
extern SC_SYSVARDefaultTypeInternal _SC_SYSVAR_default_instance_;
class SC_SYSVAR_Data;
class SC_SYSVAR_DataDefaultTypeInternal;
extern SC_SYSVAR_DataDefaultTypeInternal _SC_SYSVAR_Data_default_instance_;
class SC_TALK;
class SC_TALKDefaultTypeInternal;
extern SC_TALKDefaultTypeInternal _SC_TALK_default_instance_;
class SC_TASK_DATA;
class SC_TASK_DATADefaultTypeInternal;
extern SC_TASK_DATADefaultTypeInternal _SC_TASK_DATA_default_instance_;
class SC_TASK_INFO;
class SC_TASK_INFODefaultTypeInternal;
extern SC_TASK_INFODefaultTypeInternal _SC_TASK_INFO_default_instance_;
class SC_TASK_INFO_Info;
class SC_TASK_INFO_InfoDefaultTypeInternal;
extern SC_TASK_INFO_InfoDefaultTypeInternal _SC_TASK_INFO_Info_default_instance_;
class SC_TEAMAPPLYMEMBER;
class SC_TEAMAPPLYMEMBERDefaultTypeInternal;
extern SC_TEAMAPPLYMEMBERDefaultTypeInternal _SC_TEAMAPPLYMEMBER_default_instance_;
class SC_TEAMINVITEMEMBER;
class SC_TEAMINVITEMEMBERDefaultTypeInternal;
extern SC_TEAMINVITEMEMBERDefaultTypeInternal _SC_TEAMINVITEMEMBER_default_instance_;
class SC_TEAMMEMBER_ACTION;
class SC_TEAMMEMBER_ACTIONDefaultTypeInternal;
extern SC_TEAMMEMBER_ACTIONDefaultTypeInternal _SC_TEAMMEMBER_ACTION_default_instance_;
class SC_TEAMMEMBER_INFO;
class SC_TEAMMEMBER_INFODefaultTypeInternal;
extern SC_TEAMMEMBER_INFODefaultTypeInternal _SC_TEAMMEMBER_INFO_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CS_ACHI_TAKE* Arena::CreateMaybeMessage<::CS_ACHI_TAKE>(Arena*);
template<> ::CS_ACTIVE_NPC* Arena::CreateMaybeMessage<::CS_ACTIVE_NPC>(Arena*);
template<> ::CS_CASTSKILL* Arena::CreateMaybeMessage<::CS_CASTSKILL>(Arena*);
template<> ::CS_CHANGEMAP* Arena::CreateMaybeMessage<::CS_CHANGEMAP>(Arena*);
template<> ::CS_CHANGE_PKMODE* Arena::CreateMaybeMessage<::CS_CHANGE_PKMODE>(Arena*);
template<> ::CS_DIALOG_CLICK* Arena::CreateMaybeMessage<::CS_DIALOG_CLICK>(Arena*);
template<> ::CS_EQUIP* Arena::CreateMaybeMessage<::CS_EQUIP>(Arena*);
template<> ::CS_GUILDACCEPTAPPLY* Arena::CreateMaybeMessage<::CS_GUILDACCEPTAPPLY>(Arena*);
template<> ::CS_GUILDACCEPTINVITE* Arena::CreateMaybeMessage<::CS_GUILDACCEPTINVITE>(Arena*);
template<> ::CS_GUILDAPPLYMEMBER* Arena::CreateMaybeMessage<::CS_GUILDAPPLYMEMBER>(Arena*);
template<> ::CS_GUILDCREATE* Arena::CreateMaybeMessage<::CS_GUILDCREATE>(Arena*);
template<> ::CS_GUILDINVITEMEMBER* Arena::CreateMaybeMessage<::CS_GUILDINVITEMEMBER>(Arena*);
template<> ::CS_GUILDKICKMEMBER* Arena::CreateMaybeMessage<::CS_GUILDKICKMEMBER>(Arena*);
template<> ::CS_GUILDNEWLEADER* Arena::CreateMaybeMessage<::CS_GUILDNEWLEADER>(Arena*);
template<> ::CS_GUILDQUIT* Arena::CreateMaybeMessage<::CS_GUILDQUIT>(Arena*);
template<> ::CS_ITEM_COMBINE* Arena::CreateMaybeMessage<::CS_ITEM_COMBINE>(Arena*);
template<> ::CS_ITEM_SPLIT* Arena::CreateMaybeMessage<::CS_ITEM_SPLIT>(Arena*);
template<> ::CS_ITEM_STORAGE_CHECKIN* Arena::CreateMaybeMessage<::CS_ITEM_STORAGE_CHECKIN>(Arena*);
template<> ::CS_ITEM_STORAGE_CHECKOUT* Arena::CreateMaybeMessage<::CS_ITEM_STORAGE_CHECKOUT>(Arena*);
template<> ::CS_ITEM_STORAGE_OPEN* Arena::CreateMaybeMessage<::CS_ITEM_STORAGE_OPEN>(Arena*);
template<> ::CS_ITEM_SWAP* Arena::CreateMaybeMessage<::CS_ITEM_SWAP>(Arena*);
template<> ::CS_ITEM_TIDY* Arena::CreateMaybeMessage<::CS_ITEM_TIDY>(Arena*);
template<> ::CS_ITEM_USE* Arena::CreateMaybeMessage<::CS_ITEM_USE>(Arena*);
template<> ::CS_LOADMAP_SUCC* Arena::CreateMaybeMessage<::CS_LOADMAP_SUCC>(Arena*);
template<> ::CS_MOVE* Arena::CreateMaybeMessage<::CS_MOVE>(Arena*);
template<> ::CS_REBORN* Arena::CreateMaybeMessage<::CS_REBORN>(Arena*);
template<> ::CS_SKILL_BREAK* Arena::CreateMaybeMessage<::CS_SKILL_BREAK>(Arena*);
template<> ::CS_SKILL_CHGTARGETPOS* Arena::CreateMaybeMessage<::CS_SKILL_CHGTARGETPOS>(Arena*);
template<> ::CS_TALK* Arena::CreateMaybeMessage<::CS_TALK>(Arena*);
template<> ::CS_TASK_SUBMIT* Arena::CreateMaybeMessage<::CS_TASK_SUBMIT>(Arena*);
template<> ::CS_TEAMACCEPTAPPLY* Arena::CreateMaybeMessage<::CS_TEAMACCEPTAPPLY>(Arena*);
template<> ::CS_TEAMACCEPTINVITE* Arena::CreateMaybeMessage<::CS_TEAMACCEPTINVITE>(Arena*);
template<> ::CS_TEAMAPPLYMEMBER* Arena::CreateMaybeMessage<::CS_TEAMAPPLYMEMBER>(Arena*);
template<> ::CS_TEAMCREATE* Arena::CreateMaybeMessage<::CS_TEAMCREATE>(Arena*);
template<> ::CS_TEAMINVITEMEMBER* Arena::CreateMaybeMessage<::CS_TEAMINVITEMEMBER>(Arena*);
template<> ::CS_TEAMKICKMEMBER* Arena::CreateMaybeMessage<::CS_TEAMKICKMEMBER>(Arena*);
template<> ::CS_TEAMNEWLEADER* Arena::CreateMaybeMessage<::CS_TEAMNEWLEADER>(Arena*);
template<> ::CS_TEAMQUIT* Arena::CreateMaybeMessage<::CS_TEAMQUIT>(Arena*);
template<> ::CS_UNEQUIP* Arena::CreateMaybeMessage<::CS_UNEQUIP>(Arena*);
template<> ::SC_ACHI_INFO* Arena::CreateMaybeMessage<::SC_ACHI_INFO>(Arena*);
template<> ::SC_ACHI_INFO_Info* Arena::CreateMaybeMessage<::SC_ACHI_INFO_Info>(Arena*);
template<> ::SC_ACTORATTRIB* Arena::CreateMaybeMessage<::SC_ACTORATTRIB>(Arena*);
template<> ::SC_AOI_NEW* Arena::CreateMaybeMessage<::SC_AOI_NEW>(Arena*);
template<> ::SC_AOI_REMOVE* Arena::CreateMaybeMessage<::SC_AOI_REMOVE>(Arena*);
template<> ::SC_AOI_UPDATE* Arena::CreateMaybeMessage<::SC_AOI_UPDATE>(Arena*);
template<> ::SC_ATTRIB_CHANGE* Arena::CreateMaybeMessage<::SC_ATTRIB_CHANGE>(Arena*);
template<> ::SC_ATTRIB_CHANGE_Data* Arena::CreateMaybeMessage<::SC_ATTRIB_CHANGE_Data>(Arena*);
template<> ::SC_CASTSKILL* Arena::CreateMaybeMessage<::SC_CASTSKILL>(Arena*);
template<> ::SC_CHANGE_PKMODE* Arena::CreateMaybeMessage<::SC_CHANGE_PKMODE>(Arena*);
template<> ::SC_COMMONDATA* Arena::CreateMaybeMessage<::SC_COMMONDATA>(Arena*);
template<> ::SC_COMMONDATA_Data* Arena::CreateMaybeMessage<::SC_COMMONDATA_Data>(Arena*);
template<> ::SC_COOLDOWN* Arena::CreateMaybeMessage<::SC_COOLDOWN>(Arena*);
template<> ::SC_COOLDOWN_Data* Arena::CreateMaybeMessage<::SC_COOLDOWN_Data>(Arena*);
template<> ::SC_DAMAGE* Arena::CreateMaybeMessage<::SC_DAMAGE>(Arena*);
template<> ::SC_DATACOUNT* Arena::CreateMaybeMessage<::SC_DATACOUNT>(Arena*);
template<> ::SC_DATACOUNT_Data* Arena::CreateMaybeMessage<::SC_DATACOUNT_Data>(Arena*);
template<> ::SC_DEAD* Arena::CreateMaybeMessage<::SC_DEAD>(Arena*);
template<> ::SC_DIALOG* Arena::CreateMaybeMessage<::SC_DIALOG>(Arena*);
template<> ::SC_DIALOG_dialog_link* Arena::CreateMaybeMessage<::SC_DIALOG_dialog_link>(Arena*);
template<> ::SC_ENTERMAP* Arena::CreateMaybeMessage<::SC_ENTERMAP>(Arena*);
template<> ::SC_GUILDAPPLYMEMBER* Arena::CreateMaybeMessage<::SC_GUILDAPPLYMEMBER>(Arena*);
template<> ::SC_GUILDINVITEMEMBER* Arena::CreateMaybeMessage<::SC_GUILDINVITEMEMBER>(Arena*);
template<> ::SC_GUILDMEMBER_ACTION* Arena::CreateMaybeMessage<::SC_GUILDMEMBER_ACTION>(Arena*);
template<> ::SC_GUILDMEMBER_INFO* Arena::CreateMaybeMessage<::SC_GUILDMEMBER_INFO>(Arena*);
template<> ::SC_ITEM_CHANGE* Arena::CreateMaybeMessage<::SC_ITEM_CHANGE>(Arena*);
template<> ::SC_ITEM_CHANGE_ChangeData* Arena::CreateMaybeMessage<::SC_ITEM_CHANGE_ChangeData>(Arena*);
template<> ::SC_ITEM_DELETE* Arena::CreateMaybeMessage<::SC_ITEM_DELETE>(Arena*);
template<> ::SC_ITEM_INFO* Arena::CreateMaybeMessage<::SC_ITEM_INFO>(Arena*);
template<> ::SC_LOADMAP* Arena::CreateMaybeMessage<::SC_LOADMAP>(Arena*);
template<> ::SC_MAPVAL* Arena::CreateMaybeMessage<::SC_MAPVAL>(Arena*);
template<> ::SC_MAPVAL_MapVal* Arena::CreateMaybeMessage<::SC_MAPVAL_MapVal>(Arena*);
template<> ::SC_PLAYERINFO* Arena::CreateMaybeMessage<::SC_PLAYERINFO>(Arena*);
template<> ::SC_SKILL_BREAK* Arena::CreateMaybeMessage<::SC_SKILL_BREAK>(Arena*);
template<> ::SC_SKILL_DAMAGE* Arena::CreateMaybeMessage<::SC_SKILL_DAMAGE>(Arena*);
template<> ::SC_SKILL_DAMAGE_DamageInfo* Arena::CreateMaybeMessage<::SC_SKILL_DAMAGE_DamageInfo>(Arena*);
template<> ::SC_SKILL_EFFACT* Arena::CreateMaybeMessage<::SC_SKILL_EFFACT>(Arena*);
template<> ::SC_SKILL_STUN* Arena::CreateMaybeMessage<::SC_SKILL_STUN>(Arena*);
template<> ::SC_STATUS_ACTION* Arena::CreateMaybeMessage<::SC_STATUS_ACTION>(Arena*);
template<> ::SC_STATUS_INFO* Arena::CreateMaybeMessage<::SC_STATUS_INFO>(Arena*);
template<> ::SC_STATUS_INFO_Data* Arena::CreateMaybeMessage<::SC_STATUS_INFO_Data>(Arena*);
template<> ::SC_STATUS_LIST* Arena::CreateMaybeMessage<::SC_STATUS_LIST>(Arena*);
template<> ::SC_STATUS_LIST_Data* Arena::CreateMaybeMessage<::SC_STATUS_LIST_Data>(Arena*);
template<> ::SC_SYSVAR* Arena::CreateMaybeMessage<::SC_SYSVAR>(Arena*);
template<> ::SC_SYSVAR_Data* Arena::CreateMaybeMessage<::SC_SYSVAR_Data>(Arena*);
template<> ::SC_TALK* Arena::CreateMaybeMessage<::SC_TALK>(Arena*);
template<> ::SC_TASK_DATA* Arena::CreateMaybeMessage<::SC_TASK_DATA>(Arena*);
template<> ::SC_TASK_INFO* Arena::CreateMaybeMessage<::SC_TASK_INFO>(Arena*);
template<> ::SC_TASK_INFO_Info* Arena::CreateMaybeMessage<::SC_TASK_INFO_Info>(Arena*);
template<> ::SC_TEAMAPPLYMEMBER* Arena::CreateMaybeMessage<::SC_TEAMAPPLYMEMBER>(Arena*);
template<> ::SC_TEAMINVITEMEMBER* Arena::CreateMaybeMessage<::SC_TEAMINVITEMEMBER>(Arena*);
template<> ::SC_TEAMMEMBER_ACTION* Arena::CreateMaybeMessage<::SC_TEAMMEMBER_ACTION>(Arena*);
template<> ::SC_TEAMMEMBER_INFO* Arena::CreateMaybeMessage<::SC_TEAMMEMBER_INFO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SC_MAPVAL_State : int {
  SC_MAPVAL_State_SYNC_MAPVAL_ALL = 0,
  SC_MAPVAL_State_SYNC_MAPVAL_ONE = 1,
  SC_MAPVAL_State_SC_MAPVAL_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_MAPVAL_State_SC_MAPVAL_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_MAPVAL_State_IsValid(int value);
constexpr SC_MAPVAL_State SC_MAPVAL_State_State_MIN = SC_MAPVAL_State_SYNC_MAPVAL_ALL;
constexpr SC_MAPVAL_State SC_MAPVAL_State_State_MAX = SC_MAPVAL_State_SYNC_MAPVAL_ONE;
constexpr int SC_MAPVAL_State_State_ARRAYSIZE = SC_MAPVAL_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_MAPVAL_State_descriptor();
template<typename T>
inline const std::string& SC_MAPVAL_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_MAPVAL_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_MAPVAL_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_MAPVAL_State_descriptor(), enum_t_value);
}
inline bool SC_MAPVAL_State_Parse(
    const std::string& name, SC_MAPVAL_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_MAPVAL_State>(
    SC_MAPVAL_State_descriptor(), name, value);
}
enum SC_STATUS_ACTION_ACTION : int {
  SC_STATUS_ACTION_ACTION_STATUS_ATTACH = 0,
  SC_STATUS_ACTION_ACTION_STATUS_DETACH = 1,
  SC_STATUS_ACTION_ACTION_STATUS_EFFECT = 2,
  SC_STATUS_ACTION_ACTION_SC_STATUS_ACTION_ACTION_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_STATUS_ACTION_ACTION_SC_STATUS_ACTION_ACTION_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_STATUS_ACTION_ACTION_IsValid(int value);
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION_ACTION_ACTION_MIN = SC_STATUS_ACTION_ACTION_STATUS_ATTACH;
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION_ACTION_ACTION_MAX = SC_STATUS_ACTION_ACTION_STATUS_EFFECT;
constexpr int SC_STATUS_ACTION_ACTION_ACTION_ARRAYSIZE = SC_STATUS_ACTION_ACTION_ACTION_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_STATUS_ACTION_ACTION_descriptor();
template<typename T>
inline const std::string& SC_STATUS_ACTION_ACTION_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_STATUS_ACTION_ACTION>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_STATUS_ACTION_ACTION_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_STATUS_ACTION_ACTION_descriptor(), enum_t_value);
}
inline bool SC_STATUS_ACTION_ACTION_Parse(
    const std::string& name, SC_STATUS_ACTION_ACTION* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_STATUS_ACTION_ACTION>(
    SC_STATUS_ACTION_ACTION_descriptor(), name, value);
}
enum SC_ITEM_CHANGE_ChangeType : int {
  SC_ITEM_CHANGE_ChangeType_ChangeGrid = 0,
  SC_ITEM_CHANGE_ChangeType_ChangePileNum = 1,
  SC_ITEM_CHANGE_ChangeType_ChangeExpireData = 2,
  SC_ITEM_CHANGE_ChangeType_ChangeDura = 3,
  SC_ITEM_CHANGE_ChangeType_ChangeDuraLimit = 4,
  SC_ITEM_CHANGE_ChangeType_SC_ITEM_CHANGE_ChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_ITEM_CHANGE_ChangeType_SC_ITEM_CHANGE_ChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_ITEM_CHANGE_ChangeType_IsValid(int value);
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE_ChangeType_ChangeType_MIN = SC_ITEM_CHANGE_ChangeType_ChangeGrid;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE_ChangeType_ChangeType_MAX = SC_ITEM_CHANGE_ChangeType_ChangeDuraLimit;
constexpr int SC_ITEM_CHANGE_ChangeType_ChangeType_ARRAYSIZE = SC_ITEM_CHANGE_ChangeType_ChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_ITEM_CHANGE_ChangeType_descriptor();
template<typename T>
inline const std::string& SC_ITEM_CHANGE_ChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_ITEM_CHANGE_ChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_ITEM_CHANGE_ChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_ITEM_CHANGE_ChangeType_descriptor(), enum_t_value);
}
inline bool SC_ITEM_CHANGE_ChangeType_Parse(
    const std::string& name, SC_ITEM_CHANGE_ChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_ITEM_CHANGE_ChangeType>(
    SC_ITEM_CHANGE_ChangeType_descriptor(), name, value);
}
enum SC_TEAMMEMBER_ACTION_Action : int {
  SC_TEAMMEMBER_ACTION_Action_TEAM_CREATE = 0,
  SC_TEAMMEMBER_ACTION_Action_TEAM_DESTORY = 1,
  SC_TEAMMEMBER_ACTION_Action_TEAM_ADDMEBER = 2,
  SC_TEAMMEMBER_ACTION_Action_TEAM_CHANGE_LEADER = 3,
  SC_TEAMMEMBER_ACTION_Action_TEAM_QUIT = 4,
  SC_TEAMMEMBER_ACTION_Action_TEAM_KICKMEMBER = 5,
  SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_LEV_CHG = 6,
  SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_NAME_CHG = 7,
  SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_ONLINE_CHG = 8,
  SC_TEAMMEMBER_ACTION_Action_SC_TEAMMEMBER_ACTION_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_TEAMMEMBER_ACTION_Action_SC_TEAMMEMBER_ACTION_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_TEAMMEMBER_ACTION_Action_IsValid(int value);
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION_Action_Action_MIN = SC_TEAMMEMBER_ACTION_Action_TEAM_CREATE;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION_Action_Action_MAX = SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_ONLINE_CHG;
constexpr int SC_TEAMMEMBER_ACTION_Action_Action_ARRAYSIZE = SC_TEAMMEMBER_ACTION_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_TEAMMEMBER_ACTION_Action_descriptor();
template<typename T>
inline const std::string& SC_TEAMMEMBER_ACTION_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_TEAMMEMBER_ACTION_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_TEAMMEMBER_ACTION_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_TEAMMEMBER_ACTION_Action_descriptor(), enum_t_value);
}
inline bool SC_TEAMMEMBER_ACTION_Action_Parse(
    const std::string& name, SC_TEAMMEMBER_ACTION_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_TEAMMEMBER_ACTION_Action>(
    SC_TEAMMEMBER_ACTION_Action_descriptor(), name, value);
}
enum SC_GUILDMEMBER_ACTION_Action : int {
  SC_GUILDMEMBER_ACTION_Action_GUILD_CREATE = 0,
  SC_GUILDMEMBER_ACTION_Action_GUILD_DESTORY = 1,
  SC_GUILDMEMBER_ACTION_Action_GUILD_ADDMEBER = 2,
  SC_GUILDMEMBER_ACTION_Action_GUILD_CHANGE_LEADER = 3,
  SC_GUILDMEMBER_ACTION_Action_GUILD_QUIT = 4,
  SC_GUILDMEMBER_ACTION_Action_GUILD_KICKMEMBER = 5,
  SC_GUILDMEMBER_ACTION_Action_GUILD_ACCEPTAPPLY = 6,
  SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_LEV_CHG = 10,
  SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_NAME_CHG = 11,
  SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_ONLINE_CHG = 12,
  SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_RANK_CHG = 13,
  SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_SCORE_CHG = 14,
  SC_GUILDMEMBER_ACTION_Action_SC_GUILDMEMBER_ACTION_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_GUILDMEMBER_ACTION_Action_SC_GUILDMEMBER_ACTION_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_GUILDMEMBER_ACTION_Action_IsValid(int value);
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION_Action_Action_MIN = SC_GUILDMEMBER_ACTION_Action_GUILD_CREATE;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION_Action_Action_MAX = SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_SCORE_CHG;
constexpr int SC_GUILDMEMBER_ACTION_Action_Action_ARRAYSIZE = SC_GUILDMEMBER_ACTION_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_GUILDMEMBER_ACTION_Action_descriptor();
template<typename T>
inline const std::string& SC_GUILDMEMBER_ACTION_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_GUILDMEMBER_ACTION_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_GUILDMEMBER_ACTION_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_GUILDMEMBER_ACTION_Action_descriptor(), enum_t_value);
}
inline bool SC_GUILDMEMBER_ACTION_Action_Parse(
    const std::string& name, SC_GUILDMEMBER_ACTION_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_GUILDMEMBER_ACTION_Action>(
    SC_GUILDMEMBER_ACTION_Action_descriptor(), name, value);
}
enum TalkChannel : int {
  CHANNEL_NORMAL = 0,
  CHANNEL_SCENE = 1,
  CHANNEL_PHASE = 2,
  CHANNEL_TEAM = 3,
  CHANNEL_GUILD = 4,
  CHANNEL_WORLD = 5,
  CHANNEL_TRUMPET = 6,
  CHANNEL_GLOBAL = 7,
  CHANNEL_SYSTEM = 8,
  CHANNEL_RUMOR = 9,
  CHANNEL_PRIVATE = 10,
  TalkChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TalkChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TalkChannel_IsValid(int value);
constexpr TalkChannel TalkChannel_MIN = CHANNEL_NORMAL;
constexpr TalkChannel TalkChannel_MAX = CHANNEL_PRIVATE;
constexpr int TalkChannel_ARRAYSIZE = TalkChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TalkChannel_descriptor();
template<typename T>
inline const std::string& TalkChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TalkChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TalkChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TalkChannel_descriptor(), enum_t_value);
}
inline bool TalkChannel_Parse(
    const std::string& name, TalkChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TalkChannel>(
    TalkChannel_descriptor(), name, value);
}
// ===================================================================

class SC_LOADMAP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_LOADMAP) */ {
 public:
  SC_LOADMAP();
  virtual ~SC_LOADMAP();

  SC_LOADMAP(const SC_LOADMAP& from);
  SC_LOADMAP(SC_LOADMAP&& from) noexcept
    : SC_LOADMAP() {
    *this = ::std::move(from);
  }

  inline SC_LOADMAP& operator=(const SC_LOADMAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOADMAP& operator=(SC_LOADMAP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_LOADMAP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_LOADMAP* internal_default_instance() {
    return reinterpret_cast<const SC_LOADMAP*>(
               &_SC_LOADMAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_LOADMAP& a, SC_LOADMAP& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOADMAP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_LOADMAP* New() const final {
    return CreateMaybeMessage<SC_LOADMAP>(nullptr);
  }

  SC_LOADMAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_LOADMAP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_LOADMAP& from);
  void MergeFrom(const SC_LOADMAP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOADMAP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_LOADMAP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kPosxFieldNumber = 3,
    kPosyFieldNumber = 4,
    kFaceFieldNumber = 5,
  };
  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float posx = 3;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 4;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float face = 5;
  void clear_face();
  float face() const;
  void set_face(float value);
  private:
  float _internal_face() const;
  void _internal_set_face(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC_LOADMAP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  float posx_;
  float posy_;
  float face_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_LOADMAP_SUCC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_LOADMAP_SUCC) */ {
 public:
  CS_LOADMAP_SUCC();
  virtual ~CS_LOADMAP_SUCC();

  CS_LOADMAP_SUCC(const CS_LOADMAP_SUCC& from);
  CS_LOADMAP_SUCC(CS_LOADMAP_SUCC&& from) noexcept
    : CS_LOADMAP_SUCC() {
    *this = ::std::move(from);
  }

  inline CS_LOADMAP_SUCC& operator=(const CS_LOADMAP_SUCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOADMAP_SUCC& operator=(CS_LOADMAP_SUCC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_LOADMAP_SUCC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_LOADMAP_SUCC* internal_default_instance() {
    return reinterpret_cast<const CS_LOADMAP_SUCC*>(
               &_CS_LOADMAP_SUCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CS_LOADMAP_SUCC& a, CS_LOADMAP_SUCC& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOADMAP_SUCC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_LOADMAP_SUCC* New() const final {
    return CreateMaybeMessage<CS_LOADMAP_SUCC>(nullptr);
  }

  CS_LOADMAP_SUCC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_LOADMAP_SUCC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_LOADMAP_SUCC& from);
  void MergeFrom(const CS_LOADMAP_SUCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOADMAP_SUCC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_LOADMAP_SUCC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_LOADMAP_SUCC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_PLAYERINFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_PLAYERINFO) */ {
 public:
  SC_PLAYERINFO();
  virtual ~SC_PLAYERINFO();

  SC_PLAYERINFO(const SC_PLAYERINFO& from);
  SC_PLAYERINFO(SC_PLAYERINFO&& from) noexcept
    : SC_PLAYERINFO() {
    *this = ::std::move(from);
  }

  inline SC_PLAYERINFO& operator=(const SC_PLAYERINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PLAYERINFO& operator=(SC_PLAYERINFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_PLAYERINFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_PLAYERINFO* internal_default_instance() {
    return reinterpret_cast<const SC_PLAYERINFO*>(
               &_SC_PLAYERINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_PLAYERINFO& a, SC_PLAYERINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PLAYERINFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_PLAYERINFO* New() const final {
    return CreateMaybeMessage<SC_PLAYERINFO>(nullptr);
  }

  SC_PLAYERINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_PLAYERINFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_PLAYERINFO& from);
  void MergeFrom(const SC_PLAYERINFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PLAYERINFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_PLAYERINFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPlayeridFieldNumber = 1,
    kWorldidFieldNumber = 2,
    kProfFieldNumber = 4,
    kBaselookFieldNumber = 5,
    kExpFieldNumber = 6,
    kLevelFieldNumber = 7,
    kViplevFieldNumber = 8,
    kPkvalFieldNumber = 9,
    kHonorFieldNumber = 10,
    kCampidFieldNumber = 11,
    kMoneyFieldNumber = 12,
    kMoneyBindFieldNumber = 13,
    kGoldFieldNumber = 14,
    kGoldBindFieldNumber = 15,
    kBagSizeFieldNumber = 16,
    kStrogeSizeFieldNumber = 17,
    kAchiPointFieldNumber = 18,
    kHpFieldNumber = 30,
    kMpFieldNumber = 31,
    kFpFieldNumber = 32,
    kNpFieldNumber = 33,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 playerid = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 worldid = 2;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::uint32 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prof = 4;
  void clear_prof();
  ::PROTOBUF_NAMESPACE_ID::uint32 prof() const;
  void set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prof() const;
  void _internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 baselook = 5;
  void clear_baselook();
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook() const;
  void set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baselook() const;
  void _internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp = 6;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 viplev = 8;
  void clear_viplev();
  ::PROTOBUF_NAMESPACE_ID::uint32 viplev() const;
  void set_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viplev() const;
  void _internal_set_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pkval = 9;
  void clear_pkval();
  ::PROTOBUF_NAMESPACE_ID::uint32 pkval() const;
  void set_pkval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pkval() const;
  void _internal_set_pkval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 honor = 10;
  void clear_honor();
  ::PROTOBUF_NAMESPACE_ID::uint32 honor() const;
  void set_honor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_honor() const;
  void _internal_set_honor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 campid = 11;
  void clear_campid();
  ::PROTOBUF_NAMESPACE_ID::uint32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campid() const;
  void _internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 money = 12;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::uint32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 money_bind = 13;
  void clear_money_bind();
  ::PROTOBUF_NAMESPACE_ID::uint32 money_bind() const;
  void set_money_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_money_bind() const;
  void _internal_set_money_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gold = 14;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gold_bind = 15;
  void clear_gold_bind();
  ::PROTOBUF_NAMESPACE_ID::uint32 gold_bind() const;
  void set_gold_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gold_bind() const;
  void _internal_set_gold_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bag_size = 16;
  void clear_bag_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 bag_size() const;
  void set_bag_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bag_size() const;
  void _internal_set_bag_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stroge_size = 17;
  void clear_stroge_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 stroge_size() const;
  void set_stroge_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stroge_size() const;
  void _internal_set_stroge_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 achi_point = 18;
  void clear_achi_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_point() const;
  void set_achi_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achi_point() const;
  void _internal_set_achi_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hp = 30;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mp = 31;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::uint32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fp = 32;
  void clear_fp();
  ::PROTOBUF_NAMESPACE_ID::uint32 fp() const;
  void set_fp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fp() const;
  void _internal_set_fp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 np = 33;
  void clear_np();
  ::PROTOBUF_NAMESPACE_ID::uint32 np() const;
  void set_np(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_np() const;
  void _internal_set_np(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_PLAYERINFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 worldid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viplev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pkval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 honor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 money_;
  ::PROTOBUF_NAMESPACE_ID::uint32 money_bind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gold_bind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bag_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stroge_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 np_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ACTORATTRIB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ACTORATTRIB) */ {
 public:
  SC_ACTORATTRIB();
  virtual ~SC_ACTORATTRIB();

  SC_ACTORATTRIB(const SC_ACTORATTRIB& from);
  SC_ACTORATTRIB(SC_ACTORATTRIB&& from) noexcept
    : SC_ACTORATTRIB() {
    *this = ::std::move(from);
  }

  inline SC_ACTORATTRIB& operator=(const SC_ACTORATTRIB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACTORATTRIB& operator=(SC_ACTORATTRIB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ACTORATTRIB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ACTORATTRIB* internal_default_instance() {
    return reinterpret_cast<const SC_ACTORATTRIB*>(
               &_SC_ACTORATTRIB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_ACTORATTRIB& a, SC_ACTORATTRIB& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACTORATTRIB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ACTORATTRIB* New() const final {
    return CreateMaybeMessage<SC_ACTORATTRIB>(nullptr);
  }

  SC_ACTORATTRIB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ACTORATTRIB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ACTORATTRIB& from);
  void MergeFrom(const SC_ACTORATTRIB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACTORATTRIB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ACTORATTRIB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribListFieldNumber = 1,
  };
  // repeated uint32 attrib_list = 1;
  int attrib_list_size() const;
  private:
  int _internal_attrib_list_size() const;
  public:
  void clear_attrib_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attrib_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attrib_list() const;
  void _internal_add_attrib_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attrib_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attrib_list(int index) const;
  void set_attrib_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attrib_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attrib_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attrib_list();

  // @@protoc_insertion_point(class_scope:SC_ACTORATTRIB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attrib_list_;
  mutable std::atomic<int> _attrib_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_COMMONDATA_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_COMMONDATA.Data) */ {
 public:
  SC_COMMONDATA_Data();
  virtual ~SC_COMMONDATA_Data();

  SC_COMMONDATA_Data(const SC_COMMONDATA_Data& from);
  SC_COMMONDATA_Data(SC_COMMONDATA_Data&& from) noexcept
    : SC_COMMONDATA_Data() {
    *this = ::std::move(from);
  }

  inline SC_COMMONDATA_Data& operator=(const SC_COMMONDATA_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_COMMONDATA_Data& operator=(SC_COMMONDATA_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_COMMONDATA_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_COMMONDATA_Data* internal_default_instance() {
    return reinterpret_cast<const SC_COMMONDATA_Data*>(
               &_SC_COMMONDATA_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_COMMONDATA_Data& a, SC_COMMONDATA_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_COMMONDATA_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_COMMONDATA_Data* New() const final {
    return CreateMaybeMessage<SC_COMMONDATA_Data>(nullptr);
  }

  SC_COMMONDATA_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_COMMONDATA_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_COMMONDATA_Data& from);
  void MergeFrom(const SC_COMMONDATA_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_COMMONDATA_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_COMMONDATA.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kData0FieldNumber = 2,
    kData1FieldNumber = 3,
    kData2FieldNumber = 4,
    kData3FieldNumber = 5,
    kKeyidxFieldNumber = 1,
  };
  // uint64 data0 = 2;
  void clear_data0();
  ::PROTOBUF_NAMESPACE_ID::uint64 data0() const;
  void set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data0() const;
  void _internal_set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data1 = 3;
  void clear_data1();
  ::PROTOBUF_NAMESPACE_ID::uint64 data1() const;
  void set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data1() const;
  void _internal_set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data2 = 4;
  void clear_data2();
  ::PROTOBUF_NAMESPACE_ID::uint64 data2() const;
  void set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data2() const;
  void _internal_set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data3 = 5;
  void clear_data3();
  ::PROTOBUF_NAMESPACE_ID::uint64 data3() const;
  void set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data3() const;
  void _internal_set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 keyidx = 1;
  void clear_keyidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx() const;
  void set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyidx() const;
  void _internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_COMMONDATA.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_COMMONDATA :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_COMMONDATA) */ {
 public:
  SC_COMMONDATA();
  virtual ~SC_COMMONDATA();

  SC_COMMONDATA(const SC_COMMONDATA& from);
  SC_COMMONDATA(SC_COMMONDATA&& from) noexcept
    : SC_COMMONDATA() {
    *this = ::std::move(from);
  }

  inline SC_COMMONDATA& operator=(const SC_COMMONDATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_COMMONDATA& operator=(SC_COMMONDATA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_COMMONDATA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_COMMONDATA* internal_default_instance() {
    return reinterpret_cast<const SC_COMMONDATA*>(
               &_SC_COMMONDATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SC_COMMONDATA& a, SC_COMMONDATA& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_COMMONDATA* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_COMMONDATA* New() const final {
    return CreateMaybeMessage<SC_COMMONDATA>(nullptr);
  }

  SC_COMMONDATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_COMMONDATA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_COMMONDATA& from);
  void MergeFrom(const SC_COMMONDATA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_COMMONDATA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_COMMONDATA";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_COMMONDATA_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 1,
  };
  // repeated .SC_COMMONDATA.Data datalist = 1;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::SC_COMMONDATA_Data* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COMMONDATA_Data >*
      mutable_datalist();
  private:
  const ::SC_COMMONDATA_Data& _internal_datalist(int index) const;
  ::SC_COMMONDATA_Data* _internal_add_datalist();
  public:
  const ::SC_COMMONDATA_Data& datalist(int index) const;
  ::SC_COMMONDATA_Data* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COMMONDATA_Data >&
      datalist() const;

  // @@protoc_insertion_point(class_scope:SC_COMMONDATA)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COMMONDATA_Data > datalist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DATACOUNT_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DATACOUNT.Data) */ {
 public:
  SC_DATACOUNT_Data();
  virtual ~SC_DATACOUNT_Data();

  SC_DATACOUNT_Data(const SC_DATACOUNT_Data& from);
  SC_DATACOUNT_Data(SC_DATACOUNT_Data&& from) noexcept
    : SC_DATACOUNT_Data() {
    *this = ::std::move(from);
  }

  inline SC_DATACOUNT_Data& operator=(const SC_DATACOUNT_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DATACOUNT_Data& operator=(SC_DATACOUNT_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DATACOUNT_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DATACOUNT_Data* internal_default_instance() {
    return reinterpret_cast<const SC_DATACOUNT_Data*>(
               &_SC_DATACOUNT_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_DATACOUNT_Data& a, SC_DATACOUNT_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DATACOUNT_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DATACOUNT_Data* New() const final {
    return CreateMaybeMessage<SC_DATACOUNT_Data>(nullptr);
  }

  SC_DATACOUNT_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DATACOUNT_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DATACOUNT_Data& from);
  void MergeFrom(const SC_DATACOUNT_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DATACOUNT_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DATACOUNT.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdxFieldNumber = 2,
    kDataFieldNumber = 3,
    kNextResetTimeFieldNumber = 4,
  };
  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 data = 3;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::uint64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 next_reset_time = 4;
  void clear_next_reset_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset_time() const;
  void set_next_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_reset_time() const;
  void _internal_set_next_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_DATACOUNT.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DATACOUNT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DATACOUNT) */ {
 public:
  SC_DATACOUNT();
  virtual ~SC_DATACOUNT();

  SC_DATACOUNT(const SC_DATACOUNT& from);
  SC_DATACOUNT(SC_DATACOUNT&& from) noexcept
    : SC_DATACOUNT() {
    *this = ::std::move(from);
  }

  inline SC_DATACOUNT& operator=(const SC_DATACOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DATACOUNT& operator=(SC_DATACOUNT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DATACOUNT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DATACOUNT* internal_default_instance() {
    return reinterpret_cast<const SC_DATACOUNT*>(
               &_SC_DATACOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SC_DATACOUNT& a, SC_DATACOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DATACOUNT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DATACOUNT* New() const final {
    return CreateMaybeMessage<SC_DATACOUNT>(nullptr);
  }

  SC_DATACOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DATACOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DATACOUNT& from);
  void MergeFrom(const SC_DATACOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DATACOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DATACOUNT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_DATACOUNT_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 1,
  };
  // repeated .SC_DATACOUNT.Data datalist = 1;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::SC_DATACOUNT_Data* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DATACOUNT_Data >*
      mutable_datalist();
  private:
  const ::SC_DATACOUNT_Data& _internal_datalist(int index) const;
  ::SC_DATACOUNT_Data* _internal_add_datalist();
  public:
  const ::SC_DATACOUNT_Data& datalist(int index) const;
  ::SC_DATACOUNT_Data* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DATACOUNT_Data >&
      datalist() const;

  // @@protoc_insertion_point(class_scope:SC_DATACOUNT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DATACOUNT_Data > datalist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_COOLDOWN_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_COOLDOWN.Data) */ {
 public:
  SC_COOLDOWN_Data();
  virtual ~SC_COOLDOWN_Data();

  SC_COOLDOWN_Data(const SC_COOLDOWN_Data& from);
  SC_COOLDOWN_Data(SC_COOLDOWN_Data&& from) noexcept
    : SC_COOLDOWN_Data() {
    *this = ::std::move(from);
  }

  inline SC_COOLDOWN_Data& operator=(const SC_COOLDOWN_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_COOLDOWN_Data& operator=(SC_COOLDOWN_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_COOLDOWN_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_COOLDOWN_Data* internal_default_instance() {
    return reinterpret_cast<const SC_COOLDOWN_Data*>(
               &_SC_COOLDOWN_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SC_COOLDOWN_Data& a, SC_COOLDOWN_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_COOLDOWN_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_COOLDOWN_Data* New() const final {
    return CreateMaybeMessage<SC_COOLDOWN_Data>(nullptr);
  }

  SC_COOLDOWN_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_COOLDOWN_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_COOLDOWN_Data& from);
  void MergeFrom(const SC_COOLDOWN_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_COOLDOWN_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_COOLDOWN.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdxFieldNumber = 2,
    kExpiretimeFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiretime = 3;
  void clear_expiretime();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiretime() const;
  void set_expiretime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiretime() const;
  void _internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_COOLDOWN.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiretime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_COOLDOWN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_COOLDOWN) */ {
 public:
  SC_COOLDOWN();
  virtual ~SC_COOLDOWN();

  SC_COOLDOWN(const SC_COOLDOWN& from);
  SC_COOLDOWN(SC_COOLDOWN&& from) noexcept
    : SC_COOLDOWN() {
    *this = ::std::move(from);
  }

  inline SC_COOLDOWN& operator=(const SC_COOLDOWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_COOLDOWN& operator=(SC_COOLDOWN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_COOLDOWN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_COOLDOWN* internal_default_instance() {
    return reinterpret_cast<const SC_COOLDOWN*>(
               &_SC_COOLDOWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SC_COOLDOWN& a, SC_COOLDOWN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_COOLDOWN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_COOLDOWN* New() const final {
    return CreateMaybeMessage<SC_COOLDOWN>(nullptr);
  }

  SC_COOLDOWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_COOLDOWN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_COOLDOWN& from);
  void MergeFrom(const SC_COOLDOWN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_COOLDOWN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_COOLDOWN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_COOLDOWN_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 1,
  };
  // repeated .SC_COOLDOWN.Data datalist = 1;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::SC_COOLDOWN_Data* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COOLDOWN_Data >*
      mutable_datalist();
  private:
  const ::SC_COOLDOWN_Data& _internal_datalist(int index) const;
  ::SC_COOLDOWN_Data* _internal_add_datalist();
  public:
  const ::SC_COOLDOWN_Data& datalist(int index) const;
  ::SC_COOLDOWN_Data* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COOLDOWN_Data >&
      datalist() const;

  // @@protoc_insertion_point(class_scope:SC_COOLDOWN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COOLDOWN_Data > datalist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SYSVAR_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SYSVAR.Data) */ {
 public:
  SC_SYSVAR_Data();
  virtual ~SC_SYSVAR_Data();

  SC_SYSVAR_Data(const SC_SYSVAR_Data& from);
  SC_SYSVAR_Data(SC_SYSVAR_Data&& from) noexcept
    : SC_SYSVAR_Data() {
    *this = ::std::move(from);
  }

  inline SC_SYSVAR_Data& operator=(const SC_SYSVAR_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SYSVAR_Data& operator=(SC_SYSVAR_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SYSVAR_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SYSVAR_Data* internal_default_instance() {
    return reinterpret_cast<const SC_SYSVAR_Data*>(
               &_SC_SYSVAR_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SC_SYSVAR_Data& a, SC_SYSVAR_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SYSVAR_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SYSVAR_Data* New() const final {
    return CreateMaybeMessage<SC_SYSVAR_Data>(nullptr);
  }

  SC_SYSVAR_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SYSVAR_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SYSVAR_Data& from);
  void MergeFrom(const SC_SYSVAR_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SYSVAR_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SYSVAR.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr0FieldNumber = 6,
    kStr1FieldNumber = 7,
    kStr2FieldNumber = 8,
    kStr3FieldNumber = 9,
    kData0FieldNumber = 2,
    kData1FieldNumber = 3,
    kData2FieldNumber = 4,
    kData3FieldNumber = 5,
    kKeyidxFieldNumber = 1,
  };
  // string str0 = 6;
  void clear_str0();
  const std::string& str0() const;
  void set_str0(const std::string& value);
  void set_str0(std::string&& value);
  void set_str0(const char* value);
  void set_str0(const char* value, size_t size);
  std::string* mutable_str0();
  std::string* release_str0();
  void set_allocated_str0(std::string* str0);
  private:
  const std::string& _internal_str0() const;
  void _internal_set_str0(const std::string& value);
  std::string* _internal_mutable_str0();
  public:

  // string str1 = 7;
  void clear_str1();
  const std::string& str1() const;
  void set_str1(const std::string& value);
  void set_str1(std::string&& value);
  void set_str1(const char* value);
  void set_str1(const char* value, size_t size);
  std::string* mutable_str1();
  std::string* release_str1();
  void set_allocated_str1(std::string* str1);
  private:
  const std::string& _internal_str1() const;
  void _internal_set_str1(const std::string& value);
  std::string* _internal_mutable_str1();
  public:

  // string str2 = 8;
  void clear_str2();
  const std::string& str2() const;
  void set_str2(const std::string& value);
  void set_str2(std::string&& value);
  void set_str2(const char* value);
  void set_str2(const char* value, size_t size);
  std::string* mutable_str2();
  std::string* release_str2();
  void set_allocated_str2(std::string* str2);
  private:
  const std::string& _internal_str2() const;
  void _internal_set_str2(const std::string& value);
  std::string* _internal_mutable_str2();
  public:

  // string str3 = 9;
  void clear_str3();
  const std::string& str3() const;
  void set_str3(const std::string& value);
  void set_str3(std::string&& value);
  void set_str3(const char* value);
  void set_str3(const char* value, size_t size);
  std::string* mutable_str3();
  std::string* release_str3();
  void set_allocated_str3(std::string* str3);
  private:
  const std::string& _internal_str3() const;
  void _internal_set_str3(const std::string& value);
  std::string* _internal_mutable_str3();
  public:

  // uint64 data0 = 2;
  void clear_data0();
  ::PROTOBUF_NAMESPACE_ID::uint64 data0() const;
  void set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data0() const;
  void _internal_set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data1 = 3;
  void clear_data1();
  ::PROTOBUF_NAMESPACE_ID::uint64 data1() const;
  void set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data1() const;
  void _internal_set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data2 = 4;
  void clear_data2();
  ::PROTOBUF_NAMESPACE_ID::uint64 data2() const;
  void set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data2() const;
  void _internal_set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data3 = 5;
  void clear_data3();
  ::PROTOBUF_NAMESPACE_ID::uint64 data3() const;
  void set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data3() const;
  void _internal_set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 keyidx = 1;
  void clear_keyidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx() const;
  void set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyidx() const;
  void _internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SYSVAR.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SYSVAR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SYSVAR) */ {
 public:
  SC_SYSVAR();
  virtual ~SC_SYSVAR();

  SC_SYSVAR(const SC_SYSVAR& from);
  SC_SYSVAR(SC_SYSVAR&& from) noexcept
    : SC_SYSVAR() {
    *this = ::std::move(from);
  }

  inline SC_SYSVAR& operator=(const SC_SYSVAR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SYSVAR& operator=(SC_SYSVAR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SYSVAR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SYSVAR* internal_default_instance() {
    return reinterpret_cast<const SC_SYSVAR*>(
               &_SC_SYSVAR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SC_SYSVAR& a, SC_SYSVAR& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SYSVAR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SYSVAR* New() const final {
    return CreateMaybeMessage<SC_SYSVAR>(nullptr);
  }

  SC_SYSVAR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SYSVAR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SYSVAR& from);
  void MergeFrom(const SC_SYSVAR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SYSVAR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SYSVAR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_SYSVAR_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 1,
  };
  // repeated .SC_SYSVAR.Data datalist = 1;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::SC_SYSVAR_Data* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SYSVAR_Data >*
      mutable_datalist();
  private:
  const ::SC_SYSVAR_Data& _internal_datalist(int index) const;
  ::SC_SYSVAR_Data* _internal_add_datalist();
  public:
  const ::SC_SYSVAR_Data& datalist(int index) const;
  ::SC_SYSVAR_Data* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SYSVAR_Data >&
      datalist() const;

  // @@protoc_insertion_point(class_scope:SC_SYSVAR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SYSVAR_Data > datalist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ENTERMAP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ENTERMAP) */ {
 public:
  SC_ENTERMAP();
  virtual ~SC_ENTERMAP();

  SC_ENTERMAP(const SC_ENTERMAP& from);
  SC_ENTERMAP(SC_ENTERMAP&& from) noexcept
    : SC_ENTERMAP() {
    *this = ::std::move(from);
  }

  inline SC_ENTERMAP& operator=(const SC_ENTERMAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ENTERMAP& operator=(SC_ENTERMAP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ENTERMAP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ENTERMAP* internal_default_instance() {
    return reinterpret_cast<const SC_ENTERMAP*>(
               &_SC_ENTERMAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SC_ENTERMAP& a, SC_ENTERMAP& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ENTERMAP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ENTERMAP* New() const final {
    return CreateMaybeMessage<SC_ENTERMAP>(nullptr);
  }

  SC_ENTERMAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ENTERMAP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ENTERMAP& from);
  void MergeFrom(const SC_ENTERMAP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ENTERMAP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ENTERMAP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kFaceFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float face = 3;
  void clear_face();
  float face() const;
  void set_face(float value);
  private:
  float _internal_face() const;
  void _internal_set_face(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ENTERMAP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float face_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_AOI_NEW :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_AOI_NEW) */ {
 public:
  SC_AOI_NEW();
  virtual ~SC_AOI_NEW();

  SC_AOI_NEW(const SC_AOI_NEW& from);
  SC_AOI_NEW(SC_AOI_NEW&& from) noexcept
    : SC_AOI_NEW() {
    *this = ::std::move(from);
  }

  inline SC_AOI_NEW& operator=(const SC_AOI_NEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_AOI_NEW& operator=(SC_AOI_NEW&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_AOI_NEW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_AOI_NEW* internal_default_instance() {
    return reinterpret_cast<const SC_AOI_NEW*>(
               &_SC_AOI_NEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SC_AOI_NEW& a, SC_AOI_NEW& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_AOI_NEW* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_AOI_NEW* New() const final {
    return CreateMaybeMessage<SC_AOI_NEW>(nullptr);
  }

  SC_AOI_NEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_AOI_NEW>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_AOI_NEW& from);
  void MergeFrom(const SC_AOI_NEW& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_AOI_NEW* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_AOI_NEW";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kGuildnameFieldNumber = 31,
    kActorIdFieldNumber = 2,
    kMapidFieldNumber = 1,
    kActortypeFieldNumber = 4,
    kBaselookFieldNumber = 5,
    kProfFieldNumber = 6,
    kLevFieldNumber = 7,
    kCampidFieldNumber = 8,
    kHpFieldNumber = 9,
    kHpmaxFieldNumber = 10,
    kOwneridFieldNumber = 12,
    kMovespdFieldNumber = 11,
    kPosxFieldNumber = 13,
    kPosyFieldNumber = 14,
    kFaceFieldNumber = 15,
    kGuildidFieldNumber = 30,
    kWeaponidFieldNumber = 20,
    kArmoridFieldNumber = 21,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string guildname = 31;
  void clear_guildname();
  const std::string& guildname() const;
  void set_guildname(const std::string& value);
  void set_guildname(std::string&& value);
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  std::string* mutable_guildname();
  std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 actortype = 4;
  void clear_actortype();
  ::PROTOBUF_NAMESPACE_ID::uint32 actortype() const;
  void set_actortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actortype() const;
  void _internal_set_actortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 baselook = 5;
  void clear_baselook();
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook() const;
  void set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baselook() const;
  void _internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prof = 6;
  void clear_prof();
  ::PROTOBUF_NAMESPACE_ID::uint32 prof() const;
  void set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prof() const;
  void _internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lev = 7;
  void clear_lev();
  ::PROTOBUF_NAMESPACE_ID::uint32 lev() const;
  void set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lev() const;
  void _internal_set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 campid = 8;
  void clear_campid();
  ::PROTOBUF_NAMESPACE_ID::uint32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campid() const;
  void _internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hp = 9;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hpmax = 10;
  void clear_hpmax();
  ::PROTOBUF_NAMESPACE_ID::uint32 hpmax() const;
  void set_hpmax(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hpmax() const;
  void _internal_set_hpmax(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ownerid = 12;
  void clear_ownerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 ownerid() const;
  void set_ownerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ownerid() const;
  void _internal_set_ownerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 movespd = 11;
  void clear_movespd();
  ::PROTOBUF_NAMESPACE_ID::uint32 movespd() const;
  void set_movespd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_movespd() const;
  void _internal_set_movespd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float posx = 13;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 14;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float face = 15;
  void clear_face();
  float face() const;
  void set_face(float value);
  private:
  float _internal_face() const;
  void _internal_set_face(float value);
  public:

  // uint32 guildid = 30;
  void clear_guildid();
  ::PROTOBUF_NAMESPACE_ID::uint32 guildid() const;
  void set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guildid() const;
  void _internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 weaponid = 20;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::uint32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 armorid = 21;
  void clear_armorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 armorid() const;
  void set_armorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_armorid() const;
  void _internal_set_armorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_AOI_NEW)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actortype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hpmax_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ownerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 movespd_;
  float posx_;
  float posy_;
  float face_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guildid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weaponid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 armorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_AOI_REMOVE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_AOI_REMOVE) */ {
 public:
  SC_AOI_REMOVE();
  virtual ~SC_AOI_REMOVE();

  SC_AOI_REMOVE(const SC_AOI_REMOVE& from);
  SC_AOI_REMOVE(SC_AOI_REMOVE&& from) noexcept
    : SC_AOI_REMOVE() {
    *this = ::std::move(from);
  }

  inline SC_AOI_REMOVE& operator=(const SC_AOI_REMOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_AOI_REMOVE& operator=(SC_AOI_REMOVE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_AOI_REMOVE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_AOI_REMOVE* internal_default_instance() {
    return reinterpret_cast<const SC_AOI_REMOVE*>(
               &_SC_AOI_REMOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SC_AOI_REMOVE& a, SC_AOI_REMOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_AOI_REMOVE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_AOI_REMOVE* New() const final {
    return CreateMaybeMessage<SC_AOI_REMOVE>(nullptr);
  }

  SC_AOI_REMOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_AOI_REMOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_AOI_REMOVE& from);
  void MergeFrom(const SC_AOI_REMOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_AOI_REMOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_AOI_REMOVE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdlistFieldNumber = 2,
    kMapidFieldNumber = 1,
  };
  // repeated uint64 idlist = 2;
  int idlist_size() const;
  private:
  int _internal_idlist_size() const;
  public:
  void clear_idlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_idlist() const;
  void _internal_add_idlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_idlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 idlist(int index) const;
  void set_idlist(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_idlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      idlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_idlist();

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_AOI_REMOVE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > idlist_;
  mutable std::atomic<int> _idlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_AOI_UPDATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_AOI_UPDATE) */ {
 public:
  SC_AOI_UPDATE();
  virtual ~SC_AOI_UPDATE();

  SC_AOI_UPDATE(const SC_AOI_UPDATE& from);
  SC_AOI_UPDATE(SC_AOI_UPDATE&& from) noexcept
    : SC_AOI_UPDATE() {
    *this = ::std::move(from);
  }

  inline SC_AOI_UPDATE& operator=(const SC_AOI_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_AOI_UPDATE& operator=(SC_AOI_UPDATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_AOI_UPDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_AOI_UPDATE* internal_default_instance() {
    return reinterpret_cast<const SC_AOI_UPDATE*>(
               &_SC_AOI_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SC_AOI_UPDATE& a, SC_AOI_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_AOI_UPDATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_AOI_UPDATE* New() const final {
    return CreateMaybeMessage<SC_AOI_UPDATE>(nullptr);
  }

  SC_AOI_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_AOI_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_AOI_UPDATE& from);
  void MergeFrom(const SC_AOI_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_AOI_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_AOI_UPDATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 2,
    kMapidFieldNumber = 1,
    kPosxFieldNumber = 3,
    kPosyFieldNumber = 4,
  };
  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float posx = 3;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 4;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC_AOI_UPDATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  float posx_;
  float posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_MAPVAL_MapVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_MAPVAL.MapVal) */ {
 public:
  SC_MAPVAL_MapVal();
  virtual ~SC_MAPVAL_MapVal();

  SC_MAPVAL_MapVal(const SC_MAPVAL_MapVal& from);
  SC_MAPVAL_MapVal(SC_MAPVAL_MapVal&& from) noexcept
    : SC_MAPVAL_MapVal() {
    *this = ::std::move(from);
  }

  inline SC_MAPVAL_MapVal& operator=(const SC_MAPVAL_MapVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MAPVAL_MapVal& operator=(SC_MAPVAL_MapVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_MAPVAL_MapVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_MAPVAL_MapVal* internal_default_instance() {
    return reinterpret_cast<const SC_MAPVAL_MapVal*>(
               &_SC_MAPVAL_MapVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SC_MAPVAL_MapVal& a, SC_MAPVAL_MapVal& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MAPVAL_MapVal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_MAPVAL_MapVal* New() const final {
    return CreateMaybeMessage<SC_MAPVAL_MapVal>(nullptr);
  }

  SC_MAPVAL_MapVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_MAPVAL_MapVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_MAPVAL_MapVal& from);
  void MergeFrom(const SC_MAPVAL_MapVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MAPVAL_MapVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_MAPVAL.MapVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_MAPVAL.MapVal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_MAPVAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_MAPVAL) */ {
 public:
  SC_MAPVAL();
  virtual ~SC_MAPVAL();

  SC_MAPVAL(const SC_MAPVAL& from);
  SC_MAPVAL(SC_MAPVAL&& from) noexcept
    : SC_MAPVAL() {
    *this = ::std::move(from);
  }

  inline SC_MAPVAL& operator=(const SC_MAPVAL& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MAPVAL& operator=(SC_MAPVAL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_MAPVAL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_MAPVAL* internal_default_instance() {
    return reinterpret_cast<const SC_MAPVAL*>(
               &_SC_MAPVAL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SC_MAPVAL& a, SC_MAPVAL& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MAPVAL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_MAPVAL* New() const final {
    return CreateMaybeMessage<SC_MAPVAL>(nullptr);
  }

  SC_MAPVAL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_MAPVAL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_MAPVAL& from);
  void MergeFrom(const SC_MAPVAL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MAPVAL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_MAPVAL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_MAPVAL_MapVal MapVal;

  typedef SC_MAPVAL_State State;
  static constexpr State SYNC_MAPVAL_ALL =
    SC_MAPVAL_State_SYNC_MAPVAL_ALL;
  static constexpr State SYNC_MAPVAL_ONE =
    SC_MAPVAL_State_SYNC_MAPVAL_ONE;
  static inline bool State_IsValid(int value) {
    return SC_MAPVAL_State_IsValid(value);
  }
  static constexpr State State_MIN =
    SC_MAPVAL_State_State_MIN;
  static constexpr State State_MAX =
    SC_MAPVAL_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    SC_MAPVAL_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return SC_MAPVAL_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return SC_MAPVAL_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return SC_MAPVAL_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapValSetFieldNumber = 2,
    kUserMapValSetFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // repeated .SC_MAPVAL.MapVal map_val_set = 2;
  int map_val_set_size() const;
  private:
  int _internal_map_val_set_size() const;
  public:
  void clear_map_val_set();
  ::SC_MAPVAL_MapVal* mutable_map_val_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >*
      mutable_map_val_set();
  private:
  const ::SC_MAPVAL_MapVal& _internal_map_val_set(int index) const;
  ::SC_MAPVAL_MapVal* _internal_add_map_val_set();
  public:
  const ::SC_MAPVAL_MapVal& map_val_set(int index) const;
  ::SC_MAPVAL_MapVal* add_map_val_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >&
      map_val_set() const;

  // repeated .SC_MAPVAL.MapVal user_map_val_set = 3;
  int user_map_val_set_size() const;
  private:
  int _internal_user_map_val_set_size() const;
  public:
  void clear_user_map_val_set();
  ::SC_MAPVAL_MapVal* mutable_user_map_val_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >*
      mutable_user_map_val_set();
  private:
  const ::SC_MAPVAL_MapVal& _internal_user_map_val_set(int index) const;
  ::SC_MAPVAL_MapVal* _internal_add_user_map_val_set();
  public:
  const ::SC_MAPVAL_MapVal& user_map_val_set(int index) const;
  ::SC_MAPVAL_MapVal* add_user_map_val_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >&
      user_map_val_set() const;

  // .SC_MAPVAL.State state = 1;
  void clear_state();
  ::SC_MAPVAL_State state() const;
  void set_state(::SC_MAPVAL_State value);
  private:
  ::SC_MAPVAL_State _internal_state() const;
  void _internal_set_state(::SC_MAPVAL_State value);
  public:

  // @@protoc_insertion_point(class_scope:SC_MAPVAL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal > map_val_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal > user_map_val_set_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ATTRIB_CHANGE_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ATTRIB_CHANGE.Data) */ {
 public:
  SC_ATTRIB_CHANGE_Data();
  virtual ~SC_ATTRIB_CHANGE_Data();

  SC_ATTRIB_CHANGE_Data(const SC_ATTRIB_CHANGE_Data& from);
  SC_ATTRIB_CHANGE_Data(SC_ATTRIB_CHANGE_Data&& from) noexcept
    : SC_ATTRIB_CHANGE_Data() {
    *this = ::std::move(from);
  }

  inline SC_ATTRIB_CHANGE_Data& operator=(const SC_ATTRIB_CHANGE_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ATTRIB_CHANGE_Data& operator=(SC_ATTRIB_CHANGE_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ATTRIB_CHANGE_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ATTRIB_CHANGE_Data* internal_default_instance() {
    return reinterpret_cast<const SC_ATTRIB_CHANGE_Data*>(
               &_SC_ATTRIB_CHANGE_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SC_ATTRIB_CHANGE_Data& a, SC_ATTRIB_CHANGE_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ATTRIB_CHANGE_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ATTRIB_CHANGE_Data* New() const final {
    return CreateMaybeMessage<SC_ATTRIB_CHANGE_Data>(nullptr);
  }

  SC_ATTRIB_CHANGE_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ATTRIB_CHANGE_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ATTRIB_CHANGE_Data& from);
  void MergeFrom(const SC_ATTRIB_CHANGE_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ATTRIB_CHANGE_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ATTRIB_CHANGE.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValstrFieldNumber = 3,
    kActypeFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // string valstr = 3;
  void clear_valstr();
  const std::string& valstr() const;
  void set_valstr(const std::string& value);
  void set_valstr(std::string&& value);
  void set_valstr(const char* value);
  void set_valstr(const char* value, size_t size);
  std::string* mutable_valstr();
  std::string* release_valstr();
  void set_allocated_valstr(std::string* valstr);
  private:
  const std::string& _internal_valstr() const;
  void _internal_set_valstr(const std::string& value);
  std::string* _internal_mutable_valstr();
  public:

  // uint32 actype = 1;
  void clear_actype();
  ::PROTOBUF_NAMESPACE_ID::uint32 actype() const;
  void set_actype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actype() const;
  void _internal_set_actype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 val = 2;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ATTRIB_CHANGE.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valstr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ATTRIB_CHANGE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ATTRIB_CHANGE) */ {
 public:
  SC_ATTRIB_CHANGE();
  virtual ~SC_ATTRIB_CHANGE();

  SC_ATTRIB_CHANGE(const SC_ATTRIB_CHANGE& from);
  SC_ATTRIB_CHANGE(SC_ATTRIB_CHANGE&& from) noexcept
    : SC_ATTRIB_CHANGE() {
    *this = ::std::move(from);
  }

  inline SC_ATTRIB_CHANGE& operator=(const SC_ATTRIB_CHANGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ATTRIB_CHANGE& operator=(SC_ATTRIB_CHANGE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ATTRIB_CHANGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ATTRIB_CHANGE* internal_default_instance() {
    return reinterpret_cast<const SC_ATTRIB_CHANGE*>(
               &_SC_ATTRIB_CHANGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SC_ATTRIB_CHANGE& a, SC_ATTRIB_CHANGE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ATTRIB_CHANGE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ATTRIB_CHANGE* New() const final {
    return CreateMaybeMessage<SC_ATTRIB_CHANGE>(nullptr);
  }

  SC_ATTRIB_CHANGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ATTRIB_CHANGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ATTRIB_CHANGE& from);
  void MergeFrom(const SC_ATTRIB_CHANGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ATTRIB_CHANGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ATTRIB_CHANGE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_ATTRIB_CHANGE_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::SC_ATTRIB_CHANGE_Data* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >*
      mutable_datalist();
  private:
  const ::SC_ATTRIB_CHANGE_Data& _internal_datalist(int index) const;
  ::SC_ATTRIB_CHANGE_Data* _internal_add_datalist();
  public:
  const ::SC_ATTRIB_CHANGE_Data& datalist(int index) const;
  ::SC_ATTRIB_CHANGE_Data* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >&
      datalist() const;

  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ATTRIB_CHANGE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data > datalist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_STATUS_LIST_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_STATUS_LIST.Data) */ {
 public:
  SC_STATUS_LIST_Data();
  virtual ~SC_STATUS_LIST_Data();

  SC_STATUS_LIST_Data(const SC_STATUS_LIST_Data& from);
  SC_STATUS_LIST_Data(SC_STATUS_LIST_Data&& from) noexcept
    : SC_STATUS_LIST_Data() {
    *this = ::std::move(from);
  }

  inline SC_STATUS_LIST_Data& operator=(const SC_STATUS_LIST_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STATUS_LIST_Data& operator=(SC_STATUS_LIST_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_STATUS_LIST_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_STATUS_LIST_Data* internal_default_instance() {
    return reinterpret_cast<const SC_STATUS_LIST_Data*>(
               &_SC_STATUS_LIST_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SC_STATUS_LIST_Data& a, SC_STATUS_LIST_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STATUS_LIST_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_STATUS_LIST_Data* New() const final {
    return CreateMaybeMessage<SC_STATUS_LIST_Data>(nullptr);
  }

  SC_STATUS_LIST_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_STATUS_LIST_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_STATUS_LIST_Data& from);
  void MergeFrom(const SC_STATUS_LIST_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STATUS_LIST_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_STATUS_LIST.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusidFieldNumber = 1,
    kStatustypeFieldNumber = 2,
    kStatuslevFieldNumber = 3,
    kPowerFieldNumber = 4,
    kIdcasterFieldNumber = 8,
  };
  // uint32 statusid = 1;
  void clear_statusid();
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid() const;
  void set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statusid() const;
  void _internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statustype = 2;
  void clear_statustype();
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype() const;
  void set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statustype() const;
  void _internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statuslev = 3;
  void clear_statuslev();
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev() const;
  void set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statuslev() const;
  void _internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 power = 4;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 idcaster = 8;
  void clear_idcaster();
  ::PROTOBUF_NAMESPACE_ID::uint64 idcaster() const;
  void set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idcaster() const;
  void _internal_set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_STATUS_LIST.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idcaster_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_STATUS_LIST :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_STATUS_LIST) */ {
 public:
  SC_STATUS_LIST();
  virtual ~SC_STATUS_LIST();

  SC_STATUS_LIST(const SC_STATUS_LIST& from);
  SC_STATUS_LIST(SC_STATUS_LIST&& from) noexcept
    : SC_STATUS_LIST() {
    *this = ::std::move(from);
  }

  inline SC_STATUS_LIST& operator=(const SC_STATUS_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STATUS_LIST& operator=(SC_STATUS_LIST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_STATUS_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_STATUS_LIST* internal_default_instance() {
    return reinterpret_cast<const SC_STATUS_LIST*>(
               &_SC_STATUS_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SC_STATUS_LIST& a, SC_STATUS_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STATUS_LIST* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_STATUS_LIST* New() const final {
    return CreateMaybeMessage<SC_STATUS_LIST>(nullptr);
  }

  SC_STATUS_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_STATUS_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_STATUS_LIST& from);
  void MergeFrom(const SC_STATUS_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STATUS_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_STATUS_LIST";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_STATUS_LIST_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusListFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // repeated .SC_STATUS_LIST.Data status_list = 2;
  int status_list_size() const;
  private:
  int _internal_status_list_size() const;
  public:
  void clear_status_list();
  ::SC_STATUS_LIST_Data* mutable_status_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_LIST_Data >*
      mutable_status_list();
  private:
  const ::SC_STATUS_LIST_Data& _internal_status_list(int index) const;
  ::SC_STATUS_LIST_Data* _internal_add_status_list();
  public:
  const ::SC_STATUS_LIST_Data& status_list(int index) const;
  ::SC_STATUS_LIST_Data* add_status_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_LIST_Data >&
      status_list() const;

  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_STATUS_LIST)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_LIST_Data > status_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_STATUS_INFO_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_STATUS_INFO.Data) */ {
 public:
  SC_STATUS_INFO_Data();
  virtual ~SC_STATUS_INFO_Data();

  SC_STATUS_INFO_Data(const SC_STATUS_INFO_Data& from);
  SC_STATUS_INFO_Data(SC_STATUS_INFO_Data&& from) noexcept
    : SC_STATUS_INFO_Data() {
    *this = ::std::move(from);
  }

  inline SC_STATUS_INFO_Data& operator=(const SC_STATUS_INFO_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STATUS_INFO_Data& operator=(SC_STATUS_INFO_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_STATUS_INFO_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_STATUS_INFO_Data* internal_default_instance() {
    return reinterpret_cast<const SC_STATUS_INFO_Data*>(
               &_SC_STATUS_INFO_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SC_STATUS_INFO_Data& a, SC_STATUS_INFO_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STATUS_INFO_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_STATUS_INFO_Data* New() const final {
    return CreateMaybeMessage<SC_STATUS_INFO_Data>(nullptr);
  }

  SC_STATUS_INFO_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_STATUS_INFO_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_STATUS_INFO_Data& from);
  void MergeFrom(const SC_STATUS_INFO_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STATUS_INFO_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_STATUS_INFO.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusidFieldNumber = 1,
    kStatustypeFieldNumber = 2,
    kStatuslevFieldNumber = 3,
    kPowerFieldNumber = 4,
    kSecFieldNumber = 5,
    kTimesFieldNumber = 6,
    kIdcasterFieldNumber = 8,
    kLaststampFieldNumber = 7,
    kIspauseFieldNumber = 9,
  };
  // uint32 statusid = 1;
  void clear_statusid();
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid() const;
  void set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statusid() const;
  void _internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statustype = 2;
  void clear_statustype();
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype() const;
  void set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statustype() const;
  void _internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statuslev = 3;
  void clear_statuslev();
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev() const;
  void set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statuslev() const;
  void _internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 power = 4;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec = 5;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 times = 6;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 idcaster = 8;
  void clear_idcaster();
  ::PROTOBUF_NAMESPACE_ID::uint64 idcaster() const;
  void set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idcaster() const;
  void _internal_set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 laststamp = 7;
  void clear_laststamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 laststamp() const;
  void set_laststamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_laststamp() const;
  void _internal_set_laststamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ispause = 9;
  void clear_ispause();
  bool ispause() const;
  void set_ispause(bool value);
  private:
  bool _internal_ispause() const;
  void _internal_set_ispause(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SC_STATUS_INFO.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idcaster_;
  ::PROTOBUF_NAMESPACE_ID::uint32 laststamp_;
  bool ispause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_STATUS_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_STATUS_INFO) */ {
 public:
  SC_STATUS_INFO();
  virtual ~SC_STATUS_INFO();

  SC_STATUS_INFO(const SC_STATUS_INFO& from);
  SC_STATUS_INFO(SC_STATUS_INFO&& from) noexcept
    : SC_STATUS_INFO() {
    *this = ::std::move(from);
  }

  inline SC_STATUS_INFO& operator=(const SC_STATUS_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STATUS_INFO& operator=(SC_STATUS_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_STATUS_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_STATUS_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_STATUS_INFO*>(
               &_SC_STATUS_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SC_STATUS_INFO& a, SC_STATUS_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STATUS_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_STATUS_INFO* New() const final {
    return CreateMaybeMessage<SC_STATUS_INFO>(nullptr);
  }

  SC_STATUS_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_STATUS_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_STATUS_INFO& from);
  void MergeFrom(const SC_STATUS_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STATUS_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_STATUS_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_STATUS_INFO_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatuslistFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  int statuslist_size() const;
  private:
  int _internal_statuslist_size() const;
  public:
  void clear_statuslist();
  ::SC_STATUS_INFO_Data* mutable_statuslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_INFO_Data >*
      mutable_statuslist();
  private:
  const ::SC_STATUS_INFO_Data& _internal_statuslist(int index) const;
  ::SC_STATUS_INFO_Data* _internal_add_statuslist();
  public:
  const ::SC_STATUS_INFO_Data& statuslist(int index) const;
  ::SC_STATUS_INFO_Data* add_statuslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_INFO_Data >&
      statuslist() const;

  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_STATUS_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_INFO_Data > statuslist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_STATUS_ACTION :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_STATUS_ACTION) */ {
 public:
  SC_STATUS_ACTION();
  virtual ~SC_STATUS_ACTION();

  SC_STATUS_ACTION(const SC_STATUS_ACTION& from);
  SC_STATUS_ACTION(SC_STATUS_ACTION&& from) noexcept
    : SC_STATUS_ACTION() {
    *this = ::std::move(from);
  }

  inline SC_STATUS_ACTION& operator=(const SC_STATUS_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STATUS_ACTION& operator=(SC_STATUS_ACTION&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_STATUS_ACTION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_STATUS_ACTION* internal_default_instance() {
    return reinterpret_cast<const SC_STATUS_ACTION*>(
               &_SC_STATUS_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SC_STATUS_ACTION& a, SC_STATUS_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STATUS_ACTION* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_STATUS_ACTION* New() const final {
    return CreateMaybeMessage<SC_STATUS_ACTION>(nullptr);
  }

  SC_STATUS_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_STATUS_ACTION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_STATUS_ACTION& from);
  void MergeFrom(const SC_STATUS_ACTION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STATUS_ACTION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_STATUS_ACTION";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_STATUS_ACTION_ACTION ACTION;
  static constexpr ACTION STATUS_ATTACH =
    SC_STATUS_ACTION_ACTION_STATUS_ATTACH;
  static constexpr ACTION STATUS_DETACH =
    SC_STATUS_ACTION_ACTION_STATUS_DETACH;
  static constexpr ACTION STATUS_EFFECT =
    SC_STATUS_ACTION_ACTION_STATUS_EFFECT;
  static inline bool ACTION_IsValid(int value) {
    return SC_STATUS_ACTION_ACTION_IsValid(value);
  }
  static constexpr ACTION ACTION_MIN =
    SC_STATUS_ACTION_ACTION_ACTION_MIN;
  static constexpr ACTION ACTION_MAX =
    SC_STATUS_ACTION_ACTION_ACTION_MAX;
  static constexpr int ACTION_ARRAYSIZE =
    SC_STATUS_ACTION_ACTION_ACTION_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ACTION_descriptor() {
    return SC_STATUS_ACTION_ACTION_descriptor();
  }
  template<typename T>
  static inline const std::string& ACTION_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ACTION>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ACTION_Name.");
    return SC_STATUS_ACTION_ACTION_Name(enum_t_value);
  }
  static inline bool ACTION_Parse(const std::string& name,
      ACTION* value) {
    return SC_STATUS_ACTION_ACTION_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kActionFieldNumber = 2,
    kStatusidFieldNumber = 3,
    kStatustypeFieldNumber = 4,
    kStatuslevFieldNumber = 5,
  };
  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .SC_STATUS_ACTION.ACTION action = 2;
  void clear_action();
  ::SC_STATUS_ACTION_ACTION action() const;
  void set_action(::SC_STATUS_ACTION_ACTION value);
  private:
  ::SC_STATUS_ACTION_ACTION _internal_action() const;
  void _internal_set_action(::SC_STATUS_ACTION_ACTION value);
  public:

  // uint32 statusid = 3;
  void clear_statusid();
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid() const;
  void set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statusid() const;
  void _internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statustype = 4;
  void clear_statustype();
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype() const;
  void set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statustype() const;
  void _internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 statuslev = 5;
  void clear_statuslev();
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev() const;
  void set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statuslev() const;
  void _internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_STATUS_ACTION)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statustype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statuslev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_MOVE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_MOVE) */ {
 public:
  CS_MOVE();
  virtual ~CS_MOVE();

  CS_MOVE(const CS_MOVE& from);
  CS_MOVE(CS_MOVE&& from) noexcept
    : CS_MOVE() {
    *this = ::std::move(from);
  }

  inline CS_MOVE& operator=(const CS_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MOVE& operator=(CS_MOVE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_MOVE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_MOVE* internal_default_instance() {
    return reinterpret_cast<const CS_MOVE*>(
               &_CS_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CS_MOVE& a, CS_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MOVE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_MOVE* New() const final {
    return CreateMaybeMessage<CS_MOVE>(nullptr);
  }

  CS_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_MOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_MOVE& from);
  void MergeFrom(const CS_MOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_MOVE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kFaceFieldNumber = 4,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float face = 4;
  void clear_face();
  float face() const;
  void set_face(float value);
  private:
  float _internal_face() const;
  void _internal_set_face(float value);
  public:

  // @@protoc_insertion_point(class_scope:CS_MOVE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  float x_;
  float y_;
  float face_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_CHANGEMAP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_CHANGEMAP) */ {
 public:
  CS_CHANGEMAP();
  virtual ~CS_CHANGEMAP();

  CS_CHANGEMAP(const CS_CHANGEMAP& from);
  CS_CHANGEMAP(CS_CHANGEMAP&& from) noexcept
    : CS_CHANGEMAP() {
    *this = ::std::move(from);
  }

  inline CS_CHANGEMAP& operator=(const CS_CHANGEMAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHANGEMAP& operator=(CS_CHANGEMAP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_CHANGEMAP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_CHANGEMAP* internal_default_instance() {
    return reinterpret_cast<const CS_CHANGEMAP*>(
               &_CS_CHANGEMAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CS_CHANGEMAP& a, CS_CHANGEMAP& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHANGEMAP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_CHANGEMAP* New() const final {
    return CreateMaybeMessage<CS_CHANGEMAP>(nullptr);
  }

  CS_CHANGEMAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_CHANGEMAP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_CHANGEMAP& from);
  void MergeFrom(const CS_CHANGEMAP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CHANGEMAP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_CHANGEMAP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kLeavepointIdxFieldNumber = 2,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 leavepoint_idx = 2;
  void clear_leavepoint_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 leavepoint_idx() const;
  void set_leavepoint_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leavepoint_idx() const;
  void _internal_set_leavepoint_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_CHANGEMAP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leavepoint_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_CASTSKILL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_CASTSKILL) */ {
 public:
  CS_CASTSKILL();
  virtual ~CS_CASTSKILL();

  CS_CASTSKILL(const CS_CASTSKILL& from);
  CS_CASTSKILL(CS_CASTSKILL&& from) noexcept
    : CS_CASTSKILL() {
    *this = ::std::move(from);
  }

  inline CS_CASTSKILL& operator=(const CS_CASTSKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CASTSKILL& operator=(CS_CASTSKILL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_CASTSKILL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_CASTSKILL* internal_default_instance() {
    return reinterpret_cast<const CS_CASTSKILL*>(
               &_CS_CASTSKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CS_CASTSKILL& a, CS_CASTSKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CASTSKILL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_CASTSKILL* New() const final {
    return CreateMaybeMessage<CS_CASTSKILL>(nullptr);
  }

  CS_CASTSKILL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_CASTSKILL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_CASTSKILL& from);
  void MergeFrom(const CS_CASTSKILL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CASTSKILL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_CASTSKILL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kSkillIdFieldNumber = 2,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_id = 3;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 skill_id = 2;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CS_CASTSKILL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_CASTSKILL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_CASTSKILL) */ {
 public:
  SC_CASTSKILL();
  virtual ~SC_CASTSKILL();

  SC_CASTSKILL(const SC_CASTSKILL& from);
  SC_CASTSKILL(SC_CASTSKILL&& from) noexcept
    : SC_CASTSKILL() {
    *this = ::std::move(from);
  }

  inline SC_CASTSKILL& operator=(const SC_CASTSKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CASTSKILL& operator=(SC_CASTSKILL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_CASTSKILL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_CASTSKILL* internal_default_instance() {
    return reinterpret_cast<const SC_CASTSKILL*>(
               &_SC_CASTSKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SC_CASTSKILL& a, SC_CASTSKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CASTSKILL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_CASTSKILL* New() const final {
    return CreateMaybeMessage<SC_CASTSKILL>(nullptr);
  }

  SC_CASTSKILL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_CASTSKILL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_CASTSKILL& from);
  void MergeFrom(const SC_CASTSKILL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CASTSKILL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_CASTSKILL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kTargetIdFieldNumber = 4,
    kSkillIdFieldNumber = 3,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_id = 4;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 skill_id = 3;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC_CASTSKILL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SKILL_DAMAGE_DamageInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SKILL_DAMAGE.DamageInfo) */ {
 public:
  SC_SKILL_DAMAGE_DamageInfo();
  virtual ~SC_SKILL_DAMAGE_DamageInfo();

  SC_SKILL_DAMAGE_DamageInfo(const SC_SKILL_DAMAGE_DamageInfo& from);
  SC_SKILL_DAMAGE_DamageInfo(SC_SKILL_DAMAGE_DamageInfo&& from) noexcept
    : SC_SKILL_DAMAGE_DamageInfo() {
    *this = ::std::move(from);
  }

  inline SC_SKILL_DAMAGE_DamageInfo& operator=(const SC_SKILL_DAMAGE_DamageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SKILL_DAMAGE_DamageInfo& operator=(SC_SKILL_DAMAGE_DamageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SKILL_DAMAGE_DamageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SKILL_DAMAGE_DamageInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SKILL_DAMAGE_DamageInfo*>(
               &_SC_SKILL_DAMAGE_DamageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SC_SKILL_DAMAGE_DamageInfo& a, SC_SKILL_DAMAGE_DamageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SKILL_DAMAGE_DamageInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SKILL_DAMAGE_DamageInfo* New() const final {
    return CreateMaybeMessage<SC_SKILL_DAMAGE_DamageInfo>(nullptr);
  }

  SC_SKILL_DAMAGE_DamageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SKILL_DAMAGE_DamageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SKILL_DAMAGE_DamageInfo& from);
  void MergeFrom(const SC_SKILL_DAMAGE_DamageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SKILL_DAMAGE_DamageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SKILL_DAMAGE.DamageInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // uint64 target_id = 1;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SKILL_DAMAGE.DamageInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SKILL_DAMAGE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SKILL_DAMAGE) */ {
 public:
  SC_SKILL_DAMAGE();
  virtual ~SC_SKILL_DAMAGE();

  SC_SKILL_DAMAGE(const SC_SKILL_DAMAGE& from);
  SC_SKILL_DAMAGE(SC_SKILL_DAMAGE&& from) noexcept
    : SC_SKILL_DAMAGE() {
    *this = ::std::move(from);
  }

  inline SC_SKILL_DAMAGE& operator=(const SC_SKILL_DAMAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SKILL_DAMAGE& operator=(SC_SKILL_DAMAGE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SKILL_DAMAGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SKILL_DAMAGE* internal_default_instance() {
    return reinterpret_cast<const SC_SKILL_DAMAGE*>(
               &_SC_SKILL_DAMAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SC_SKILL_DAMAGE& a, SC_SKILL_DAMAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SKILL_DAMAGE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SKILL_DAMAGE* New() const final {
    return CreateMaybeMessage<SC_SKILL_DAMAGE>(nullptr);
  }

  SC_SKILL_DAMAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SKILL_DAMAGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SKILL_DAMAGE& from);
  void MergeFrom(const SC_SKILL_DAMAGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SKILL_DAMAGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SKILL_DAMAGE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_SKILL_DAMAGE_DamageInfo DamageInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kDamagelistFieldNumber = 5,
    kMapidFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSkillIdFieldNumber = 3,
  };
  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  int damagelist_size() const;
  private:
  int _internal_damagelist_size() const;
  public:
  void clear_damagelist();
  ::SC_SKILL_DAMAGE_DamageInfo* mutable_damagelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >*
      mutable_damagelist();
  private:
  const ::SC_SKILL_DAMAGE_DamageInfo& _internal_damagelist(int index) const;
  ::SC_SKILL_DAMAGE_DamageInfo* _internal_add_damagelist();
  public:
  const ::SC_SKILL_DAMAGE_DamageInfo& damagelist(int index) const;
  ::SC_SKILL_DAMAGE_DamageInfo* add_damagelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >&
      damagelist() const;

  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 skill_id = 3;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SKILL_DAMAGE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo > damagelist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_SKILL_BREAK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_SKILL_BREAK) */ {
 public:
  CS_SKILL_BREAK();
  virtual ~CS_SKILL_BREAK();

  CS_SKILL_BREAK(const CS_SKILL_BREAK& from);
  CS_SKILL_BREAK(CS_SKILL_BREAK&& from) noexcept
    : CS_SKILL_BREAK() {
    *this = ::std::move(from);
  }

  inline CS_SKILL_BREAK& operator=(const CS_SKILL_BREAK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SKILL_BREAK& operator=(CS_SKILL_BREAK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_SKILL_BREAK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_SKILL_BREAK* internal_default_instance() {
    return reinterpret_cast<const CS_SKILL_BREAK*>(
               &_CS_SKILL_BREAK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CS_SKILL_BREAK& a, CS_SKILL_BREAK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SKILL_BREAK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_SKILL_BREAK* New() const final {
    return CreateMaybeMessage<CS_SKILL_BREAK>(nullptr);
  }

  CS_SKILL_BREAK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_SKILL_BREAK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_SKILL_BREAK& from);
  void MergeFrom(const CS_SKILL_BREAK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SKILL_BREAK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_SKILL_BREAK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_SKILL_BREAK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SKILL_BREAK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SKILL_BREAK) */ {
 public:
  SC_SKILL_BREAK();
  virtual ~SC_SKILL_BREAK();

  SC_SKILL_BREAK(const SC_SKILL_BREAK& from);
  SC_SKILL_BREAK(SC_SKILL_BREAK&& from) noexcept
    : SC_SKILL_BREAK() {
    *this = ::std::move(from);
  }

  inline SC_SKILL_BREAK& operator=(const SC_SKILL_BREAK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SKILL_BREAK& operator=(SC_SKILL_BREAK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SKILL_BREAK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SKILL_BREAK* internal_default_instance() {
    return reinterpret_cast<const SC_SKILL_BREAK*>(
               &_SC_SKILL_BREAK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SC_SKILL_BREAK& a, SC_SKILL_BREAK& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SKILL_BREAK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SKILL_BREAK* New() const final {
    return CreateMaybeMessage<SC_SKILL_BREAK>(nullptr);
  }

  SC_SKILL_BREAK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SKILL_BREAK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SKILL_BREAK& from);
  void MergeFrom(const SC_SKILL_BREAK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SKILL_BREAK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SKILL_BREAK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kActorIdFieldNumber = 2,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SKILL_BREAK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_SKILL_CHGTARGETPOS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_SKILL_CHGTARGETPOS) */ {
 public:
  CS_SKILL_CHGTARGETPOS();
  virtual ~CS_SKILL_CHGTARGETPOS();

  CS_SKILL_CHGTARGETPOS(const CS_SKILL_CHGTARGETPOS& from);
  CS_SKILL_CHGTARGETPOS(CS_SKILL_CHGTARGETPOS&& from) noexcept
    : CS_SKILL_CHGTARGETPOS() {
    *this = ::std::move(from);
  }

  inline CS_SKILL_CHGTARGETPOS& operator=(const CS_SKILL_CHGTARGETPOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SKILL_CHGTARGETPOS& operator=(CS_SKILL_CHGTARGETPOS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_SKILL_CHGTARGETPOS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_SKILL_CHGTARGETPOS* internal_default_instance() {
    return reinterpret_cast<const CS_SKILL_CHGTARGETPOS*>(
               &_CS_SKILL_CHGTARGETPOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CS_SKILL_CHGTARGETPOS& a, CS_SKILL_CHGTARGETPOS& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SKILL_CHGTARGETPOS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_SKILL_CHGTARGETPOS* New() const final {
    return CreateMaybeMessage<CS_SKILL_CHGTARGETPOS>(nullptr);
  }

  CS_SKILL_CHGTARGETPOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_SKILL_CHGTARGETPOS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_SKILL_CHGTARGETPOS& from);
  void MergeFrom(const CS_SKILL_CHGTARGETPOS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SKILL_CHGTARGETPOS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_SKILL_CHGTARGETPOS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CS_SKILL_CHGTARGETPOS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SKILL_STUN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SKILL_STUN) */ {
 public:
  SC_SKILL_STUN();
  virtual ~SC_SKILL_STUN();

  SC_SKILL_STUN(const SC_SKILL_STUN& from);
  SC_SKILL_STUN(SC_SKILL_STUN&& from) noexcept
    : SC_SKILL_STUN() {
    *this = ::std::move(from);
  }

  inline SC_SKILL_STUN& operator=(const SC_SKILL_STUN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SKILL_STUN& operator=(SC_SKILL_STUN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SKILL_STUN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SKILL_STUN* internal_default_instance() {
    return reinterpret_cast<const SC_SKILL_STUN*>(
               &_SC_SKILL_STUN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SC_SKILL_STUN& a, SC_SKILL_STUN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SKILL_STUN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SKILL_STUN* New() const final {
    return CreateMaybeMessage<SC_SKILL_STUN>(nullptr);
  }

  SC_SKILL_STUN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SKILL_STUN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SKILL_STUN& from);
  void MergeFrom(const SC_SKILL_STUN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SKILL_STUN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SKILL_STUN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSkillIdFieldNumber = 3,
    kStunMsFieldNumber = 4,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 skill_id = 3;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stun_ms = 4;
  void clear_stun_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 stun_ms() const;
  void set_stun_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stun_ms() const;
  void _internal_set_stun_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SKILL_STUN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stun_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SKILL_EFFACT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SKILL_EFFACT) */ {
 public:
  SC_SKILL_EFFACT();
  virtual ~SC_SKILL_EFFACT();

  SC_SKILL_EFFACT(const SC_SKILL_EFFACT& from);
  SC_SKILL_EFFACT(SC_SKILL_EFFACT&& from) noexcept
    : SC_SKILL_EFFACT() {
    *this = ::std::move(from);
  }

  inline SC_SKILL_EFFACT& operator=(const SC_SKILL_EFFACT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SKILL_EFFACT& operator=(SC_SKILL_EFFACT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SKILL_EFFACT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SKILL_EFFACT* internal_default_instance() {
    return reinterpret_cast<const SC_SKILL_EFFACT*>(
               &_SC_SKILL_EFFACT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SC_SKILL_EFFACT& a, SC_SKILL_EFFACT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SKILL_EFFACT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SKILL_EFFACT* New() const final {
    return CreateMaybeMessage<SC_SKILL_EFFACT>(nullptr);
  }

  SC_SKILL_EFFACT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SKILL_EFFACT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SKILL_EFFACT& from);
  void MergeFrom(const SC_SKILL_EFFACT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SKILL_EFFACT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SKILL_EFFACT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSkillIdFieldNumber = 3,
  };
  // uint64 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 skill_id = 3;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SKILL_EFFACT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DAMAGE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DAMAGE) */ {
 public:
  SC_DAMAGE();
  virtual ~SC_DAMAGE();

  SC_DAMAGE(const SC_DAMAGE& from);
  SC_DAMAGE(SC_DAMAGE&& from) noexcept
    : SC_DAMAGE() {
    *this = ::std::move(from);
  }

  inline SC_DAMAGE& operator=(const SC_DAMAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DAMAGE& operator=(SC_DAMAGE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DAMAGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DAMAGE* internal_default_instance() {
    return reinterpret_cast<const SC_DAMAGE*>(
               &_SC_DAMAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SC_DAMAGE& a, SC_DAMAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DAMAGE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DAMAGE* New() const final {
    return CreateMaybeMessage<SC_DAMAGE>(nullptr);
  }

  SC_DAMAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DAMAGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DAMAGE& from);
  void MergeFrom(const SC_DAMAGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DAMAGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DAMAGE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kAttackerIdFieldNumber = 2,
    kDamageFieldNumber = 3,
    kHittypeFieldNumber = 4,
    kCrticalFieldNumber = 5,
  };
  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 attacker_id = 2;
  void clear_attacker_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker_id() const;
  void set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attacker_id() const;
  void _internal_set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 damage = 3;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hittype = 4;
  void clear_hittype();
  ::PROTOBUF_NAMESPACE_ID::uint32 hittype() const;
  void set_hittype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hittype() const;
  void _internal_set_hittype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool crtical = 5;
  void clear_crtical();
  bool crtical() const;
  void set_crtical(bool value);
  private:
  bool _internal_crtical() const;
  void _internal_set_crtical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SC_DAMAGE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hittype_;
  bool crtical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DEAD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DEAD) */ {
 public:
  SC_DEAD();
  virtual ~SC_DEAD();

  SC_DEAD(const SC_DEAD& from);
  SC_DEAD(SC_DEAD&& from) noexcept
    : SC_DEAD() {
    *this = ::std::move(from);
  }

  inline SC_DEAD& operator=(const SC_DEAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DEAD& operator=(SC_DEAD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DEAD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DEAD* internal_default_instance() {
    return reinterpret_cast<const SC_DEAD*>(
               &_SC_DEAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SC_DEAD& a, SC_DEAD& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DEAD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DEAD* New() const final {
    return CreateMaybeMessage<SC_DEAD>(nullptr);
  }

  SC_DEAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DEAD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DEAD& from);
  void MergeFrom(const SC_DEAD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DEAD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DEAD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kAttackerIdFieldNumber = 2,
  };
  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 attacker_id = 2;
  void clear_attacker_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker_id() const;
  void set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attacker_id() const;
  void _internal_set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_DEAD)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_CHANGE_PKMODE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_CHANGE_PKMODE) */ {
 public:
  CS_CHANGE_PKMODE();
  virtual ~CS_CHANGE_PKMODE();

  CS_CHANGE_PKMODE(const CS_CHANGE_PKMODE& from);
  CS_CHANGE_PKMODE(CS_CHANGE_PKMODE&& from) noexcept
    : CS_CHANGE_PKMODE() {
    *this = ::std::move(from);
  }

  inline CS_CHANGE_PKMODE& operator=(const CS_CHANGE_PKMODE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHANGE_PKMODE& operator=(CS_CHANGE_PKMODE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_CHANGE_PKMODE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_CHANGE_PKMODE* internal_default_instance() {
    return reinterpret_cast<const CS_CHANGE_PKMODE*>(
               &_CS_CHANGE_PKMODE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CS_CHANGE_PKMODE& a, CS_CHANGE_PKMODE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHANGE_PKMODE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_CHANGE_PKMODE* New() const final {
    return CreateMaybeMessage<CS_CHANGE_PKMODE>(nullptr);
  }

  CS_CHANGE_PKMODE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_CHANGE_PKMODE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_CHANGE_PKMODE& from);
  void MergeFrom(const CS_CHANGE_PKMODE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CHANGE_PKMODE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_CHANGE_PKMODE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkmodeFieldNumber = 1,
  };
  // uint32 pkmode = 1;
  void clear_pkmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 pkmode() const;
  void set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pkmode() const;
  void _internal_set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_CHANGE_PKMODE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pkmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_CHANGE_PKMODE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_CHANGE_PKMODE) */ {
 public:
  SC_CHANGE_PKMODE();
  virtual ~SC_CHANGE_PKMODE();

  SC_CHANGE_PKMODE(const SC_CHANGE_PKMODE& from);
  SC_CHANGE_PKMODE(SC_CHANGE_PKMODE&& from) noexcept
    : SC_CHANGE_PKMODE() {
    *this = ::std::move(from);
  }

  inline SC_CHANGE_PKMODE& operator=(const SC_CHANGE_PKMODE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHANGE_PKMODE& operator=(SC_CHANGE_PKMODE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_CHANGE_PKMODE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_CHANGE_PKMODE* internal_default_instance() {
    return reinterpret_cast<const SC_CHANGE_PKMODE*>(
               &_SC_CHANGE_PKMODE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SC_CHANGE_PKMODE& a, SC_CHANGE_PKMODE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHANGE_PKMODE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_CHANGE_PKMODE* New() const final {
    return CreateMaybeMessage<SC_CHANGE_PKMODE>(nullptr);
  }

  SC_CHANGE_PKMODE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_CHANGE_PKMODE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_CHANGE_PKMODE& from);
  void MergeFrom(const SC_CHANGE_PKMODE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHANGE_PKMODE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_CHANGE_PKMODE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkmodeFieldNumber = 1,
  };
  // uint32 pkmode = 1;
  void clear_pkmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 pkmode() const;
  void set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pkmode() const;
  void _internal_set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_CHANGE_PKMODE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pkmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_REBORN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_REBORN) */ {
 public:
  CS_REBORN();
  virtual ~CS_REBORN();

  CS_REBORN(const CS_REBORN& from);
  CS_REBORN(CS_REBORN&& from) noexcept
    : CS_REBORN() {
    *this = ::std::move(from);
  }

  inline CS_REBORN& operator=(const CS_REBORN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REBORN& operator=(CS_REBORN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_REBORN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_REBORN* internal_default_instance() {
    return reinterpret_cast<const CS_REBORN*>(
               &_CS_REBORN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CS_REBORN& a, CS_REBORN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REBORN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_REBORN* New() const final {
    return CreateMaybeMessage<CS_REBORN>(nullptr);
  }

  CS_REBORN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_REBORN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_REBORN& from);
  void MergeFrom(const CS_REBORN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REBORN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_REBORN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebornTypeFieldNumber = 1,
  };
  // uint32 reborn_type = 1;
  void clear_reborn_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 reborn_type() const;
  void set_reborn_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reborn_type() const;
  void _internal_set_reborn_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_REBORN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reborn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ITEM_INFO) */ {
 public:
  SC_ITEM_INFO();
  virtual ~SC_ITEM_INFO();

  SC_ITEM_INFO(const SC_ITEM_INFO& from);
  SC_ITEM_INFO(SC_ITEM_INFO&& from) noexcept
    : SC_ITEM_INFO() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_INFO& operator=(const SC_ITEM_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_INFO& operator=(SC_ITEM_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ITEM_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ITEM_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_INFO*>(
               &_SC_ITEM_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SC_ITEM_INFO& a, SC_ITEM_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ITEM_INFO* New() const final {
    return CreateMaybeMessage<SC_ITEM_INFO>(nullptr);
  }

  SC_ITEM_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ITEM_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ITEM_INFO& from);
  void MergeFrom(const SC_ITEM_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ITEM_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kPositionFieldNumber = 3,
    kGridFieldNumber = 4,
    kPileNumFieldNumber = 5,
    kDuraFieldNumber = 6,
    kDuraLimitFieldNumber = 7,
    kExpireTimeFieldNumber = 8,
    kAdditionLevFieldNumber = 9,
    kFlagFieldNumber = 10,
  };
  // uint64 actor_id = 1;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 position = 3;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid = 4;
  void clear_grid();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid() const;
  void set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid() const;
  void _internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pile_num = 5;
  void clear_pile_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 pile_num() const;
  void set_pile_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pile_num() const;
  void _internal_set_pile_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dura = 6;
  void clear_dura();
  ::PROTOBUF_NAMESPACE_ID::uint32 dura() const;
  void set_dura(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dura() const;
  void _internal_set_dura(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dura_limit = 7;
  void clear_dura_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 dura_limit() const;
  void set_dura_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dura_limit() const;
  void _internal_set_dura_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expire_time = 8;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 addition_lev = 9;
  void clear_addition_lev();
  ::PROTOBUF_NAMESPACE_ID::uint32 addition_lev() const;
  void set_addition_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_addition_lev() const;
  void _internal_set_addition_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flag = 10;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ITEM_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pile_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dura_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dura_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expire_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addition_lev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_CHANGE_ChangeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ITEM_CHANGE.ChangeData) */ {
 public:
  SC_ITEM_CHANGE_ChangeData();
  virtual ~SC_ITEM_CHANGE_ChangeData();

  SC_ITEM_CHANGE_ChangeData(const SC_ITEM_CHANGE_ChangeData& from);
  SC_ITEM_CHANGE_ChangeData(SC_ITEM_CHANGE_ChangeData&& from) noexcept
    : SC_ITEM_CHANGE_ChangeData() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_CHANGE_ChangeData& operator=(const SC_ITEM_CHANGE_ChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_CHANGE_ChangeData& operator=(SC_ITEM_CHANGE_ChangeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ITEM_CHANGE_ChangeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ITEM_CHANGE_ChangeData* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_CHANGE_ChangeData*>(
               &_SC_ITEM_CHANGE_ChangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SC_ITEM_CHANGE_ChangeData& a, SC_ITEM_CHANGE_ChangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_CHANGE_ChangeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ITEM_CHANGE_ChangeData* New() const final {
    return CreateMaybeMessage<SC_ITEM_CHANGE_ChangeData>(nullptr);
  }

  SC_ITEM_CHANGE_ChangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ITEM_CHANGE_ChangeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ITEM_CHANGE_ChangeData& from);
  void MergeFrom(const SC_ITEM_CHANGE_ChangeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_CHANGE_ChangeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ITEM_CHANGE.ChangeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .SC_ITEM_CHANGE.ChangeType change_type = 1;
  void clear_change_type();
  ::SC_ITEM_CHANGE_ChangeType change_type() const;
  void set_change_type(::SC_ITEM_CHANGE_ChangeType value);
  private:
  ::SC_ITEM_CHANGE_ChangeType _internal_change_type() const;
  void _internal_set_change_type(::SC_ITEM_CHANGE_ChangeType value);
  public:

  // uint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ITEM_CHANGE.ChangeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int change_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_CHANGE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ITEM_CHANGE) */ {
 public:
  SC_ITEM_CHANGE();
  virtual ~SC_ITEM_CHANGE();

  SC_ITEM_CHANGE(const SC_ITEM_CHANGE& from);
  SC_ITEM_CHANGE(SC_ITEM_CHANGE&& from) noexcept
    : SC_ITEM_CHANGE() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_CHANGE& operator=(const SC_ITEM_CHANGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_CHANGE& operator=(SC_ITEM_CHANGE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ITEM_CHANGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ITEM_CHANGE* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_CHANGE*>(
               &_SC_ITEM_CHANGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SC_ITEM_CHANGE& a, SC_ITEM_CHANGE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_CHANGE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ITEM_CHANGE* New() const final {
    return CreateMaybeMessage<SC_ITEM_CHANGE>(nullptr);
  }

  SC_ITEM_CHANGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ITEM_CHANGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ITEM_CHANGE& from);
  void MergeFrom(const SC_ITEM_CHANGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_CHANGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ITEM_CHANGE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_ITEM_CHANGE_ChangeData ChangeData;

  typedef SC_ITEM_CHANGE_ChangeType ChangeType;
  static constexpr ChangeType ChangeGrid =
    SC_ITEM_CHANGE_ChangeType_ChangeGrid;
  static constexpr ChangeType ChangePileNum =
    SC_ITEM_CHANGE_ChangeType_ChangePileNum;
  static constexpr ChangeType ChangeExpireData =
    SC_ITEM_CHANGE_ChangeType_ChangeExpireData;
  static constexpr ChangeType ChangeDura =
    SC_ITEM_CHANGE_ChangeType_ChangeDura;
  static constexpr ChangeType ChangeDuraLimit =
    SC_ITEM_CHANGE_ChangeType_ChangeDuraLimit;
  static inline bool ChangeType_IsValid(int value) {
    return SC_ITEM_CHANGE_ChangeType_IsValid(value);
  }
  static constexpr ChangeType ChangeType_MIN =
    SC_ITEM_CHANGE_ChangeType_ChangeType_MIN;
  static constexpr ChangeType ChangeType_MAX =
    SC_ITEM_CHANGE_ChangeType_ChangeType_MAX;
  static constexpr int ChangeType_ARRAYSIZE =
    SC_ITEM_CHANGE_ChangeType_ChangeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChangeType_descriptor() {
    return SC_ITEM_CHANGE_ChangeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChangeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangeType_Name.");
    return SC_ITEM_CHANGE_ChangeType_Name(enum_t_value);
  }
  static inline bool ChangeType_Parse(const std::string& name,
      ChangeType* value) {
    return SC_ITEM_CHANGE_ChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChangeListFieldNumber = 3,
    kItemIdFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  int change_list_size() const;
  private:
  int _internal_change_list_size() const;
  public:
  void clear_change_list();
  ::SC_ITEM_CHANGE_ChangeData* mutable_change_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >*
      mutable_change_list();
  private:
  const ::SC_ITEM_CHANGE_ChangeData& _internal_change_list(int index) const;
  ::SC_ITEM_CHANGE_ChangeData* _internal_add_change_list();
  public:
  const ::SC_ITEM_CHANGE_ChangeData& change_list(int index) const;
  ::SC_ITEM_CHANGE_ChangeData* add_change_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >&
      change_list() const;

  // uint64 item_id = 1;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ITEM_CHANGE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData > change_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_DELETE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ITEM_DELETE) */ {
 public:
  SC_ITEM_DELETE();
  virtual ~SC_ITEM_DELETE();

  SC_ITEM_DELETE(const SC_ITEM_DELETE& from);
  SC_ITEM_DELETE(SC_ITEM_DELETE&& from) noexcept
    : SC_ITEM_DELETE() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_DELETE& operator=(const SC_ITEM_DELETE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_DELETE& operator=(SC_ITEM_DELETE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ITEM_DELETE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ITEM_DELETE* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_DELETE*>(
               &_SC_ITEM_DELETE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SC_ITEM_DELETE& a, SC_ITEM_DELETE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_DELETE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ITEM_DELETE* New() const final {
    return CreateMaybeMessage<SC_ITEM_DELETE>(nullptr);
  }

  SC_ITEM_DELETE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ITEM_DELETE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ITEM_DELETE& from);
  void MergeFrom(const SC_ITEM_DELETE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_DELETE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ITEM_DELETE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kGridFieldNumber = 3,
  };
  // uint64 item_id = 1;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid = 3;
  void clear_grid();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid() const;
  void set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid() const;
  void _internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ITEM_DELETE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_SWAP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_SWAP) */ {
 public:
  CS_ITEM_SWAP();
  virtual ~CS_ITEM_SWAP();

  CS_ITEM_SWAP(const CS_ITEM_SWAP& from);
  CS_ITEM_SWAP(CS_ITEM_SWAP&& from) noexcept
    : CS_ITEM_SWAP() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_SWAP& operator=(const CS_ITEM_SWAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_SWAP& operator=(CS_ITEM_SWAP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_SWAP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_SWAP* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_SWAP*>(
               &_CS_ITEM_SWAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CS_ITEM_SWAP& a, CS_ITEM_SWAP& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_SWAP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_SWAP* New() const final {
    return CreateMaybeMessage<CS_ITEM_SWAP>(nullptr);
  }

  CS_ITEM_SWAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_SWAP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_SWAP& from);
  void MergeFrom(const CS_ITEM_SWAP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_SWAP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_SWAP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGrid1FieldNumber = 2,
    kGrid2FieldNumber = 3,
  };
  // uint32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid1 = 2;
  void clear_grid1();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1() const;
  void set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid1() const;
  void _internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid2 = 3;
  void clear_grid2();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2() const;
  void set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid2() const;
  void _internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_SWAP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_SPLIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_SPLIT) */ {
 public:
  CS_ITEM_SPLIT();
  virtual ~CS_ITEM_SPLIT();

  CS_ITEM_SPLIT(const CS_ITEM_SPLIT& from);
  CS_ITEM_SPLIT(CS_ITEM_SPLIT&& from) noexcept
    : CS_ITEM_SPLIT() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_SPLIT& operator=(const CS_ITEM_SPLIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_SPLIT& operator=(CS_ITEM_SPLIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_SPLIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_SPLIT* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_SPLIT*>(
               &_CS_ITEM_SPLIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CS_ITEM_SPLIT& a, CS_ITEM_SPLIT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_SPLIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_SPLIT* New() const final {
    return CreateMaybeMessage<CS_ITEM_SPLIT>(nullptr);
  }

  CS_ITEM_SPLIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_SPLIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_SPLIT& from);
  void MergeFrom(const CS_ITEM_SPLIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_SPLIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_SPLIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGrid1FieldNumber = 2,
    kGrid2FieldNumber = 3,
    kSplitNumFieldNumber = 4,
  };
  // uint32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid1 = 2;
  void clear_grid1();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1() const;
  void set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid1() const;
  void _internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid2 = 3;
  void clear_grid2();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2() const;
  void set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid2() const;
  void _internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 split_num = 4;
  void clear_split_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 split_num() const;
  void set_split_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_split_num() const;
  void _internal_set_split_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_SPLIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 split_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_COMBINE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_COMBINE) */ {
 public:
  CS_ITEM_COMBINE();
  virtual ~CS_ITEM_COMBINE();

  CS_ITEM_COMBINE(const CS_ITEM_COMBINE& from);
  CS_ITEM_COMBINE(CS_ITEM_COMBINE&& from) noexcept
    : CS_ITEM_COMBINE() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_COMBINE& operator=(const CS_ITEM_COMBINE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_COMBINE& operator=(CS_ITEM_COMBINE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_COMBINE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_COMBINE* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_COMBINE*>(
               &_CS_ITEM_COMBINE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CS_ITEM_COMBINE& a, CS_ITEM_COMBINE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_COMBINE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_COMBINE* New() const final {
    return CreateMaybeMessage<CS_ITEM_COMBINE>(nullptr);
  }

  CS_ITEM_COMBINE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_COMBINE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_COMBINE& from);
  void MergeFrom(const CS_ITEM_COMBINE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_COMBINE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_COMBINE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGrid1FieldNumber = 2,
    kGrid2FieldNumber = 3,
  };
  // uint32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid1 = 2;
  void clear_grid1();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1() const;
  void set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid1() const;
  void _internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid2 = 3;
  void clear_grid2();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2() const;
  void set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid2() const;
  void _internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_COMBINE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_TIDY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_TIDY) */ {
 public:
  CS_ITEM_TIDY();
  virtual ~CS_ITEM_TIDY();

  CS_ITEM_TIDY(const CS_ITEM_TIDY& from);
  CS_ITEM_TIDY(CS_ITEM_TIDY&& from) noexcept
    : CS_ITEM_TIDY() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_TIDY& operator=(const CS_ITEM_TIDY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_TIDY& operator=(CS_ITEM_TIDY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_TIDY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_TIDY* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_TIDY*>(
               &_CS_ITEM_TIDY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CS_ITEM_TIDY& a, CS_ITEM_TIDY& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_TIDY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_TIDY* New() const final {
    return CreateMaybeMessage<CS_ITEM_TIDY>(nullptr);
  }

  CS_ITEM_TIDY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_TIDY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_TIDY& from);
  void MergeFrom(const CS_ITEM_TIDY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_TIDY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_TIDY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // uint32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_TIDY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_USE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_USE) */ {
 public:
  CS_ITEM_USE();
  virtual ~CS_ITEM_USE();

  CS_ITEM_USE(const CS_ITEM_USE& from);
  CS_ITEM_USE(CS_ITEM_USE&& from) noexcept
    : CS_ITEM_USE() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_USE& operator=(const CS_ITEM_USE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_USE& operator=(CS_ITEM_USE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_USE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_USE* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_USE*>(
               &_CS_ITEM_USE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CS_ITEM_USE& a, CS_ITEM_USE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_USE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_USE* New() const final {
    return CreateMaybeMessage<CS_ITEM_USE>(nullptr);
  }

  CS_ITEM_USE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_USE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_USE& from);
  void MergeFrom(const CS_ITEM_USE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_USE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_USE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 grid = 1;
  void clear_grid();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid() const;
  void set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid() const;
  void _internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_USE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_STORAGE_OPEN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_STORAGE_OPEN) */ {
 public:
  CS_ITEM_STORAGE_OPEN();
  virtual ~CS_ITEM_STORAGE_OPEN();

  CS_ITEM_STORAGE_OPEN(const CS_ITEM_STORAGE_OPEN& from);
  CS_ITEM_STORAGE_OPEN(CS_ITEM_STORAGE_OPEN&& from) noexcept
    : CS_ITEM_STORAGE_OPEN() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_STORAGE_OPEN& operator=(const CS_ITEM_STORAGE_OPEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_STORAGE_OPEN& operator=(CS_ITEM_STORAGE_OPEN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_STORAGE_OPEN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_STORAGE_OPEN* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_STORAGE_OPEN*>(
               &_CS_ITEM_STORAGE_OPEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CS_ITEM_STORAGE_OPEN& a, CS_ITEM_STORAGE_OPEN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_STORAGE_OPEN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_STORAGE_OPEN* New() const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_OPEN>(nullptr);
  }

  CS_ITEM_STORAGE_OPEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_OPEN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_STORAGE_OPEN& from);
  void MergeFrom(const CS_ITEM_STORAGE_OPEN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_STORAGE_OPEN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_STORAGE_OPEN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_ITEM_STORAGE_OPEN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_STORAGE_CHECKOUT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_STORAGE_CHECKOUT) */ {
 public:
  CS_ITEM_STORAGE_CHECKOUT();
  virtual ~CS_ITEM_STORAGE_CHECKOUT();

  CS_ITEM_STORAGE_CHECKOUT(const CS_ITEM_STORAGE_CHECKOUT& from);
  CS_ITEM_STORAGE_CHECKOUT(CS_ITEM_STORAGE_CHECKOUT&& from) noexcept
    : CS_ITEM_STORAGE_CHECKOUT() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_STORAGE_CHECKOUT& operator=(const CS_ITEM_STORAGE_CHECKOUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_STORAGE_CHECKOUT& operator=(CS_ITEM_STORAGE_CHECKOUT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_STORAGE_CHECKOUT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_STORAGE_CHECKOUT* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_STORAGE_CHECKOUT*>(
               &_CS_ITEM_STORAGE_CHECKOUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CS_ITEM_STORAGE_CHECKOUT& a, CS_ITEM_STORAGE_CHECKOUT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_STORAGE_CHECKOUT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_STORAGE_CHECKOUT* New() const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_CHECKOUT>(nullptr);
  }

  CS_ITEM_STORAGE_CHECKOUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_CHECKOUT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_STORAGE_CHECKOUT& from);
  void MergeFrom(const CS_ITEM_STORAGE_CHECKOUT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_STORAGE_CHECKOUT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_STORAGE_CHECKOUT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridInStorageFieldNumber = 1,
  };
  // uint32 grid_in_storage = 1;
  void clear_grid_in_storage();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_storage() const;
  void set_grid_in_storage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_in_storage() const;
  void _internal_set_grid_in_storage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_STORAGE_CHECKOUT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_STORAGE_CHECKIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ITEM_STORAGE_CHECKIN) */ {
 public:
  CS_ITEM_STORAGE_CHECKIN();
  virtual ~CS_ITEM_STORAGE_CHECKIN();

  CS_ITEM_STORAGE_CHECKIN(const CS_ITEM_STORAGE_CHECKIN& from);
  CS_ITEM_STORAGE_CHECKIN(CS_ITEM_STORAGE_CHECKIN&& from) noexcept
    : CS_ITEM_STORAGE_CHECKIN() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_STORAGE_CHECKIN& operator=(const CS_ITEM_STORAGE_CHECKIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_STORAGE_CHECKIN& operator=(CS_ITEM_STORAGE_CHECKIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ITEM_STORAGE_CHECKIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ITEM_STORAGE_CHECKIN* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_STORAGE_CHECKIN*>(
               &_CS_ITEM_STORAGE_CHECKIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CS_ITEM_STORAGE_CHECKIN& a, CS_ITEM_STORAGE_CHECKIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_STORAGE_CHECKIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ITEM_STORAGE_CHECKIN* New() const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_CHECKIN>(nullptr);
  }

  CS_ITEM_STORAGE_CHECKIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ITEM_STORAGE_CHECKIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ITEM_STORAGE_CHECKIN& from);
  void MergeFrom(const CS_ITEM_STORAGE_CHECKIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_STORAGE_CHECKIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ITEM_STORAGE_CHECKIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridInPackageFieldNumber = 1,
  };
  // uint32 grid_in_package = 1;
  void clear_grid_in_package();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_package() const;
  void set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_in_package() const;
  void _internal_set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ITEM_STORAGE_CHECKIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_EQUIP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_EQUIP) */ {
 public:
  CS_EQUIP();
  virtual ~CS_EQUIP();

  CS_EQUIP(const CS_EQUIP& from);
  CS_EQUIP(CS_EQUIP&& from) noexcept
    : CS_EQUIP() {
    *this = ::std::move(from);
  }

  inline CS_EQUIP& operator=(const CS_EQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_EQUIP& operator=(CS_EQUIP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_EQUIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_EQUIP* internal_default_instance() {
    return reinterpret_cast<const CS_EQUIP*>(
               &_CS_EQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CS_EQUIP& a, CS_EQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_EQUIP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_EQUIP* New() const final {
    return CreateMaybeMessage<CS_EQUIP>(nullptr);
  }

  CS_EQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_EQUIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_EQUIP& from);
  void MergeFrom(const CS_EQUIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_EQUIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_EQUIP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridInPackageFieldNumber = 1,
    kGridInEquipFieldNumber = 2,
  };
  // uint32 grid_in_package = 1;
  void clear_grid_in_package();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_package() const;
  void set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_in_package() const;
  void _internal_set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grid_in_equip = 2;
  void clear_grid_in_equip();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_equip() const;
  void set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_in_equip() const;
  void _internal_set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_EQUIP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_package_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_equip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_UNEQUIP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_UNEQUIP) */ {
 public:
  CS_UNEQUIP();
  virtual ~CS_UNEQUIP();

  CS_UNEQUIP(const CS_UNEQUIP& from);
  CS_UNEQUIP(CS_UNEQUIP&& from) noexcept
    : CS_UNEQUIP() {
    *this = ::std::move(from);
  }

  inline CS_UNEQUIP& operator=(const CS_UNEQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_UNEQUIP& operator=(CS_UNEQUIP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_UNEQUIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_UNEQUIP* internal_default_instance() {
    return reinterpret_cast<const CS_UNEQUIP*>(
               &_CS_UNEQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CS_UNEQUIP& a, CS_UNEQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_UNEQUIP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_UNEQUIP* New() const final {
    return CreateMaybeMessage<CS_UNEQUIP>(nullptr);
  }

  CS_UNEQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_UNEQUIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_UNEQUIP& from);
  void MergeFrom(const CS_UNEQUIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_UNEQUIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_UNEQUIP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridInEquipFieldNumber = 1,
  };
  // uint32 grid_in_equip = 1;
  void clear_grid_in_equip();
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_equip() const;
  void set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_in_equip() const;
  void _internal_set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_UNEQUIP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_in_equip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TALK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TALK) */ {
 public:
  CS_TALK();
  virtual ~CS_TALK();

  CS_TALK(const CS_TALK& from);
  CS_TALK(CS_TALK&& from) noexcept
    : CS_TALK() {
    *this = ::std::move(from);
  }

  inline CS_TALK& operator=(const CS_TALK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TALK& operator=(CS_TALK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TALK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TALK* internal_default_instance() {
    return reinterpret_cast<const CS_TALK*>(
               &_CS_TALK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CS_TALK& a, CS_TALK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TALK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TALK* New() const final {
    return CreateMaybeMessage<CS_TALK>(nullptr);
  }

  CS_TALK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TALK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TALK& from);
  void MergeFrom(const CS_TALK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TALK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TALK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 2,
    kReciverIdFieldNumber = 3,
    kChannelFieldNumber = 1,
  };
  // string words = 2;
  void clear_words();
  const std::string& words() const;
  void set_words(const std::string& value);
  void set_words(std::string&& value);
  void set_words(const char* value);
  void set_words(const char* value, size_t size);
  std::string* mutable_words();
  std::string* release_words();
  void set_allocated_words(std::string* words);
  private:
  const std::string& _internal_words() const;
  void _internal_set_words(const std::string& value);
  std::string* _internal_mutable_words();
  public:

  // uint64 reciver_id = 3;
  void clear_reciver_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 reciver_id() const;
  void set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reciver_id() const;
  void _internal_set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TalkChannel channel = 1;
  void clear_channel();
  ::TalkChannel channel() const;
  void set_channel(::TalkChannel value);
  private:
  ::TalkChannel _internal_channel() const;
  void _internal_set_channel(::TalkChannel value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TALK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr words_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reciver_id_;
  int channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TALK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TALK) */ {
 public:
  SC_TALK();
  virtual ~SC_TALK();

  SC_TALK(const SC_TALK& from);
  SC_TALK(SC_TALK&& from) noexcept
    : SC_TALK() {
    *this = ::std::move(from);
  }

  inline SC_TALK& operator=(const SC_TALK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TALK& operator=(SC_TALK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TALK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TALK* internal_default_instance() {
    return reinterpret_cast<const SC_TALK*>(
               &_SC_TALK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SC_TALK& a, SC_TALK& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TALK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TALK* New() const final {
    return CreateMaybeMessage<SC_TALK>(nullptr);
  }

  SC_TALK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TALK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TALK& from);
  void MergeFrom(const SC_TALK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TALK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TALK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 20,
    kWordsFieldNumber = 2,
    kSenderNameFieldNumber = 5,
    kChannelFieldNumber = 1,
    kSenderSignFieldNumber = 6,
    kSenderIdFieldNumber = 4,
    kSenderViplevFieldNumber = 7,
    kSendTimeFieldNumber = 8,
    kReciverIdFieldNumber = 9,
  };
  // repeated .SC_ITEM_INFO item_list = 20;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::SC_ITEM_INFO* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_INFO >*
      mutable_item_list();
  private:
  const ::SC_ITEM_INFO& _internal_item_list(int index) const;
  ::SC_ITEM_INFO* _internal_add_item_list();
  public:
  const ::SC_ITEM_INFO& item_list(int index) const;
  ::SC_ITEM_INFO* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_INFO >&
      item_list() const;

  // string words = 2;
  void clear_words();
  const std::string& words() const;
  void set_words(const std::string& value);
  void set_words(std::string&& value);
  void set_words(const char* value);
  void set_words(const char* value, size_t size);
  std::string* mutable_words();
  std::string* release_words();
  void set_allocated_words(std::string* words);
  private:
  const std::string& _internal_words() const;
  void _internal_set_words(const std::string& value);
  std::string* _internal_mutable_words();
  public:

  // string sender_name = 5;
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // .TalkChannel channel = 1;
  void clear_channel();
  ::TalkChannel channel() const;
  void set_channel(::TalkChannel value);
  private:
  ::TalkChannel _internal_channel() const;
  void _internal_set_channel(::TalkChannel value);
  public:

  // uint32 sender_sign = 6;
  void clear_sender_sign();
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_sign() const;
  void set_sender_sign(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sender_sign() const;
  void _internal_set_sender_sign(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 sender_id = 4;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sender_viplev = 7;
  void clear_sender_viplev();
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_viplev() const;
  void set_sender_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sender_viplev() const;
  void _internal_set_sender_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 send_time = 8;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 reciver_id = 9;
  void clear_reciver_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 reciver_id() const;
  void set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reciver_id() const;
  void _internal_set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TALK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_INFO > item_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr words_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  int channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_sign_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_viplev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reciver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TASK_INFO_Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TASK_INFO.Info) */ {
 public:
  SC_TASK_INFO_Info();
  virtual ~SC_TASK_INFO_Info();

  SC_TASK_INFO_Info(const SC_TASK_INFO_Info& from);
  SC_TASK_INFO_Info(SC_TASK_INFO_Info&& from) noexcept
    : SC_TASK_INFO_Info() {
    *this = ::std::move(from);
  }

  inline SC_TASK_INFO_Info& operator=(const SC_TASK_INFO_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TASK_INFO_Info& operator=(SC_TASK_INFO_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TASK_INFO_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TASK_INFO_Info* internal_default_instance() {
    return reinterpret_cast<const SC_TASK_INFO_Info*>(
               &_SC_TASK_INFO_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SC_TASK_INFO_Info& a, SC_TASK_INFO_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TASK_INFO_Info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TASK_INFO_Info* New() const final {
    return CreateMaybeMessage<SC_TASK_INFO_Info>(nullptr);
  }

  SC_TASK_INFO_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TASK_INFO_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TASK_INFO_Info& from);
  void MergeFrom(const SC_TASK_INFO_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TASK_INFO_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TASK_INFO.Info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kAcceptTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
    kExpireTimeFieldNumber = 4,
    kDaycountFieldNumber = 5,
    kDaycountMaxFieldNumber = 6,
    kStateFieldNumber = 7,
    kNum1FieldNumber = 10,
    kNum2FieldNumber = 11,
    kNum3FieldNumber = 12,
    kNum4FieldNumber = 13,
  };
  // uint64 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 accept_time = 2;
  void clear_accept_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 accept_time() const;
  void set_accept_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accept_time() const;
  void _internal_set_accept_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 finish_time = 3;
  void clear_finish_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_time() const;
  void set_finish_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finish_time() const;
  void _internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expire_time = 4;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 daycount = 5;
  void clear_daycount();
  ::PROTOBUF_NAMESPACE_ID::uint32 daycount() const;
  void set_daycount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daycount() const;
  void _internal_set_daycount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 daycount_max = 6;
  void clear_daycount_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 daycount_max() const;
  void set_daycount_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daycount_max() const;
  void _internal_set_daycount_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 7;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num1 = 10;
  void clear_num1();
  ::PROTOBUF_NAMESPACE_ID::uint32 num1() const;
  void set_num1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num1() const;
  void _internal_set_num1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num2 = 11;
  void clear_num2();
  ::PROTOBUF_NAMESPACE_ID::uint32 num2() const;
  void set_num2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num2() const;
  void _internal_set_num2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num3 = 12;
  void clear_num3();
  ::PROTOBUF_NAMESPACE_ID::uint32 num3() const;
  void set_num3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num3() const;
  void _internal_set_num3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num4 = 13;
  void clear_num4();
  ::PROTOBUF_NAMESPACE_ID::uint32 num4() const;
  void set_num4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num4() const;
  void _internal_set_num4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TASK_INFO.Info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accept_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expire_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 daycount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 daycount_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TASK_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TASK_INFO) */ {
 public:
  SC_TASK_INFO();
  virtual ~SC_TASK_INFO();

  SC_TASK_INFO(const SC_TASK_INFO& from);
  SC_TASK_INFO(SC_TASK_INFO&& from) noexcept
    : SC_TASK_INFO() {
    *this = ::std::move(from);
  }

  inline SC_TASK_INFO& operator=(const SC_TASK_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TASK_INFO& operator=(SC_TASK_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TASK_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TASK_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_TASK_INFO*>(
               &_SC_TASK_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SC_TASK_INFO& a, SC_TASK_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TASK_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TASK_INFO* New() const final {
    return CreateMaybeMessage<SC_TASK_INFO>(nullptr);
  }

  SC_TASK_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TASK_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TASK_INFO& from);
  void MergeFrom(const SC_TASK_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TASK_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TASK_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_TASK_INFO_Info Info;

  // accessors -------------------------------------------------------

  enum : int {
    kTaskInfoListFieldNumber = 1,
  };
  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  int task_info_list_size() const;
  private:
  int _internal_task_info_list_size() const;
  public:
  void clear_task_info_list();
  ::SC_TASK_INFO_Info* mutable_task_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_TASK_INFO_Info >*
      mutable_task_info_list();
  private:
  const ::SC_TASK_INFO_Info& _internal_task_info_list(int index) const;
  ::SC_TASK_INFO_Info* _internal_add_task_info_list();
  public:
  const ::SC_TASK_INFO_Info& task_info_list(int index) const;
  ::SC_TASK_INFO_Info* add_task_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_TASK_INFO_Info >&
      task_info_list() const;

  // @@protoc_insertion_point(class_scope:SC_TASK_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_TASK_INFO_Info > task_info_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TASK_DATA :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TASK_DATA) */ {
 public:
  SC_TASK_DATA();
  virtual ~SC_TASK_DATA();

  SC_TASK_DATA(const SC_TASK_DATA& from);
  SC_TASK_DATA(SC_TASK_DATA&& from) noexcept
    : SC_TASK_DATA() {
    *this = ::std::move(from);
  }

  inline SC_TASK_DATA& operator=(const SC_TASK_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TASK_DATA& operator=(SC_TASK_DATA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TASK_DATA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TASK_DATA* internal_default_instance() {
    return reinterpret_cast<const SC_TASK_DATA*>(
               &_SC_TASK_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SC_TASK_DATA& a, SC_TASK_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TASK_DATA* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TASK_DATA* New() const final {
    return CreateMaybeMessage<SC_TASK_DATA>(nullptr);
  }

  SC_TASK_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TASK_DATA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TASK_DATA& from);
  void MergeFrom(const SC_TASK_DATA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TASK_DATA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TASK_DATA";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kIdxFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // uint64 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TASK_DATA)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TASK_SUBMIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TASK_SUBMIT) */ {
 public:
  CS_TASK_SUBMIT();
  virtual ~CS_TASK_SUBMIT();

  CS_TASK_SUBMIT(const CS_TASK_SUBMIT& from);
  CS_TASK_SUBMIT(CS_TASK_SUBMIT&& from) noexcept
    : CS_TASK_SUBMIT() {
    *this = ::std::move(from);
  }

  inline CS_TASK_SUBMIT& operator=(const CS_TASK_SUBMIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TASK_SUBMIT& operator=(CS_TASK_SUBMIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TASK_SUBMIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TASK_SUBMIT* internal_default_instance() {
    return reinterpret_cast<const CS_TASK_SUBMIT*>(
               &_CS_TASK_SUBMIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CS_TASK_SUBMIT& a, CS_TASK_SUBMIT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TASK_SUBMIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TASK_SUBMIT* New() const final {
    return CreateMaybeMessage<CS_TASK_SUBMIT>(nullptr);
  }

  CS_TASK_SUBMIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TASK_SUBMIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TASK_SUBMIT& from);
  void MergeFrom(const CS_TASK_SUBMIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TASK_SUBMIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TASK_SUBMIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kSubmitMultipleFieldNumber = 2,
  };
  // uint64 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 submit_multiple = 2;
  void clear_submit_multiple();
  ::PROTOBUF_NAMESPACE_ID::uint32 submit_multiple() const;
  void set_submit_multiple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_submit_multiple() const;
  void _internal_set_submit_multiple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TASK_SUBMIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 submit_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ACTIVE_NPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ACTIVE_NPC) */ {
 public:
  CS_ACTIVE_NPC();
  virtual ~CS_ACTIVE_NPC();

  CS_ACTIVE_NPC(const CS_ACTIVE_NPC& from);
  CS_ACTIVE_NPC(CS_ACTIVE_NPC&& from) noexcept
    : CS_ACTIVE_NPC() {
    *this = ::std::move(from);
  }

  inline CS_ACTIVE_NPC& operator=(const CS_ACTIVE_NPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ACTIVE_NPC& operator=(CS_ACTIVE_NPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ACTIVE_NPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ACTIVE_NPC* internal_default_instance() {
    return reinterpret_cast<const CS_ACTIVE_NPC*>(
               &_CS_ACTIVE_NPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CS_ACTIVE_NPC& a, CS_ACTIVE_NPC& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ACTIVE_NPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ACTIVE_NPC* New() const final {
    return CreateMaybeMessage<CS_ACTIVE_NPC>(nullptr);
  }

  CS_ACTIVE_NPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ACTIVE_NPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ACTIVE_NPC& from);
  void MergeFrom(const CS_ACTIVE_NPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ACTIVE_NPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ACTIVE_NPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcIdFieldNumber = 1,
  };
  // uint64 npc_id = 1;
  void clear_npc_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_id() const;
  void set_npc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_npc_id() const;
  void _internal_set_npc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ACTIVE_NPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DIALOG_dialog_link :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DIALOG.dialog_link) */ {
 public:
  SC_DIALOG_dialog_link();
  virtual ~SC_DIALOG_dialog_link();

  SC_DIALOG_dialog_link(const SC_DIALOG_dialog_link& from);
  SC_DIALOG_dialog_link(SC_DIALOG_dialog_link&& from) noexcept
    : SC_DIALOG_dialog_link() {
    *this = ::std::move(from);
  }

  inline SC_DIALOG_dialog_link& operator=(const SC_DIALOG_dialog_link& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DIALOG_dialog_link& operator=(SC_DIALOG_dialog_link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DIALOG_dialog_link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DIALOG_dialog_link* internal_default_instance() {
    return reinterpret_cast<const SC_DIALOG_dialog_link*>(
               &_SC_DIALOG_dialog_link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SC_DIALOG_dialog_link& a, SC_DIALOG_dialog_link& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DIALOG_dialog_link* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DIALOG_dialog_link* New() const final {
    return CreateMaybeMessage<SC_DIALOG_dialog_link>(nullptr);
  }

  SC_DIALOG_dialog_link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DIALOG_dialog_link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DIALOG_dialog_link& from);
  void MergeFrom(const SC_DIALOG_dialog_link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DIALOG_dialog_link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DIALOG.dialog_link";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxtFieldNumber = 2,
    kStyleFieldNumber = 1,
  };
  // string txt = 2;
  void clear_txt();
  const std::string& txt() const;
  void set_txt(const std::string& value);
  void set_txt(std::string&& value);
  void set_txt(const char* value);
  void set_txt(const char* value, size_t size);
  std::string* mutable_txt();
  std::string* release_txt();
  void set_allocated_txt(std::string* txt);
  private:
  const std::string& _internal_txt() const;
  void _internal_set_txt(const std::string& value);
  std::string* _internal_mutable_txt();
  public:

  // uint32 style = 1;
  void clear_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style() const;
  void _internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_DIALOG.dialog_link)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_DIALOG :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_DIALOG) */ {
 public:
  SC_DIALOG();
  virtual ~SC_DIALOG();

  SC_DIALOG(const SC_DIALOG& from);
  SC_DIALOG(SC_DIALOG&& from) noexcept
    : SC_DIALOG() {
    *this = ::std::move(from);
  }

  inline SC_DIALOG& operator=(const SC_DIALOG& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_DIALOG& operator=(SC_DIALOG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_DIALOG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_DIALOG* internal_default_instance() {
    return reinterpret_cast<const SC_DIALOG*>(
               &_SC_DIALOG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SC_DIALOG& a, SC_DIALOG& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_DIALOG* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_DIALOG* New() const final {
    return CreateMaybeMessage<SC_DIALOG>(nullptr);
  }

  SC_DIALOG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_DIALOG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_DIALOG& from);
  void MergeFrom(const SC_DIALOG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_DIALOG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_DIALOG";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_DIALOG_dialog_link dialog_link;

  // accessors -------------------------------------------------------

  enum : int {
    kDialogTxtFieldNumber = 4,
    kDialogLinkListFieldNumber = 5,
    kDialogTitleFieldNumber = 3,
    kDialogIdFieldNumber = 1,
    kDialogTypeFieldNumber = 2,
  };
  // repeated string dialog_txt = 4;
  int dialog_txt_size() const;
  private:
  int _internal_dialog_txt_size() const;
  public:
  void clear_dialog_txt();
  const std::string& dialog_txt(int index) const;
  std::string* mutable_dialog_txt(int index);
  void set_dialog_txt(int index, const std::string& value);
  void set_dialog_txt(int index, std::string&& value);
  void set_dialog_txt(int index, const char* value);
  void set_dialog_txt(int index, const char* value, size_t size);
  std::string* add_dialog_txt();
  void add_dialog_txt(const std::string& value);
  void add_dialog_txt(std::string&& value);
  void add_dialog_txt(const char* value);
  void add_dialog_txt(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dialog_txt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dialog_txt();
  private:
  const std::string& _internal_dialog_txt(int index) const;
  std::string* _internal_add_dialog_txt();
  public:

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  int dialog_link_list_size() const;
  private:
  int _internal_dialog_link_list_size() const;
  public:
  void clear_dialog_link_list();
  ::SC_DIALOG_dialog_link* mutable_dialog_link_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DIALOG_dialog_link >*
      mutable_dialog_link_list();
  private:
  const ::SC_DIALOG_dialog_link& _internal_dialog_link_list(int index) const;
  ::SC_DIALOG_dialog_link* _internal_add_dialog_link_list();
  public:
  const ::SC_DIALOG_dialog_link& dialog_link_list(int index) const;
  ::SC_DIALOG_dialog_link* add_dialog_link_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DIALOG_dialog_link >&
      dialog_link_list() const;

  // string dialog_title = 3;
  void clear_dialog_title();
  const std::string& dialog_title() const;
  void set_dialog_title(const std::string& value);
  void set_dialog_title(std::string&& value);
  void set_dialog_title(const char* value);
  void set_dialog_title(const char* value, size_t size);
  std::string* mutable_dialog_title();
  std::string* release_dialog_title();
  void set_allocated_dialog_title(std::string* dialog_title);
  private:
  const std::string& _internal_dialog_title() const;
  void _internal_set_dialog_title(const std::string& value);
  std::string* _internal_mutable_dialog_title();
  public:

  // uint64 dialog_id = 1;
  void clear_dialog_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dialog_id() const;
  void set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dialog_id() const;
  void _internal_set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 dialog_type = 2;
  void clear_dialog_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 dialog_type() const;
  void set_dialog_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dialog_type() const;
  void _internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_DIALOG)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dialog_txt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DIALOG_dialog_link > dialog_link_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dialog_title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dialog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dialog_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_DIALOG_CLICK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_DIALOG_CLICK) */ {
 public:
  CS_DIALOG_CLICK();
  virtual ~CS_DIALOG_CLICK();

  CS_DIALOG_CLICK(const CS_DIALOG_CLICK& from);
  CS_DIALOG_CLICK(CS_DIALOG_CLICK&& from) noexcept
    : CS_DIALOG_CLICK() {
    *this = ::std::move(from);
  }

  inline CS_DIALOG_CLICK& operator=(const CS_DIALOG_CLICK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_DIALOG_CLICK& operator=(CS_DIALOG_CLICK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_DIALOG_CLICK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_DIALOG_CLICK* internal_default_instance() {
    return reinterpret_cast<const CS_DIALOG_CLICK*>(
               &_CS_DIALOG_CLICK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CS_DIALOG_CLICK& a, CS_DIALOG_CLICK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_DIALOG_CLICK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_DIALOG_CLICK* New() const final {
    return CreateMaybeMessage<CS_DIALOG_CLICK>(nullptr);
  }

  CS_DIALOG_CLICK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_DIALOG_CLICK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_DIALOG_CLICK& from);
  void MergeFrom(const CS_DIALOG_CLICK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_DIALOG_CLICK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_DIALOG_CLICK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDialogIdFieldNumber = 1,
    kDialogButtonIdxFieldNumber = 2,
  };
  // uint64 dialog_id = 1;
  void clear_dialog_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dialog_id() const;
  void set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dialog_id() const;
  void _internal_set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 dialog_button_idx = 2;
  void clear_dialog_button_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 dialog_button_idx() const;
  void set_dialog_button_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dialog_button_idx() const;
  void _internal_set_dialog_button_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_DIALOG_CLICK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dialog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dialog_button_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ACHI_INFO_Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ACHI_INFO.Info) */ {
 public:
  SC_ACHI_INFO_Info();
  virtual ~SC_ACHI_INFO_Info();

  SC_ACHI_INFO_Info(const SC_ACHI_INFO_Info& from);
  SC_ACHI_INFO_Info(SC_ACHI_INFO_Info&& from) noexcept
    : SC_ACHI_INFO_Info() {
    *this = ::std::move(from);
  }

  inline SC_ACHI_INFO_Info& operator=(const SC_ACHI_INFO_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACHI_INFO_Info& operator=(SC_ACHI_INFO_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ACHI_INFO_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ACHI_INFO_Info* internal_default_instance() {
    return reinterpret_cast<const SC_ACHI_INFO_Info*>(
               &_SC_ACHI_INFO_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SC_ACHI_INFO_Info& a, SC_ACHI_INFO_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACHI_INFO_Info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ACHI_INFO_Info* New() const final {
    return CreateMaybeMessage<SC_ACHI_INFO_Info>(nullptr);
  }

  SC_ACHI_INFO_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ACHI_INFO_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ACHI_INFO_Info& from);
  void MergeFrom(const SC_ACHI_INFO_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACHI_INFO_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ACHI_INFO.Info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchiIdFieldNumber = 1,
    kTakeFieldNumber = 2,
  };
  // uint32 achi_id = 1;
  void clear_achi_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_id() const;
  void set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achi_id() const;
  void _internal_set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 take = 2;
  void clear_take();
  ::PROTOBUF_NAMESPACE_ID::uint32 take() const;
  void set_take(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_take() const;
  void _internal_set_take(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ACHI_INFO.Info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 take_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ACHI_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ACHI_INFO) */ {
 public:
  SC_ACHI_INFO();
  virtual ~SC_ACHI_INFO();

  SC_ACHI_INFO(const SC_ACHI_INFO& from);
  SC_ACHI_INFO(SC_ACHI_INFO&& from) noexcept
    : SC_ACHI_INFO() {
    *this = ::std::move(from);
  }

  inline SC_ACHI_INFO& operator=(const SC_ACHI_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACHI_INFO& operator=(SC_ACHI_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ACHI_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ACHI_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_ACHI_INFO*>(
               &_SC_ACHI_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SC_ACHI_INFO& a, SC_ACHI_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACHI_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ACHI_INFO* New() const final {
    return CreateMaybeMessage<SC_ACHI_INFO>(nullptr);
  }

  SC_ACHI_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ACHI_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ACHI_INFO& from);
  void MergeFrom(const SC_ACHI_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACHI_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ACHI_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_ACHI_INFO_Info Info;

  // accessors -------------------------------------------------------

  enum : int {
    kFinishListFieldNumber = 1,
  };
  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  int finish_list_size() const;
  private:
  int _internal_finish_list_size() const;
  public:
  void clear_finish_list();
  ::SC_ACHI_INFO_Info* mutable_finish_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACHI_INFO_Info >*
      mutable_finish_list();
  private:
  const ::SC_ACHI_INFO_Info& _internal_finish_list(int index) const;
  ::SC_ACHI_INFO_Info* _internal_add_finish_list();
  public:
  const ::SC_ACHI_INFO_Info& finish_list(int index) const;
  ::SC_ACHI_INFO_Info* add_finish_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACHI_INFO_Info >&
      finish_list() const;

  // @@protoc_insertion_point(class_scope:SC_ACHI_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACHI_INFO_Info > finish_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_ACHI_TAKE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_ACHI_TAKE) */ {
 public:
  CS_ACHI_TAKE();
  virtual ~CS_ACHI_TAKE();

  CS_ACHI_TAKE(const CS_ACHI_TAKE& from);
  CS_ACHI_TAKE(CS_ACHI_TAKE&& from) noexcept
    : CS_ACHI_TAKE() {
    *this = ::std::move(from);
  }

  inline CS_ACHI_TAKE& operator=(const CS_ACHI_TAKE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ACHI_TAKE& operator=(CS_ACHI_TAKE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ACHI_TAKE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ACHI_TAKE* internal_default_instance() {
    return reinterpret_cast<const CS_ACHI_TAKE*>(
               &_CS_ACHI_TAKE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CS_ACHI_TAKE& a, CS_ACHI_TAKE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ACHI_TAKE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ACHI_TAKE* New() const final {
    return CreateMaybeMessage<CS_ACHI_TAKE>(nullptr);
  }

  CS_ACHI_TAKE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ACHI_TAKE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ACHI_TAKE& from);
  void MergeFrom(const CS_ACHI_TAKE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ACHI_TAKE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_ACHI_TAKE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchiIdFieldNumber = 1,
  };
  // uint32 achi_id = 1;
  void clear_achi_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_id() const;
  void set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achi_id() const;
  void _internal_set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_ACHI_TAKE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achi_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMCREATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMCREATE) */ {
 public:
  CS_TEAMCREATE();
  virtual ~CS_TEAMCREATE();

  CS_TEAMCREATE(const CS_TEAMCREATE& from);
  CS_TEAMCREATE(CS_TEAMCREATE&& from) noexcept
    : CS_TEAMCREATE() {
    *this = ::std::move(from);
  }

  inline CS_TEAMCREATE& operator=(const CS_TEAMCREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMCREATE& operator=(CS_TEAMCREATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMCREATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMCREATE* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMCREATE*>(
               &_CS_TEAMCREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CS_TEAMCREATE& a, CS_TEAMCREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMCREATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMCREATE* New() const final {
    return CreateMaybeMessage<CS_TEAMCREATE>(nullptr);
  }

  CS_TEAMCREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMCREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMCREATE& from);
  void MergeFrom(const CS_TEAMCREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMCREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMCREATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_TEAMCREATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMQUIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMQUIT) */ {
 public:
  CS_TEAMQUIT();
  virtual ~CS_TEAMQUIT();

  CS_TEAMQUIT(const CS_TEAMQUIT& from);
  CS_TEAMQUIT(CS_TEAMQUIT&& from) noexcept
    : CS_TEAMQUIT() {
    *this = ::std::move(from);
  }

  inline CS_TEAMQUIT& operator=(const CS_TEAMQUIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMQUIT& operator=(CS_TEAMQUIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMQUIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMQUIT* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMQUIT*>(
               &_CS_TEAMQUIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CS_TEAMQUIT& a, CS_TEAMQUIT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMQUIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMQUIT* New() const final {
    return CreateMaybeMessage<CS_TEAMQUIT>(nullptr);
  }

  CS_TEAMQUIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMQUIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMQUIT& from);
  void MergeFrom(const CS_TEAMQUIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMQUIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMQUIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_TEAMQUIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMKICKMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMKICKMEMBER) */ {
 public:
  CS_TEAMKICKMEMBER();
  virtual ~CS_TEAMKICKMEMBER();

  CS_TEAMKICKMEMBER(const CS_TEAMKICKMEMBER& from);
  CS_TEAMKICKMEMBER(CS_TEAMKICKMEMBER&& from) noexcept
    : CS_TEAMKICKMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_TEAMKICKMEMBER& operator=(const CS_TEAMKICKMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMKICKMEMBER& operator=(CS_TEAMKICKMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMKICKMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMKICKMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMKICKMEMBER*>(
               &_CS_TEAMKICKMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CS_TEAMKICKMEMBER& a, CS_TEAMKICKMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMKICKMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMKICKMEMBER* New() const final {
    return CreateMaybeMessage<CS_TEAMKICKMEMBER>(nullptr);
  }

  CS_TEAMKICKMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMKICKMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMKICKMEMBER& from);
  void MergeFrom(const CS_TEAMKICKMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMKICKMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMKICKMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
  };
  // uint64 member_id = 1;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMKICKMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMINVITEMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMINVITEMEMBER) */ {
 public:
  CS_TEAMINVITEMEMBER();
  virtual ~CS_TEAMINVITEMEMBER();

  CS_TEAMINVITEMEMBER(const CS_TEAMINVITEMEMBER& from);
  CS_TEAMINVITEMEMBER(CS_TEAMINVITEMEMBER&& from) noexcept
    : CS_TEAMINVITEMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_TEAMINVITEMEMBER& operator=(const CS_TEAMINVITEMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMINVITEMEMBER& operator=(CS_TEAMINVITEMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMINVITEMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMINVITEMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMINVITEMEMBER*>(
               &_CS_TEAMINVITEMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CS_TEAMINVITEMEMBER& a, CS_TEAMINVITEMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMINVITEMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMINVITEMEMBER* New() const final {
    return CreateMaybeMessage<CS_TEAMINVITEMEMBER>(nullptr);
  }

  CS_TEAMINVITEMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMINVITEMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMINVITEMEMBER& from);
  void MergeFrom(const CS_TEAMINVITEMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMINVITEMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMINVITEMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteeIdFieldNumber = 1,
  };
  // uint64 invitee_id = 1;
  void clear_invitee_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitee_id() const;
  void set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitee_id() const;
  void _internal_set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMINVITEMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitee_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TEAMINVITEMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TEAMINVITEMEMBER) */ {
 public:
  SC_TEAMINVITEMEMBER();
  virtual ~SC_TEAMINVITEMEMBER();

  SC_TEAMINVITEMEMBER(const SC_TEAMINVITEMEMBER& from);
  SC_TEAMINVITEMEMBER(SC_TEAMINVITEMEMBER&& from) noexcept
    : SC_TEAMINVITEMEMBER() {
    *this = ::std::move(from);
  }

  inline SC_TEAMINVITEMEMBER& operator=(const SC_TEAMINVITEMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEAMINVITEMEMBER& operator=(SC_TEAMINVITEMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TEAMINVITEMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TEAMINVITEMEMBER* internal_default_instance() {
    return reinterpret_cast<const SC_TEAMINVITEMEMBER*>(
               &_SC_TEAMINVITEMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SC_TEAMINVITEMEMBER& a, SC_TEAMINVITEMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEAMINVITEMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TEAMINVITEMEMBER* New() const final {
    return CreateMaybeMessage<SC_TEAMINVITEMEMBER>(nullptr);
  }

  SC_TEAMINVITEMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TEAMINVITEMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TEAMINVITEMEMBER& from);
  void MergeFrom(const SC_TEAMINVITEMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEAMINVITEMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TEAMINVITEMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviterNameFieldNumber = 3,
    kTeamIdFieldNumber = 1,
    kInviterIdFieldNumber = 2,
  };
  // string inviter_name = 3;
  void clear_inviter_name();
  const std::string& inviter_name() const;
  void set_inviter_name(const std::string& value);
  void set_inviter_name(std::string&& value);
  void set_inviter_name(const char* value);
  void set_inviter_name(const char* value, size_t size);
  std::string* mutable_inviter_name();
  std::string* release_inviter_name();
  void set_allocated_inviter_name(std::string* inviter_name);
  private:
  const std::string& _internal_inviter_name() const;
  void _internal_set_inviter_name(const std::string& value);
  std::string* _internal_mutable_inviter_name();
  public:

  // uint64 team_id = 1;
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 inviter_id = 2;
  void clear_inviter_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id() const;
  void set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter_id() const;
  void _internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TEAMINVITEMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviter_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMACCEPTINVITE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMACCEPTINVITE) */ {
 public:
  CS_TEAMACCEPTINVITE();
  virtual ~CS_TEAMACCEPTINVITE();

  CS_TEAMACCEPTINVITE(const CS_TEAMACCEPTINVITE& from);
  CS_TEAMACCEPTINVITE(CS_TEAMACCEPTINVITE&& from) noexcept
    : CS_TEAMACCEPTINVITE() {
    *this = ::std::move(from);
  }

  inline CS_TEAMACCEPTINVITE& operator=(const CS_TEAMACCEPTINVITE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMACCEPTINVITE& operator=(CS_TEAMACCEPTINVITE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMACCEPTINVITE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMACCEPTINVITE* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMACCEPTINVITE*>(
               &_CS_TEAMACCEPTINVITE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CS_TEAMACCEPTINVITE& a, CS_TEAMACCEPTINVITE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMACCEPTINVITE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMACCEPTINVITE* New() const final {
    return CreateMaybeMessage<CS_TEAMACCEPTINVITE>(nullptr);
  }

  CS_TEAMACCEPTINVITE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMACCEPTINVITE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMACCEPTINVITE& from);
  void MergeFrom(const CS_TEAMACCEPTINVITE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMACCEPTINVITE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMACCEPTINVITE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kInviterIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // uint64 team_id = 1;
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 inviter_id = 2;
  void clear_inviter_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id() const;
  void set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter_id() const;
  void _internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMACCEPTINVITE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMNEWLEADER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMNEWLEADER) */ {
 public:
  CS_TEAMNEWLEADER();
  virtual ~CS_TEAMNEWLEADER();

  CS_TEAMNEWLEADER(const CS_TEAMNEWLEADER& from);
  CS_TEAMNEWLEADER(CS_TEAMNEWLEADER&& from) noexcept
    : CS_TEAMNEWLEADER() {
    *this = ::std::move(from);
  }

  inline CS_TEAMNEWLEADER& operator=(const CS_TEAMNEWLEADER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMNEWLEADER& operator=(CS_TEAMNEWLEADER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMNEWLEADER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMNEWLEADER* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMNEWLEADER*>(
               &_CS_TEAMNEWLEADER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CS_TEAMNEWLEADER& a, CS_TEAMNEWLEADER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMNEWLEADER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMNEWLEADER* New() const final {
    return CreateMaybeMessage<CS_TEAMNEWLEADER>(nullptr);
  }

  CS_TEAMNEWLEADER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMNEWLEADER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMNEWLEADER& from);
  void MergeFrom(const CS_TEAMNEWLEADER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMNEWLEADER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMNEWLEADER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLeaderIdFieldNumber = 2,
  };
  // uint64 new_leader_id = 2;
  void clear_new_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id() const;
  void set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_leader_id() const;
  void _internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMNEWLEADER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TEAMMEMBER_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TEAMMEMBER_INFO) */ {
 public:
  SC_TEAMMEMBER_INFO();
  virtual ~SC_TEAMMEMBER_INFO();

  SC_TEAMMEMBER_INFO(const SC_TEAMMEMBER_INFO& from);
  SC_TEAMMEMBER_INFO(SC_TEAMMEMBER_INFO&& from) noexcept
    : SC_TEAMMEMBER_INFO() {
    *this = ::std::move(from);
  }

  inline SC_TEAMMEMBER_INFO& operator=(const SC_TEAMMEMBER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEAMMEMBER_INFO& operator=(SC_TEAMMEMBER_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TEAMMEMBER_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TEAMMEMBER_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_TEAMMEMBER_INFO*>(
               &_SC_TEAMMEMBER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SC_TEAMMEMBER_INFO& a, SC_TEAMMEMBER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEAMMEMBER_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TEAMMEMBER_INFO* New() const final {
    return CreateMaybeMessage<SC_TEAMMEMBER_INFO>(nullptr);
  }

  SC_TEAMMEMBER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TEAMMEMBER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TEAMMEMBER_INFO& from);
  void MergeFrom(const SC_TEAMMEMBER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEAMMEMBER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TEAMMEMBER_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberListFieldNumber = 1,
  };
  // repeated .TeamMemberInfo member_list = 1;
  int member_list_size() const;
  private:
  int _internal_member_list_size() const;
  public:
  void clear_member_list();
  ::TeamMemberInfo* mutable_member_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamMemberInfo >*
      mutable_member_list();
  private:
  const ::TeamMemberInfo& _internal_member_list(int index) const;
  ::TeamMemberInfo* _internal_add_member_list();
  public:
  const ::TeamMemberInfo& member_list(int index) const;
  ::TeamMemberInfo* add_member_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamMemberInfo >&
      member_list() const;

  // @@protoc_insertion_point(class_scope:SC_TEAMMEMBER_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamMemberInfo > member_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TEAMMEMBER_ACTION :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TEAMMEMBER_ACTION) */ {
 public:
  SC_TEAMMEMBER_ACTION();
  virtual ~SC_TEAMMEMBER_ACTION();

  SC_TEAMMEMBER_ACTION(const SC_TEAMMEMBER_ACTION& from);
  SC_TEAMMEMBER_ACTION(SC_TEAMMEMBER_ACTION&& from) noexcept
    : SC_TEAMMEMBER_ACTION() {
    *this = ::std::move(from);
  }

  inline SC_TEAMMEMBER_ACTION& operator=(const SC_TEAMMEMBER_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEAMMEMBER_ACTION& operator=(SC_TEAMMEMBER_ACTION&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TEAMMEMBER_ACTION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TEAMMEMBER_ACTION* internal_default_instance() {
    return reinterpret_cast<const SC_TEAMMEMBER_ACTION*>(
               &_SC_TEAMMEMBER_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SC_TEAMMEMBER_ACTION& a, SC_TEAMMEMBER_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEAMMEMBER_ACTION* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TEAMMEMBER_ACTION* New() const final {
    return CreateMaybeMessage<SC_TEAMMEMBER_ACTION>(nullptr);
  }

  SC_TEAMMEMBER_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TEAMMEMBER_ACTION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TEAMMEMBER_ACTION& from);
  void MergeFrom(const SC_TEAMMEMBER_ACTION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEAMMEMBER_ACTION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TEAMMEMBER_ACTION";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_TEAMMEMBER_ACTION_Action Action;
  static constexpr Action TEAM_CREATE =
    SC_TEAMMEMBER_ACTION_Action_TEAM_CREATE;
  static constexpr Action TEAM_DESTORY =
    SC_TEAMMEMBER_ACTION_Action_TEAM_DESTORY;
  static constexpr Action TEAM_ADDMEBER =
    SC_TEAMMEMBER_ACTION_Action_TEAM_ADDMEBER;
  static constexpr Action TEAM_CHANGE_LEADER =
    SC_TEAMMEMBER_ACTION_Action_TEAM_CHANGE_LEADER;
  static constexpr Action TEAM_QUIT =
    SC_TEAMMEMBER_ACTION_Action_TEAM_QUIT;
  static constexpr Action TEAM_KICKMEMBER =
    SC_TEAMMEMBER_ACTION_Action_TEAM_KICKMEMBER;
  static constexpr Action TEAM_MEMBER_LEV_CHG =
    SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_LEV_CHG;
  static constexpr Action TEAM_MEMBER_NAME_CHG =
    SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_NAME_CHG;
  static constexpr Action TEAM_MEMBER_ONLINE_CHG =
    SC_TEAMMEMBER_ACTION_Action_TEAM_MEMBER_ONLINE_CHG;
  static inline bool Action_IsValid(int value) {
    return SC_TEAMMEMBER_ACTION_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    SC_TEAMMEMBER_ACTION_Action_Action_MIN;
  static constexpr Action Action_MAX =
    SC_TEAMMEMBER_ACTION_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    SC_TEAMMEMBER_ACTION_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return SC_TEAMMEMBER_ACTION_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return SC_TEAMMEMBER_ACTION_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return SC_TEAMMEMBER_ACTION_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemberNameFieldNumber = 5,
    kOperatorIdFieldNumber = 2,
    kActionFieldNumber = 1,
    kMemberLevFieldNumber = 4,
    kMemberIdFieldNumber = 3,
    kMemberOnlineFieldNumber = 6,
  };
  // string member_name = 5;
  void clear_member_name();
  const std::string& member_name() const;
  void set_member_name(const std::string& value);
  void set_member_name(std::string&& value);
  void set_member_name(const char* value);
  void set_member_name(const char* value, size_t size);
  std::string* mutable_member_name();
  std::string* release_member_name();
  void set_allocated_member_name(std::string* member_name);
  private:
  const std::string& _internal_member_name() const;
  void _internal_set_member_name(const std::string& value);
  std::string* _internal_mutable_member_name();
  public:

  // uint64 operator_id = 2;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .SC_TEAMMEMBER_ACTION.Action action = 1;
  void clear_action();
  ::SC_TEAMMEMBER_ACTION_Action action() const;
  void set_action(::SC_TEAMMEMBER_ACTION_Action value);
  private:
  ::SC_TEAMMEMBER_ACTION_Action _internal_action() const;
  void _internal_set_action(::SC_TEAMMEMBER_ACTION_Action value);
  public:

  // uint32 member_lev = 4;
  void clear_member_lev();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_lev() const;
  void set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_lev() const;
  void _internal_set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 member_id = 3;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool member_online = 6;
  void clear_member_online();
  bool member_online() const;
  void set_member_online(bool value);
  private:
  bool _internal_member_online() const;
  void _internal_set_member_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TEAMMEMBER_ACTION)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_id_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_lev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  bool member_online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMAPPLYMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMAPPLYMEMBER) */ {
 public:
  CS_TEAMAPPLYMEMBER();
  virtual ~CS_TEAMAPPLYMEMBER();

  CS_TEAMAPPLYMEMBER(const CS_TEAMAPPLYMEMBER& from);
  CS_TEAMAPPLYMEMBER(CS_TEAMAPPLYMEMBER&& from) noexcept
    : CS_TEAMAPPLYMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_TEAMAPPLYMEMBER& operator=(const CS_TEAMAPPLYMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMAPPLYMEMBER& operator=(CS_TEAMAPPLYMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMAPPLYMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMAPPLYMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMAPPLYMEMBER*>(
               &_CS_TEAMAPPLYMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CS_TEAMAPPLYMEMBER& a, CS_TEAMAPPLYMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMAPPLYMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMAPPLYMEMBER* New() const final {
    return CreateMaybeMessage<CS_TEAMAPPLYMEMBER>(nullptr);
  }

  CS_TEAMAPPLYMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMAPPLYMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMAPPLYMEMBER& from);
  void MergeFrom(const CS_TEAMAPPLYMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMAPPLYMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMAPPLYMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespondentIdFieldNumber = 1,
  };
  // uint64 respondent_id = 1;
  void clear_respondent_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 respondent_id() const;
  void set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_respondent_id() const;
  void _internal_set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMAPPLYMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 respondent_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_TEAMAPPLYMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_TEAMAPPLYMEMBER) */ {
 public:
  SC_TEAMAPPLYMEMBER();
  virtual ~SC_TEAMAPPLYMEMBER();

  SC_TEAMAPPLYMEMBER(const SC_TEAMAPPLYMEMBER& from);
  SC_TEAMAPPLYMEMBER(SC_TEAMAPPLYMEMBER&& from) noexcept
    : SC_TEAMAPPLYMEMBER() {
    *this = ::std::move(from);
  }

  inline SC_TEAMAPPLYMEMBER& operator=(const SC_TEAMAPPLYMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEAMAPPLYMEMBER& operator=(SC_TEAMAPPLYMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_TEAMAPPLYMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_TEAMAPPLYMEMBER* internal_default_instance() {
    return reinterpret_cast<const SC_TEAMAPPLYMEMBER*>(
               &_SC_TEAMAPPLYMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SC_TEAMAPPLYMEMBER& a, SC_TEAMAPPLYMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEAMAPPLYMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_TEAMAPPLYMEMBER* New() const final {
    return CreateMaybeMessage<SC_TEAMAPPLYMEMBER>(nullptr);
  }

  SC_TEAMAPPLYMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_TEAMAPPLYMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_TEAMAPPLYMEMBER& from);
  void MergeFrom(const SC_TEAMAPPLYMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEAMAPPLYMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_TEAMAPPLYMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicantNameFieldNumber = 2,
    kApplicantIdFieldNumber = 1,
  };
  // string applicant_name = 2;
  void clear_applicant_name();
  const std::string& applicant_name() const;
  void set_applicant_name(const std::string& value);
  void set_applicant_name(std::string&& value);
  void set_applicant_name(const char* value);
  void set_applicant_name(const char* value, size_t size);
  std::string* mutable_applicant_name();
  std::string* release_applicant_name();
  void set_allocated_applicant_name(std::string* applicant_name);
  private:
  const std::string& _internal_applicant_name() const;
  void _internal_set_applicant_name(const std::string& value);
  std::string* _internal_mutable_applicant_name();
  public:

  // uint64 applicant_id = 1;
  void clear_applicant_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id() const;
  void set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_applicant_id() const;
  void _internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_TEAMAPPLYMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicant_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_TEAMACCEPTAPPLY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_TEAMACCEPTAPPLY) */ {
 public:
  CS_TEAMACCEPTAPPLY();
  virtual ~CS_TEAMACCEPTAPPLY();

  CS_TEAMACCEPTAPPLY(const CS_TEAMACCEPTAPPLY& from);
  CS_TEAMACCEPTAPPLY(CS_TEAMACCEPTAPPLY&& from) noexcept
    : CS_TEAMACCEPTAPPLY() {
    *this = ::std::move(from);
  }

  inline CS_TEAMACCEPTAPPLY& operator=(const CS_TEAMACCEPTAPPLY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEAMACCEPTAPPLY& operator=(CS_TEAMACCEPTAPPLY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_TEAMACCEPTAPPLY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_TEAMACCEPTAPPLY* internal_default_instance() {
    return reinterpret_cast<const CS_TEAMACCEPTAPPLY*>(
               &_CS_TEAMACCEPTAPPLY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CS_TEAMACCEPTAPPLY& a, CS_TEAMACCEPTAPPLY& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEAMACCEPTAPPLY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_TEAMACCEPTAPPLY* New() const final {
    return CreateMaybeMessage<CS_TEAMACCEPTAPPLY>(nullptr);
  }

  CS_TEAMACCEPTAPPLY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_TEAMACCEPTAPPLY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_TEAMACCEPTAPPLY& from);
  void MergeFrom(const CS_TEAMACCEPTAPPLY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEAMACCEPTAPPLY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_TEAMACCEPTAPPLY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicantIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // uint64 applicant_id = 1;
  void clear_applicant_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id() const;
  void set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_applicant_id() const;
  void _internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CS_TEAMACCEPTAPPLY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDCREATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDCREATE) */ {
 public:
  CS_GUILDCREATE();
  virtual ~CS_GUILDCREATE();

  CS_GUILDCREATE(const CS_GUILDCREATE& from);
  CS_GUILDCREATE(CS_GUILDCREATE&& from) noexcept
    : CS_GUILDCREATE() {
    *this = ::std::move(from);
  }

  inline CS_GUILDCREATE& operator=(const CS_GUILDCREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDCREATE& operator=(CS_GUILDCREATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDCREATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDCREATE* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDCREATE*>(
               &_CS_GUILDCREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CS_GUILDCREATE& a, CS_GUILDCREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDCREATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDCREATE* New() const final {
    return CreateMaybeMessage<CS_GUILDCREATE>(nullptr);
  }

  CS_GUILDCREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDCREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDCREATE& from);
  void MergeFrom(const CS_GUILDCREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDCREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDCREATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_GUILDCREATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDQUIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDQUIT) */ {
 public:
  CS_GUILDQUIT();
  virtual ~CS_GUILDQUIT();

  CS_GUILDQUIT(const CS_GUILDQUIT& from);
  CS_GUILDQUIT(CS_GUILDQUIT&& from) noexcept
    : CS_GUILDQUIT() {
    *this = ::std::move(from);
  }

  inline CS_GUILDQUIT& operator=(const CS_GUILDQUIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDQUIT& operator=(CS_GUILDQUIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDQUIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDQUIT* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDQUIT*>(
               &_CS_GUILDQUIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CS_GUILDQUIT& a, CS_GUILDQUIT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDQUIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDQUIT* New() const final {
    return CreateMaybeMessage<CS_GUILDQUIT>(nullptr);
  }

  CS_GUILDQUIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDQUIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDQUIT& from);
  void MergeFrom(const CS_GUILDQUIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDQUIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDQUIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_GUILDQUIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDKICKMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDKICKMEMBER) */ {
 public:
  CS_GUILDKICKMEMBER();
  virtual ~CS_GUILDKICKMEMBER();

  CS_GUILDKICKMEMBER(const CS_GUILDKICKMEMBER& from);
  CS_GUILDKICKMEMBER(CS_GUILDKICKMEMBER&& from) noexcept
    : CS_GUILDKICKMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_GUILDKICKMEMBER& operator=(const CS_GUILDKICKMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDKICKMEMBER& operator=(CS_GUILDKICKMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDKICKMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDKICKMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDKICKMEMBER*>(
               &_CS_GUILDKICKMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CS_GUILDKICKMEMBER& a, CS_GUILDKICKMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDKICKMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDKICKMEMBER* New() const final {
    return CreateMaybeMessage<CS_GUILDKICKMEMBER>(nullptr);
  }

  CS_GUILDKICKMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDKICKMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDKICKMEMBER& from);
  void MergeFrom(const CS_GUILDKICKMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDKICKMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDKICKMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
  };
  // uint64 member_id = 1;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDKICKMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDINVITEMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDINVITEMEMBER) */ {
 public:
  CS_GUILDINVITEMEMBER();
  virtual ~CS_GUILDINVITEMEMBER();

  CS_GUILDINVITEMEMBER(const CS_GUILDINVITEMEMBER& from);
  CS_GUILDINVITEMEMBER(CS_GUILDINVITEMEMBER&& from) noexcept
    : CS_GUILDINVITEMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_GUILDINVITEMEMBER& operator=(const CS_GUILDINVITEMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDINVITEMEMBER& operator=(CS_GUILDINVITEMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDINVITEMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDINVITEMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDINVITEMEMBER*>(
               &_CS_GUILDINVITEMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CS_GUILDINVITEMEMBER& a, CS_GUILDINVITEMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDINVITEMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDINVITEMEMBER* New() const final {
    return CreateMaybeMessage<CS_GUILDINVITEMEMBER>(nullptr);
  }

  CS_GUILDINVITEMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDINVITEMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDINVITEMEMBER& from);
  void MergeFrom(const CS_GUILDINVITEMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDINVITEMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDINVITEMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteeIdFieldNumber = 1,
  };
  // uint64 invitee_id = 1;
  void clear_invitee_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitee_id() const;
  void set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitee_id() const;
  void _internal_set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDINVITEMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitee_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_GUILDINVITEMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_GUILDINVITEMEMBER) */ {
 public:
  SC_GUILDINVITEMEMBER();
  virtual ~SC_GUILDINVITEMEMBER();

  SC_GUILDINVITEMEMBER(const SC_GUILDINVITEMEMBER& from);
  SC_GUILDINVITEMEMBER(SC_GUILDINVITEMEMBER&& from) noexcept
    : SC_GUILDINVITEMEMBER() {
    *this = ::std::move(from);
  }

  inline SC_GUILDINVITEMEMBER& operator=(const SC_GUILDINVITEMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_GUILDINVITEMEMBER& operator=(SC_GUILDINVITEMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_GUILDINVITEMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_GUILDINVITEMEMBER* internal_default_instance() {
    return reinterpret_cast<const SC_GUILDINVITEMEMBER*>(
               &_SC_GUILDINVITEMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SC_GUILDINVITEMEMBER& a, SC_GUILDINVITEMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_GUILDINVITEMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_GUILDINVITEMEMBER* New() const final {
    return CreateMaybeMessage<SC_GUILDINVITEMEMBER>(nullptr);
  }

  SC_GUILDINVITEMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_GUILDINVITEMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_GUILDINVITEMEMBER& from);
  void MergeFrom(const SC_GUILDINVITEMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_GUILDINVITEMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_GUILDINVITEMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviterNameFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kInviterIdFieldNumber = 2,
  };
  // string inviter_name = 3;
  void clear_inviter_name();
  const std::string& inviter_name() const;
  void set_inviter_name(const std::string& value);
  void set_inviter_name(std::string&& value);
  void set_inviter_name(const char* value);
  void set_inviter_name(const char* value, size_t size);
  std::string* mutable_inviter_name();
  std::string* release_inviter_name();
  void set_allocated_inviter_name(std::string* inviter_name);
  private:
  const std::string& _internal_inviter_name() const;
  void _internal_set_inviter_name(const std::string& value);
  std::string* _internal_mutable_inviter_name();
  public:

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 inviter_id = 2;
  void clear_inviter_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id() const;
  void set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter_id() const;
  void _internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_GUILDINVITEMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviter_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDACCEPTINVITE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDACCEPTINVITE) */ {
 public:
  CS_GUILDACCEPTINVITE();
  virtual ~CS_GUILDACCEPTINVITE();

  CS_GUILDACCEPTINVITE(const CS_GUILDACCEPTINVITE& from);
  CS_GUILDACCEPTINVITE(CS_GUILDACCEPTINVITE&& from) noexcept
    : CS_GUILDACCEPTINVITE() {
    *this = ::std::move(from);
  }

  inline CS_GUILDACCEPTINVITE& operator=(const CS_GUILDACCEPTINVITE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDACCEPTINVITE& operator=(CS_GUILDACCEPTINVITE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDACCEPTINVITE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDACCEPTINVITE* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDACCEPTINVITE*>(
               &_CS_GUILDACCEPTINVITE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CS_GUILDACCEPTINVITE& a, CS_GUILDACCEPTINVITE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDACCEPTINVITE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDACCEPTINVITE* New() const final {
    return CreateMaybeMessage<CS_GUILDACCEPTINVITE>(nullptr);
  }

  CS_GUILDACCEPTINVITE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDACCEPTINVITE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDACCEPTINVITE& from);
  void MergeFrom(const CS_GUILDACCEPTINVITE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDACCEPTINVITE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDACCEPTINVITE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kInviterIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 inviter_id = 2;
  void clear_inviter_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id() const;
  void set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter_id() const;
  void _internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDACCEPTINVITE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDNEWLEADER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDNEWLEADER) */ {
 public:
  CS_GUILDNEWLEADER();
  virtual ~CS_GUILDNEWLEADER();

  CS_GUILDNEWLEADER(const CS_GUILDNEWLEADER& from);
  CS_GUILDNEWLEADER(CS_GUILDNEWLEADER&& from) noexcept
    : CS_GUILDNEWLEADER() {
    *this = ::std::move(from);
  }

  inline CS_GUILDNEWLEADER& operator=(const CS_GUILDNEWLEADER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDNEWLEADER& operator=(CS_GUILDNEWLEADER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDNEWLEADER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDNEWLEADER* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDNEWLEADER*>(
               &_CS_GUILDNEWLEADER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CS_GUILDNEWLEADER& a, CS_GUILDNEWLEADER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDNEWLEADER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDNEWLEADER* New() const final {
    return CreateMaybeMessage<CS_GUILDNEWLEADER>(nullptr);
  }

  CS_GUILDNEWLEADER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDNEWLEADER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDNEWLEADER& from);
  void MergeFrom(const CS_GUILDNEWLEADER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDNEWLEADER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDNEWLEADER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLeaderIdFieldNumber = 2,
  };
  // uint64 new_leader_id = 2;
  void clear_new_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id() const;
  void set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_leader_id() const;
  void _internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDNEWLEADER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_GUILDMEMBER_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_GUILDMEMBER_INFO) */ {
 public:
  SC_GUILDMEMBER_INFO();
  virtual ~SC_GUILDMEMBER_INFO();

  SC_GUILDMEMBER_INFO(const SC_GUILDMEMBER_INFO& from);
  SC_GUILDMEMBER_INFO(SC_GUILDMEMBER_INFO&& from) noexcept
    : SC_GUILDMEMBER_INFO() {
    *this = ::std::move(from);
  }

  inline SC_GUILDMEMBER_INFO& operator=(const SC_GUILDMEMBER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_GUILDMEMBER_INFO& operator=(SC_GUILDMEMBER_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_GUILDMEMBER_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_GUILDMEMBER_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_GUILDMEMBER_INFO*>(
               &_SC_GUILDMEMBER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SC_GUILDMEMBER_INFO& a, SC_GUILDMEMBER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_GUILDMEMBER_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_GUILDMEMBER_INFO* New() const final {
    return CreateMaybeMessage<SC_GUILDMEMBER_INFO>(nullptr);
  }

  SC_GUILDMEMBER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_GUILDMEMBER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_GUILDMEMBER_INFO& from);
  void MergeFrom(const SC_GUILDMEMBER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_GUILDMEMBER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_GUILDMEMBER_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberListFieldNumber = 1,
  };
  // repeated .GuildMemberInfo member_list = 1;
  int member_list_size() const;
  private:
  int _internal_member_list_size() const;
  public:
  void clear_member_list();
  ::GuildMemberInfo* mutable_member_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GuildMemberInfo >*
      mutable_member_list();
  private:
  const ::GuildMemberInfo& _internal_member_list(int index) const;
  ::GuildMemberInfo* _internal_add_member_list();
  public:
  const ::GuildMemberInfo& member_list(int index) const;
  ::GuildMemberInfo* add_member_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GuildMemberInfo >&
      member_list() const;

  // @@protoc_insertion_point(class_scope:SC_GUILDMEMBER_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GuildMemberInfo > member_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_GUILDMEMBER_ACTION :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_GUILDMEMBER_ACTION) */ {
 public:
  SC_GUILDMEMBER_ACTION();
  virtual ~SC_GUILDMEMBER_ACTION();

  SC_GUILDMEMBER_ACTION(const SC_GUILDMEMBER_ACTION& from);
  SC_GUILDMEMBER_ACTION(SC_GUILDMEMBER_ACTION&& from) noexcept
    : SC_GUILDMEMBER_ACTION() {
    *this = ::std::move(from);
  }

  inline SC_GUILDMEMBER_ACTION& operator=(const SC_GUILDMEMBER_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_GUILDMEMBER_ACTION& operator=(SC_GUILDMEMBER_ACTION&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_GUILDMEMBER_ACTION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_GUILDMEMBER_ACTION* internal_default_instance() {
    return reinterpret_cast<const SC_GUILDMEMBER_ACTION*>(
               &_SC_GUILDMEMBER_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SC_GUILDMEMBER_ACTION& a, SC_GUILDMEMBER_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_GUILDMEMBER_ACTION* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_GUILDMEMBER_ACTION* New() const final {
    return CreateMaybeMessage<SC_GUILDMEMBER_ACTION>(nullptr);
  }

  SC_GUILDMEMBER_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_GUILDMEMBER_ACTION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_GUILDMEMBER_ACTION& from);
  void MergeFrom(const SC_GUILDMEMBER_ACTION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_GUILDMEMBER_ACTION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_GUILDMEMBER_ACTION";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_GUILDMEMBER_ACTION_Action Action;
  static constexpr Action GUILD_CREATE =
    SC_GUILDMEMBER_ACTION_Action_GUILD_CREATE;
  static constexpr Action GUILD_DESTORY =
    SC_GUILDMEMBER_ACTION_Action_GUILD_DESTORY;
  static constexpr Action GUILD_ADDMEBER =
    SC_GUILDMEMBER_ACTION_Action_GUILD_ADDMEBER;
  static constexpr Action GUILD_CHANGE_LEADER =
    SC_GUILDMEMBER_ACTION_Action_GUILD_CHANGE_LEADER;
  static constexpr Action GUILD_QUIT =
    SC_GUILDMEMBER_ACTION_Action_GUILD_QUIT;
  static constexpr Action GUILD_KICKMEMBER =
    SC_GUILDMEMBER_ACTION_Action_GUILD_KICKMEMBER;
  static constexpr Action GUILD_ACCEPTAPPLY =
    SC_GUILDMEMBER_ACTION_Action_GUILD_ACCEPTAPPLY;
  static constexpr Action GUILD_MEMBER_LEV_CHG =
    SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_LEV_CHG;
  static constexpr Action GUILD_MEMBER_NAME_CHG =
    SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_NAME_CHG;
  static constexpr Action GUILD_MEMBER_ONLINE_CHG =
    SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_ONLINE_CHG;
  static constexpr Action GUILD_MEMBER_RANK_CHG =
    SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_RANK_CHG;
  static constexpr Action GUILD_MEMBER_SCORE_CHG =
    SC_GUILDMEMBER_ACTION_Action_GUILD_MEMBER_SCORE_CHG;
  static inline bool Action_IsValid(int value) {
    return SC_GUILDMEMBER_ACTION_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    SC_GUILDMEMBER_ACTION_Action_Action_MIN;
  static constexpr Action Action_MAX =
    SC_GUILDMEMBER_ACTION_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    SC_GUILDMEMBER_ACTION_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return SC_GUILDMEMBER_ACTION_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return SC_GUILDMEMBER_ACTION_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return SC_GUILDMEMBER_ACTION_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemberNameFieldNumber = 5,
    kOperatorIdFieldNumber = 2,
    kActionFieldNumber = 1,
    kMemberLevFieldNumber = 4,
    kMemberIdFieldNumber = 3,
    kMemberOnlineFieldNumber = 6,
    kMemberRankFieldNumber = 7,
    kMemberScoreFieldNumber = 8,
    kMemberLastLogoutFieldNumber = 9,
  };
  // string member_name = 5;
  void clear_member_name();
  const std::string& member_name() const;
  void set_member_name(const std::string& value);
  void set_member_name(std::string&& value);
  void set_member_name(const char* value);
  void set_member_name(const char* value, size_t size);
  std::string* mutable_member_name();
  std::string* release_member_name();
  void set_allocated_member_name(std::string* member_name);
  private:
  const std::string& _internal_member_name() const;
  void _internal_set_member_name(const std::string& value);
  std::string* _internal_mutable_member_name();
  public:

  // uint64 operator_id = 2;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .SC_GUILDMEMBER_ACTION.Action action = 1;
  void clear_action();
  ::SC_GUILDMEMBER_ACTION_Action action() const;
  void set_action(::SC_GUILDMEMBER_ACTION_Action value);
  private:
  ::SC_GUILDMEMBER_ACTION_Action _internal_action() const;
  void _internal_set_action(::SC_GUILDMEMBER_ACTION_Action value);
  public:

  // uint32 member_lev = 4;
  void clear_member_lev();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_lev() const;
  void set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_lev() const;
  void _internal_set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 member_id = 3;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool member_online = 6;
  void clear_member_online();
  bool member_online() const;
  void set_member_online(bool value);
  private:
  bool _internal_member_online() const;
  void _internal_set_member_online(bool value);
  public:

  // uint32 member_rank = 7;
  void clear_member_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_rank() const;
  void set_member_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_rank() const;
  void _internal_set_member_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 member_score = 8;
  void clear_member_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_score() const;
  void set_member_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_score() const;
  void _internal_set_member_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 member_last_logout = 9;
  void clear_member_last_logout();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_last_logout() const;
  void set_member_last_logout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_last_logout() const;
  void _internal_set_member_last_logout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_GUILDMEMBER_ACTION)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_id_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_lev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  bool member_online_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_last_logout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDAPPLYMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDAPPLYMEMBER) */ {
 public:
  CS_GUILDAPPLYMEMBER();
  virtual ~CS_GUILDAPPLYMEMBER();

  CS_GUILDAPPLYMEMBER(const CS_GUILDAPPLYMEMBER& from);
  CS_GUILDAPPLYMEMBER(CS_GUILDAPPLYMEMBER&& from) noexcept
    : CS_GUILDAPPLYMEMBER() {
    *this = ::std::move(from);
  }

  inline CS_GUILDAPPLYMEMBER& operator=(const CS_GUILDAPPLYMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDAPPLYMEMBER& operator=(CS_GUILDAPPLYMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDAPPLYMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDAPPLYMEMBER* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDAPPLYMEMBER*>(
               &_CS_GUILDAPPLYMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CS_GUILDAPPLYMEMBER& a, CS_GUILDAPPLYMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDAPPLYMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDAPPLYMEMBER* New() const final {
    return CreateMaybeMessage<CS_GUILDAPPLYMEMBER>(nullptr);
  }

  CS_GUILDAPPLYMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDAPPLYMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDAPPLYMEMBER& from);
  void MergeFrom(const CS_GUILDAPPLYMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDAPPLYMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDAPPLYMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespondentIdFieldNumber = 1,
  };
  // uint64 respondent_id = 1;
  void clear_respondent_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 respondent_id() const;
  void set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_respondent_id() const;
  void _internal_set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDAPPLYMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 respondent_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_GUILDAPPLYMEMBER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_GUILDAPPLYMEMBER) */ {
 public:
  SC_GUILDAPPLYMEMBER();
  virtual ~SC_GUILDAPPLYMEMBER();

  SC_GUILDAPPLYMEMBER(const SC_GUILDAPPLYMEMBER& from);
  SC_GUILDAPPLYMEMBER(SC_GUILDAPPLYMEMBER&& from) noexcept
    : SC_GUILDAPPLYMEMBER() {
    *this = ::std::move(from);
  }

  inline SC_GUILDAPPLYMEMBER& operator=(const SC_GUILDAPPLYMEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_GUILDAPPLYMEMBER& operator=(SC_GUILDAPPLYMEMBER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_GUILDAPPLYMEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_GUILDAPPLYMEMBER* internal_default_instance() {
    return reinterpret_cast<const SC_GUILDAPPLYMEMBER*>(
               &_SC_GUILDAPPLYMEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SC_GUILDAPPLYMEMBER& a, SC_GUILDAPPLYMEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_GUILDAPPLYMEMBER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_GUILDAPPLYMEMBER* New() const final {
    return CreateMaybeMessage<SC_GUILDAPPLYMEMBER>(nullptr);
  }

  SC_GUILDAPPLYMEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_GUILDAPPLYMEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_GUILDAPPLYMEMBER& from);
  void MergeFrom(const SC_GUILDAPPLYMEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_GUILDAPPLYMEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_GUILDAPPLYMEMBER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicantNameFieldNumber = 2,
    kApplicantIdFieldNumber = 1,
  };
  // string applicant_name = 2;
  void clear_applicant_name();
  const std::string& applicant_name() const;
  void set_applicant_name(const std::string& value);
  void set_applicant_name(std::string&& value);
  void set_applicant_name(const char* value);
  void set_applicant_name(const char* value, size_t size);
  std::string* mutable_applicant_name();
  std::string* release_applicant_name();
  void set_allocated_applicant_name(std::string* applicant_name);
  private:
  const std::string& _internal_applicant_name() const;
  void _internal_set_applicant_name(const std::string& value);
  std::string* _internal_mutable_applicant_name();
  public:

  // uint64 applicant_id = 1;
  void clear_applicant_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id() const;
  void set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_applicant_id() const;
  void _internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_GUILDAPPLYMEMBER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicant_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_GUILDACCEPTAPPLY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_GUILDACCEPTAPPLY) */ {
 public:
  CS_GUILDACCEPTAPPLY();
  virtual ~CS_GUILDACCEPTAPPLY();

  CS_GUILDACCEPTAPPLY(const CS_GUILDACCEPTAPPLY& from);
  CS_GUILDACCEPTAPPLY(CS_GUILDACCEPTAPPLY&& from) noexcept
    : CS_GUILDACCEPTAPPLY() {
    *this = ::std::move(from);
  }

  inline CS_GUILDACCEPTAPPLY& operator=(const CS_GUILDACCEPTAPPLY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GUILDACCEPTAPPLY& operator=(CS_GUILDACCEPTAPPLY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_GUILDACCEPTAPPLY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_GUILDACCEPTAPPLY* internal_default_instance() {
    return reinterpret_cast<const CS_GUILDACCEPTAPPLY*>(
               &_CS_GUILDACCEPTAPPLY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CS_GUILDACCEPTAPPLY& a, CS_GUILDACCEPTAPPLY& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GUILDACCEPTAPPLY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_GUILDACCEPTAPPLY* New() const final {
    return CreateMaybeMessage<CS_GUILDACCEPTAPPLY>(nullptr);
  }

  CS_GUILDACCEPTAPPLY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_GUILDACCEPTAPPLY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_GUILDACCEPTAPPLY& from);
  void MergeFrom(const CS_GUILDACCEPTAPPLY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GUILDACCEPTAPPLY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_GUILDACCEPTAPPLY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fzone_5fservice_2eproto);
    return ::descriptor_table_msg_2fzone_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicantIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // uint64 applicant_id = 1;
  void clear_applicant_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id() const;
  void set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_applicant_id() const;
  void _internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CS_GUILDACCEPTAPPLY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fzone_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_LOADMAP

// uint32 mapid = 1;
inline void SC_LOADMAP::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_LOADMAP::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_LOADMAP::mapid() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.mapid)
  return _internal_mapid();
}
inline void SC_LOADMAP::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SC_LOADMAP::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_LOADMAP.mapid)
}

// float posx = 3;
inline void SC_LOADMAP::clear_posx() {
  posx_ = 0;
}
inline float SC_LOADMAP::_internal_posx() const {
  return posx_;
}
inline float SC_LOADMAP::posx() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.posx)
  return _internal_posx();
}
inline void SC_LOADMAP::_internal_set_posx(float value) {
  
  posx_ = value;
}
inline void SC_LOADMAP::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:SC_LOADMAP.posx)
}

// float posy = 4;
inline void SC_LOADMAP::clear_posy() {
  posy_ = 0;
}
inline float SC_LOADMAP::_internal_posy() const {
  return posy_;
}
inline float SC_LOADMAP::posy() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.posy)
  return _internal_posy();
}
inline void SC_LOADMAP::_internal_set_posy(float value) {
  
  posy_ = value;
}
inline void SC_LOADMAP::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:SC_LOADMAP.posy)
}

// float face = 5;
inline void SC_LOADMAP::clear_face() {
  face_ = 0;
}
inline float SC_LOADMAP::_internal_face() const {
  return face_;
}
inline float SC_LOADMAP::face() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.face)
  return _internal_face();
}
inline void SC_LOADMAP::_internal_set_face(float value) {
  
  face_ = value;
}
inline void SC_LOADMAP::set_face(float value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:SC_LOADMAP.face)
}

// -------------------------------------------------------------------

// CS_LOADMAP_SUCC

// -------------------------------------------------------------------

// SC_PLAYERINFO

// uint64 playerid = 1;
inline void SC_PLAYERINFO::clear_playerid() {
  playerid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_PLAYERINFO::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_PLAYERINFO::playerid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.playerid)
  return _internal_playerid();
}
inline void SC_PLAYERINFO::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void SC_PLAYERINFO::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.playerid)
}

// uint32 worldid = 2;
inline void SC_PLAYERINFO::clear_worldid() {
  worldid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::worldid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.worldid)
  return _internal_worldid();
}
inline void SC_PLAYERINFO::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  worldid_ = value;
}
inline void SC_PLAYERINFO::set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.worldid)
}

// string name = 3;
inline void SC_PLAYERINFO::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_PLAYERINFO::name() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.name)
  return _internal_name();
}
inline void SC_PLAYERINFO::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.name)
}
inline std::string* SC_PLAYERINFO::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SC_PLAYERINFO.name)
  return _internal_mutable_name();
}
inline const std::string& SC_PLAYERINFO::_internal_name() const {
  return name_.GetNoArena();
}
inline void SC_PLAYERINFO::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_PLAYERINFO::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_PLAYERINFO.name)
}
inline void SC_PLAYERINFO::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_PLAYERINFO.name)
}
inline void SC_PLAYERINFO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_PLAYERINFO.name)
}
inline std::string* SC_PLAYERINFO::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_PLAYERINFO::release_name() {
  // @@protoc_insertion_point(field_release:SC_PLAYERINFO.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_PLAYERINFO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_PLAYERINFO.name)
}

// uint32 prof = 4;
inline void SC_PLAYERINFO::clear_prof() {
  prof_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_prof() const {
  return prof_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::prof() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.prof)
  return _internal_prof();
}
inline void SC_PLAYERINFO::_internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prof_ = value;
}
inline void SC_PLAYERINFO::set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prof(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.prof)
}

// uint32 baselook = 5;
inline void SC_PLAYERINFO::clear_baselook() {
  baselook_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_baselook() const {
  return baselook_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::baselook() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.baselook)
  return _internal_baselook();
}
inline void SC_PLAYERINFO::_internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baselook_ = value;
}
inline void SC_PLAYERINFO::set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baselook(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.baselook)
}

// uint32 exp = 6;
inline void SC_PLAYERINFO::clear_exp() {
  exp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::exp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.exp)
  return _internal_exp();
}
inline void SC_PLAYERINFO::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_ = value;
}
inline void SC_PLAYERINFO::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.exp)
}

// uint32 level = 7;
inline void SC_PLAYERINFO::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::level() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.level)
  return _internal_level();
}
inline void SC_PLAYERINFO::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void SC_PLAYERINFO::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.level)
}

// uint32 viplev = 8;
inline void SC_PLAYERINFO::clear_viplev() {
  viplev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_viplev() const {
  return viplev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::viplev() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.viplev)
  return _internal_viplev();
}
inline void SC_PLAYERINFO::_internal_set_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  viplev_ = value;
}
inline void SC_PLAYERINFO::set_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viplev(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.viplev)
}

// uint32 pkval = 9;
inline void SC_PLAYERINFO::clear_pkval() {
  pkval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_pkval() const {
  return pkval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::pkval() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.pkval)
  return _internal_pkval();
}
inline void SC_PLAYERINFO::_internal_set_pkval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pkval_ = value;
}
inline void SC_PLAYERINFO::set_pkval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pkval(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.pkval)
}

// uint32 honor = 10;
inline void SC_PLAYERINFO::clear_honor() {
  honor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_honor() const {
  return honor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::honor() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.honor)
  return _internal_honor();
}
inline void SC_PLAYERINFO::_internal_set_honor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  honor_ = value;
}
inline void SC_PLAYERINFO::set_honor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_honor(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.honor)
}

// uint32 campid = 11;
inline void SC_PLAYERINFO::clear_campid() {
  campid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_campid() const {
  return campid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::campid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.campid)
  return _internal_campid();
}
inline void SC_PLAYERINFO::_internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  campid_ = value;
}
inline void SC_PLAYERINFO::set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.campid)
}

// uint32 money = 12;
inline void SC_PLAYERINFO::clear_money() {
  money_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::money() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.money)
  return _internal_money();
}
inline void SC_PLAYERINFO::_internal_set_money(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  money_ = value;
}
inline void SC_PLAYERINFO::set_money(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.money)
}

// uint32 money_bind = 13;
inline void SC_PLAYERINFO::clear_money_bind() {
  money_bind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_money_bind() const {
  return money_bind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::money_bind() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.money_bind)
  return _internal_money_bind();
}
inline void SC_PLAYERINFO::_internal_set_money_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  money_bind_ = value;
}
inline void SC_PLAYERINFO::set_money_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_money_bind(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.money_bind)
}

// uint32 gold = 14;
inline void SC_PLAYERINFO::clear_gold() {
  gold_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::gold() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.gold)
  return _internal_gold();
}
inline void SC_PLAYERINFO::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gold_ = value;
}
inline void SC_PLAYERINFO::set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.gold)
}

// uint32 gold_bind = 15;
inline void SC_PLAYERINFO::clear_gold_bind() {
  gold_bind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_gold_bind() const {
  return gold_bind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::gold_bind() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.gold_bind)
  return _internal_gold_bind();
}
inline void SC_PLAYERINFO::_internal_set_gold_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gold_bind_ = value;
}
inline void SC_PLAYERINFO::set_gold_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gold_bind(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.gold_bind)
}

// uint32 bag_size = 16;
inline void SC_PLAYERINFO::clear_bag_size() {
  bag_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_bag_size() const {
  return bag_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::bag_size() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.bag_size)
  return _internal_bag_size();
}
inline void SC_PLAYERINFO::_internal_set_bag_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bag_size_ = value;
}
inline void SC_PLAYERINFO::set_bag_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bag_size(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.bag_size)
}

// uint32 stroge_size = 17;
inline void SC_PLAYERINFO::clear_stroge_size() {
  stroge_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_stroge_size() const {
  return stroge_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::stroge_size() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.stroge_size)
  return _internal_stroge_size();
}
inline void SC_PLAYERINFO::_internal_set_stroge_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stroge_size_ = value;
}
inline void SC_PLAYERINFO::set_stroge_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stroge_size(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.stroge_size)
}

// uint32 achi_point = 18;
inline void SC_PLAYERINFO::clear_achi_point() {
  achi_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_achi_point() const {
  return achi_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::achi_point() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.achi_point)
  return _internal_achi_point();
}
inline void SC_PLAYERINFO::_internal_set_achi_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achi_point_ = value;
}
inline void SC_PLAYERINFO::set_achi_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achi_point(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.achi_point)
}

// uint32 hp = 30;
inline void SC_PLAYERINFO::clear_hp() {
  hp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::hp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.hp)
  return _internal_hp();
}
inline void SC_PLAYERINFO::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hp_ = value;
}
inline void SC_PLAYERINFO::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.hp)
}

// uint32 mp = 31;
inline void SC_PLAYERINFO::clear_mp() {
  mp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::mp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.mp)
  return _internal_mp();
}
inline void SC_PLAYERINFO::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mp_ = value;
}
inline void SC_PLAYERINFO::set_mp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.mp)
}

// uint32 fp = 32;
inline void SC_PLAYERINFO::clear_fp() {
  fp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_fp() const {
  return fp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::fp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.fp)
  return _internal_fp();
}
inline void SC_PLAYERINFO::_internal_set_fp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fp_ = value;
}
inline void SC_PLAYERINFO::set_fp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fp(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.fp)
}

// uint32 np = 33;
inline void SC_PLAYERINFO::clear_np() {
  np_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::_internal_np() const {
  return np_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_PLAYERINFO::np() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.np)
  return _internal_np();
}
inline void SC_PLAYERINFO::_internal_set_np(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  np_ = value;
}
inline void SC_PLAYERINFO::set_np(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_np(value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.np)
}

// -------------------------------------------------------------------

// SC_ACTORATTRIB

// repeated uint32 attrib_list = 1;
inline int SC_ACTORATTRIB::_internal_attrib_list_size() const {
  return attrib_list_.size();
}
inline int SC_ACTORATTRIB::attrib_list_size() const {
  return _internal_attrib_list_size();
}
inline void SC_ACTORATTRIB::clear_attrib_list() {
  attrib_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORATTRIB::_internal_attrib_list(int index) const {
  return attrib_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORATTRIB::attrib_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACTORATTRIB.attrib_list)
  return _internal_attrib_list(index);
}
inline void SC_ACTORATTRIB::set_attrib_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attrib_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_ACTORATTRIB.attrib_list)
}
inline void SC_ACTORATTRIB::_internal_add_attrib_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attrib_list_.Add(value);
}
inline void SC_ACTORATTRIB::add_attrib_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attrib_list(value);
  // @@protoc_insertion_point(field_add:SC_ACTORATTRIB.attrib_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SC_ACTORATTRIB::_internal_attrib_list() const {
  return attrib_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SC_ACTORATTRIB::attrib_list() const {
  // @@protoc_insertion_point(field_list:SC_ACTORATTRIB.attrib_list)
  return _internal_attrib_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SC_ACTORATTRIB::_internal_mutable_attrib_list() {
  return &attrib_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SC_ACTORATTRIB::mutable_attrib_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACTORATTRIB.attrib_list)
  return _internal_mutable_attrib_list();
}

// -------------------------------------------------------------------

// SC_COMMONDATA_Data

// uint32 keyidx = 1;
inline void SC_COMMONDATA_Data::clear_keyidx() {
  keyidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COMMONDATA_Data::_internal_keyidx() const {
  return keyidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COMMONDATA_Data::keyidx() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.keyidx)
  return _internal_keyidx();
}
inline void SC_COMMONDATA_Data::_internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyidx_ = value;
}
inline void SC_COMMONDATA_Data::set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyidx(value);
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.keyidx)
}

// uint64 data0 = 2;
inline void SC_COMMONDATA_Data::clear_data0() {
  data0_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::_internal_data0() const {
  return data0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::data0() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data0)
  return _internal_data0();
}
inline void SC_COMMONDATA_Data::_internal_set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data0_ = value;
}
inline void SC_COMMONDATA_Data::set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data0(value);
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data0)
}

// uint64 data1 = 3;
inline void SC_COMMONDATA_Data::clear_data1() {
  data1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::_internal_data1() const {
  return data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::data1() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data1)
  return _internal_data1();
}
inline void SC_COMMONDATA_Data::_internal_set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data1_ = value;
}
inline void SC_COMMONDATA_Data::set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data1(value);
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data1)
}

// uint64 data2 = 4;
inline void SC_COMMONDATA_Data::clear_data2() {
  data2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::_internal_data2() const {
  return data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::data2() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data2)
  return _internal_data2();
}
inline void SC_COMMONDATA_Data::_internal_set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data2_ = value;
}
inline void SC_COMMONDATA_Data::set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data2)
}

// uint64 data3 = 5;
inline void SC_COMMONDATA_Data::clear_data3() {
  data3_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::_internal_data3() const {
  return data3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_COMMONDATA_Data::data3() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data3)
  return _internal_data3();
}
inline void SC_COMMONDATA_Data::_internal_set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data3_ = value;
}
inline void SC_COMMONDATA_Data::set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data3(value);
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data3)
}

// -------------------------------------------------------------------

// SC_COMMONDATA

// repeated .SC_COMMONDATA.Data datalist = 1;
inline int SC_COMMONDATA::_internal_datalist_size() const {
  return datalist_.size();
}
inline int SC_COMMONDATA::datalist_size() const {
  return _internal_datalist_size();
}
inline void SC_COMMONDATA::clear_datalist() {
  datalist_.Clear();
}
inline ::SC_COMMONDATA_Data* SC_COMMONDATA::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_COMMONDATA.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COMMONDATA_Data >*
SC_COMMONDATA::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_COMMONDATA.datalist)
  return &datalist_;
}
inline const ::SC_COMMONDATA_Data& SC_COMMONDATA::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::SC_COMMONDATA_Data& SC_COMMONDATA::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.datalist)
  return _internal_datalist(index);
}
inline ::SC_COMMONDATA_Data* SC_COMMONDATA::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::SC_COMMONDATA_Data* SC_COMMONDATA::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_COMMONDATA.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COMMONDATA_Data >&
SC_COMMONDATA::datalist() const {
  // @@protoc_insertion_point(field_list:SC_COMMONDATA.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// SC_DATACOUNT_Data

// uint32 type = 1;
inline void SC_DATACOUNT_Data::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::type() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.type)
  return _internal_type();
}
inline void SC_DATACOUNT_Data::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void SC_DATACOUNT_Data::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.type)
}

// uint32 idx = 2;
inline void SC_DATACOUNT_Data::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::idx() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.idx)
  return _internal_idx();
}
inline void SC_DATACOUNT_Data::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void SC_DATACOUNT_Data::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.idx)
}

// uint64 data = 3;
inline void SC_DATACOUNT_Data::clear_data() {
  data_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DATACOUNT_Data::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DATACOUNT_Data::data() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.data)
  return _internal_data();
}
inline void SC_DATACOUNT_Data::_internal_set_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_ = value;
}
inline void SC_DATACOUNT_Data::set_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.data)
}

// uint32 next_reset_time = 4;
inline void SC_DATACOUNT_Data::clear_next_reset_time() {
  next_reset_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::_internal_next_reset_time() const {
  return next_reset_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DATACOUNT_Data::next_reset_time() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.next_reset_time)
  return _internal_next_reset_time();
}
inline void SC_DATACOUNT_Data::_internal_set_next_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_reset_time_ = value;
}
inline void SC_DATACOUNT_Data::set_next_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_reset_time(value);
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.next_reset_time)
}

// -------------------------------------------------------------------

// SC_DATACOUNT

// repeated .SC_DATACOUNT.Data datalist = 1;
inline int SC_DATACOUNT::_internal_datalist_size() const {
  return datalist_.size();
}
inline int SC_DATACOUNT::datalist_size() const {
  return _internal_datalist_size();
}
inline void SC_DATACOUNT::clear_datalist() {
  datalist_.Clear();
}
inline ::SC_DATACOUNT_Data* SC_DATACOUNT::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DATACOUNT.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DATACOUNT_Data >*
SC_DATACOUNT::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_DATACOUNT.datalist)
  return &datalist_;
}
inline const ::SC_DATACOUNT_Data& SC_DATACOUNT::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::SC_DATACOUNT_Data& SC_DATACOUNT::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.datalist)
  return _internal_datalist(index);
}
inline ::SC_DATACOUNT_Data* SC_DATACOUNT::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::SC_DATACOUNT_Data* SC_DATACOUNT::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_DATACOUNT.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DATACOUNT_Data >&
SC_DATACOUNT::datalist() const {
  // @@protoc_insertion_point(field_list:SC_DATACOUNT.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// SC_COOLDOWN_Data

// uint32 type = 1;
inline void SC_COOLDOWN_Data::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::type() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.type)
  return _internal_type();
}
inline void SC_COOLDOWN_Data::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void SC_COOLDOWN_Data::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.type)
}

// uint32 idx = 2;
inline void SC_COOLDOWN_Data::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::idx() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.idx)
  return _internal_idx();
}
inline void SC_COOLDOWN_Data::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void SC_COOLDOWN_Data::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.idx)
}

// uint32 expiretime = 3;
inline void SC_COOLDOWN_Data::clear_expiretime() {
  expiretime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::_internal_expiretime() const {
  return expiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_COOLDOWN_Data::expiretime() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.expiretime)
  return _internal_expiretime();
}
inline void SC_COOLDOWN_Data::_internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiretime_ = value;
}
inline void SC_COOLDOWN_Data::set_expiretime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.expiretime)
}

// -------------------------------------------------------------------

// SC_COOLDOWN

// repeated .SC_COOLDOWN.Data datalist = 1;
inline int SC_COOLDOWN::_internal_datalist_size() const {
  return datalist_.size();
}
inline int SC_COOLDOWN::datalist_size() const {
  return _internal_datalist_size();
}
inline void SC_COOLDOWN::clear_datalist() {
  datalist_.Clear();
}
inline ::SC_COOLDOWN_Data* SC_COOLDOWN::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_COOLDOWN.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COOLDOWN_Data >*
SC_COOLDOWN::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_COOLDOWN.datalist)
  return &datalist_;
}
inline const ::SC_COOLDOWN_Data& SC_COOLDOWN::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::SC_COOLDOWN_Data& SC_COOLDOWN::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.datalist)
  return _internal_datalist(index);
}
inline ::SC_COOLDOWN_Data* SC_COOLDOWN::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::SC_COOLDOWN_Data* SC_COOLDOWN::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_COOLDOWN.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_COOLDOWN_Data >&
SC_COOLDOWN::datalist() const {
  // @@protoc_insertion_point(field_list:SC_COOLDOWN.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// SC_SYSVAR_Data

// uint32 keyidx = 1;
inline void SC_SYSVAR_Data::clear_keyidx() {
  keyidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SYSVAR_Data::_internal_keyidx() const {
  return keyidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SYSVAR_Data::keyidx() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.keyidx)
  return _internal_keyidx();
}
inline void SC_SYSVAR_Data::_internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyidx_ = value;
}
inline void SC_SYSVAR_Data::set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyidx(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.keyidx)
}

// uint64 data0 = 2;
inline void SC_SYSVAR_Data::clear_data0() {
  data0_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::_internal_data0() const {
  return data0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::data0() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data0)
  return _internal_data0();
}
inline void SC_SYSVAR_Data::_internal_set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data0_ = value;
}
inline void SC_SYSVAR_Data::set_data0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data0(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data0)
}

// uint64 data1 = 3;
inline void SC_SYSVAR_Data::clear_data1() {
  data1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::_internal_data1() const {
  return data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::data1() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data1)
  return _internal_data1();
}
inline void SC_SYSVAR_Data::_internal_set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data1_ = value;
}
inline void SC_SYSVAR_Data::set_data1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data1(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data1)
}

// uint64 data2 = 4;
inline void SC_SYSVAR_Data::clear_data2() {
  data2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::_internal_data2() const {
  return data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::data2() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data2)
  return _internal_data2();
}
inline void SC_SYSVAR_Data::_internal_set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data2_ = value;
}
inline void SC_SYSVAR_Data::set_data2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data2)
}

// uint64 data3 = 5;
inline void SC_SYSVAR_Data::clear_data3() {
  data3_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::_internal_data3() const {
  return data3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SYSVAR_Data::data3() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data3)
  return _internal_data3();
}
inline void SC_SYSVAR_Data::_internal_set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data3_ = value;
}
inline void SC_SYSVAR_Data::set_data3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data3(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data3)
}

// string str0 = 6;
inline void SC_SYSVAR_Data::clear_str0() {
  str0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_SYSVAR_Data::str0() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str0)
  return _internal_str0();
}
inline void SC_SYSVAR_Data::set_str0(const std::string& value) {
  _internal_set_str0(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str0)
}
inline std::string* SC_SYSVAR_Data::mutable_str0() {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str0)
  return _internal_mutable_str0();
}
inline const std::string& SC_SYSVAR_Data::_internal_str0() const {
  return str0_.GetNoArena();
}
inline void SC_SYSVAR_Data::_internal_set_str0(const std::string& value) {
  
  str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_SYSVAR_Data::set_str0(std::string&& value) {
  
  str0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SYSVAR.Data.str0)
}
inline void SC_SYSVAR_Data::set_str0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str0)
}
inline void SC_SYSVAR_Data::set_str0(const char* value, size_t size) {
  
  str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str0)
}
inline std::string* SC_SYSVAR_Data::_internal_mutable_str0() {
  
  return str0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_SYSVAR_Data::release_str0() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str0)
  
  return str0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_SYSVAR_Data::set_allocated_str0(std::string* str0) {
  if (str0 != nullptr) {
    
  } else {
    
  }
  str0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str0);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str0)
}

// string str1 = 7;
inline void SC_SYSVAR_Data::clear_str1() {
  str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_SYSVAR_Data::str1() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str1)
  return _internal_str1();
}
inline void SC_SYSVAR_Data::set_str1(const std::string& value) {
  _internal_set_str1(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str1)
}
inline std::string* SC_SYSVAR_Data::mutable_str1() {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str1)
  return _internal_mutable_str1();
}
inline const std::string& SC_SYSVAR_Data::_internal_str1() const {
  return str1_.GetNoArena();
}
inline void SC_SYSVAR_Data::_internal_set_str1(const std::string& value) {
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_SYSVAR_Data::set_str1(std::string&& value) {
  
  str1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SYSVAR.Data.str1)
}
inline void SC_SYSVAR_Data::set_str1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str1)
}
inline void SC_SYSVAR_Data::set_str1(const char* value, size_t size) {
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str1)
}
inline std::string* SC_SYSVAR_Data::_internal_mutable_str1() {
  
  return str1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_SYSVAR_Data::release_str1() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str1)
  
  return str1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_SYSVAR_Data::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    
  } else {
    
  }
  str1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str1)
}

// string str2 = 8;
inline void SC_SYSVAR_Data::clear_str2() {
  str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_SYSVAR_Data::str2() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str2)
  return _internal_str2();
}
inline void SC_SYSVAR_Data::set_str2(const std::string& value) {
  _internal_set_str2(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str2)
}
inline std::string* SC_SYSVAR_Data::mutable_str2() {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str2)
  return _internal_mutable_str2();
}
inline const std::string& SC_SYSVAR_Data::_internal_str2() const {
  return str2_.GetNoArena();
}
inline void SC_SYSVAR_Data::_internal_set_str2(const std::string& value) {
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_SYSVAR_Data::set_str2(std::string&& value) {
  
  str2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SYSVAR.Data.str2)
}
inline void SC_SYSVAR_Data::set_str2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str2)
}
inline void SC_SYSVAR_Data::set_str2(const char* value, size_t size) {
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str2)
}
inline std::string* SC_SYSVAR_Data::_internal_mutable_str2() {
  
  return str2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_SYSVAR_Data::release_str2() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str2)
  
  return str2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_SYSVAR_Data::set_allocated_str2(std::string* str2) {
  if (str2 != nullptr) {
    
  } else {
    
  }
  str2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str2)
}

// string str3 = 9;
inline void SC_SYSVAR_Data::clear_str3() {
  str3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_SYSVAR_Data::str3() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str3)
  return _internal_str3();
}
inline void SC_SYSVAR_Data::set_str3(const std::string& value) {
  _internal_set_str3(value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str3)
}
inline std::string* SC_SYSVAR_Data::mutable_str3() {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str3)
  return _internal_mutable_str3();
}
inline const std::string& SC_SYSVAR_Data::_internal_str3() const {
  return str3_.GetNoArena();
}
inline void SC_SYSVAR_Data::_internal_set_str3(const std::string& value) {
  
  str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_SYSVAR_Data::set_str3(std::string&& value) {
  
  str3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SYSVAR.Data.str3)
}
inline void SC_SYSVAR_Data::set_str3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str3)
}
inline void SC_SYSVAR_Data::set_str3(const char* value, size_t size) {
  
  str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str3)
}
inline std::string* SC_SYSVAR_Data::_internal_mutable_str3() {
  
  return str3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_SYSVAR_Data::release_str3() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str3)
  
  return str3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_SYSVAR_Data::set_allocated_str3(std::string* str3) {
  if (str3 != nullptr) {
    
  } else {
    
  }
  str3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str3);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str3)
}

// -------------------------------------------------------------------

// SC_SYSVAR

// repeated .SC_SYSVAR.Data datalist = 1;
inline int SC_SYSVAR::_internal_datalist_size() const {
  return datalist_.size();
}
inline int SC_SYSVAR::datalist_size() const {
  return _internal_datalist_size();
}
inline void SC_SYSVAR::clear_datalist() {
  datalist_.Clear();
}
inline ::SC_SYSVAR_Data* SC_SYSVAR::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SYSVAR_Data >*
SC_SYSVAR::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_SYSVAR.datalist)
  return &datalist_;
}
inline const ::SC_SYSVAR_Data& SC_SYSVAR::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::SC_SYSVAR_Data& SC_SYSVAR::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.datalist)
  return _internal_datalist(index);
}
inline ::SC_SYSVAR_Data* SC_SYSVAR::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::SC_SYSVAR_Data* SC_SYSVAR::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_SYSVAR.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SYSVAR_Data >&
SC_SYSVAR::datalist() const {
  // @@protoc_insertion_point(field_list:SC_SYSVAR.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// SC_ENTERMAP

// float x = 1;
inline void SC_ENTERMAP::clear_x() {
  x_ = 0;
}
inline float SC_ENTERMAP::_internal_x() const {
  return x_;
}
inline float SC_ENTERMAP::x() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.x)
  return _internal_x();
}
inline void SC_ENTERMAP::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SC_ENTERMAP::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.x)
}

// float y = 2;
inline void SC_ENTERMAP::clear_y() {
  y_ = 0;
}
inline float SC_ENTERMAP::_internal_y() const {
  return y_;
}
inline float SC_ENTERMAP::y() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.y)
  return _internal_y();
}
inline void SC_ENTERMAP::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SC_ENTERMAP::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.y)
}

// float face = 3;
inline void SC_ENTERMAP::clear_face() {
  face_ = 0;
}
inline float SC_ENTERMAP::_internal_face() const {
  return face_;
}
inline float SC_ENTERMAP::face() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.face)
  return _internal_face();
}
inline void SC_ENTERMAP::_internal_set_face(float value) {
  
  face_ = value;
}
inline void SC_ENTERMAP::set_face(float value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.face)
}

// -------------------------------------------------------------------

// SC_AOI_NEW

// uint32 mapid = 1;
inline void SC_AOI_NEW::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.mapid)
  return _internal_mapid();
}
inline void SC_AOI_NEW::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SC_AOI_NEW::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.mapid)
}

// uint64 actor_id = 2;
inline void SC_AOI_NEW::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_NEW::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_NEW::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.actor_id)
  return _internal_actor_id();
}
inline void SC_AOI_NEW::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_AOI_NEW::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.actor_id)
}

// string name = 3;
inline void SC_AOI_NEW::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_AOI_NEW::name() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.name)
  return _internal_name();
}
inline void SC_AOI_NEW::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.name)
}
inline std::string* SC_AOI_NEW::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SC_AOI_NEW.name)
  return _internal_mutable_name();
}
inline const std::string& SC_AOI_NEW::_internal_name() const {
  return name_.GetNoArena();
}
inline void SC_AOI_NEW::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_AOI_NEW::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_AOI_NEW.name)
}
inline void SC_AOI_NEW::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_AOI_NEW.name)
}
inline void SC_AOI_NEW::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_AOI_NEW.name)
}
inline std::string* SC_AOI_NEW::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_AOI_NEW::release_name() {
  // @@protoc_insertion_point(field_release:SC_AOI_NEW.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_AOI_NEW::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_AOI_NEW.name)
}

// uint32 actortype = 4;
inline void SC_AOI_NEW::clear_actortype() {
  actortype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_actortype() const {
  return actortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::actortype() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.actortype)
  return _internal_actortype();
}
inline void SC_AOI_NEW::_internal_set_actortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actortype_ = value;
}
inline void SC_AOI_NEW::set_actortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actortype(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.actortype)
}

// uint32 baselook = 5;
inline void SC_AOI_NEW::clear_baselook() {
  baselook_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_baselook() const {
  return baselook_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::baselook() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.baselook)
  return _internal_baselook();
}
inline void SC_AOI_NEW::_internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baselook_ = value;
}
inline void SC_AOI_NEW::set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baselook(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.baselook)
}

// uint32 prof = 6;
inline void SC_AOI_NEW::clear_prof() {
  prof_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_prof() const {
  return prof_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::prof() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.prof)
  return _internal_prof();
}
inline void SC_AOI_NEW::_internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prof_ = value;
}
inline void SC_AOI_NEW::set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prof(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.prof)
}

// uint32 lev = 7;
inline void SC_AOI_NEW::clear_lev() {
  lev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_lev() const {
  return lev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::lev() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.lev)
  return _internal_lev();
}
inline void SC_AOI_NEW::_internal_set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lev_ = value;
}
inline void SC_AOI_NEW::set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lev(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.lev)
}

// uint32 campid = 8;
inline void SC_AOI_NEW::clear_campid() {
  campid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_campid() const {
  return campid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::campid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.campid)
  return _internal_campid();
}
inline void SC_AOI_NEW::_internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  campid_ = value;
}
inline void SC_AOI_NEW::set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.campid)
}

// uint32 hp = 9;
inline void SC_AOI_NEW::clear_hp() {
  hp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::hp() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.hp)
  return _internal_hp();
}
inline void SC_AOI_NEW::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hp_ = value;
}
inline void SC_AOI_NEW::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.hp)
}

// uint32 hpmax = 10;
inline void SC_AOI_NEW::clear_hpmax() {
  hpmax_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_hpmax() const {
  return hpmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::hpmax() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.hpmax)
  return _internal_hpmax();
}
inline void SC_AOI_NEW::_internal_set_hpmax(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hpmax_ = value;
}
inline void SC_AOI_NEW::set_hpmax(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hpmax(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.hpmax)
}

// uint32 movespd = 11;
inline void SC_AOI_NEW::clear_movespd() {
  movespd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_movespd() const {
  return movespd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::movespd() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.movespd)
  return _internal_movespd();
}
inline void SC_AOI_NEW::_internal_set_movespd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  movespd_ = value;
}
inline void SC_AOI_NEW::set_movespd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_movespd(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.movespd)
}

// uint64 ownerid = 12;
inline void SC_AOI_NEW::clear_ownerid() {
  ownerid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_NEW::_internal_ownerid() const {
  return ownerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_NEW::ownerid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.ownerid)
  return _internal_ownerid();
}
inline void SC_AOI_NEW::_internal_set_ownerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ownerid_ = value;
}
inline void SC_AOI_NEW::set_ownerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.ownerid)
}

// float posx = 13;
inline void SC_AOI_NEW::clear_posx() {
  posx_ = 0;
}
inline float SC_AOI_NEW::_internal_posx() const {
  return posx_;
}
inline float SC_AOI_NEW::posx() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.posx)
  return _internal_posx();
}
inline void SC_AOI_NEW::_internal_set_posx(float value) {
  
  posx_ = value;
}
inline void SC_AOI_NEW::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.posx)
}

// float posy = 14;
inline void SC_AOI_NEW::clear_posy() {
  posy_ = 0;
}
inline float SC_AOI_NEW::_internal_posy() const {
  return posy_;
}
inline float SC_AOI_NEW::posy() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.posy)
  return _internal_posy();
}
inline void SC_AOI_NEW::_internal_set_posy(float value) {
  
  posy_ = value;
}
inline void SC_AOI_NEW::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.posy)
}

// float face = 15;
inline void SC_AOI_NEW::clear_face() {
  face_ = 0;
}
inline float SC_AOI_NEW::_internal_face() const {
  return face_;
}
inline float SC_AOI_NEW::face() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.face)
  return _internal_face();
}
inline void SC_AOI_NEW::_internal_set_face(float value) {
  
  face_ = value;
}
inline void SC_AOI_NEW::set_face(float value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.face)
}

// uint32 weaponid = 20;
inline void SC_AOI_NEW::clear_weaponid() {
  weaponid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::weaponid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.weaponid)
  return _internal_weaponid();
}
inline void SC_AOI_NEW::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weaponid_ = value;
}
inline void SC_AOI_NEW::set_weaponid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.weaponid)
}

// uint32 armorid = 21;
inline void SC_AOI_NEW::clear_armorid() {
  armorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_armorid() const {
  return armorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::armorid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.armorid)
  return _internal_armorid();
}
inline void SC_AOI_NEW::_internal_set_armorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  armorid_ = value;
}
inline void SC_AOI_NEW::set_armorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_armorid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.armorid)
}

// uint32 guildid = 30;
inline void SC_AOI_NEW::clear_guildid() {
  guildid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::_internal_guildid() const {
  return guildid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_NEW::guildid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.guildid)
  return _internal_guildid();
}
inline void SC_AOI_NEW::_internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guildid_ = value;
}
inline void SC_AOI_NEW::set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.guildid)
}

// string guildname = 31;
inline void SC_AOI_NEW::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_AOI_NEW::guildname() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.guildname)
  return _internal_guildname();
}
inline void SC_AOI_NEW::set_guildname(const std::string& value) {
  _internal_set_guildname(value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.guildname)
}
inline std::string* SC_AOI_NEW::mutable_guildname() {
  // @@protoc_insertion_point(field_mutable:SC_AOI_NEW.guildname)
  return _internal_mutable_guildname();
}
inline const std::string& SC_AOI_NEW::_internal_guildname() const {
  return guildname_.GetNoArena();
}
inline void SC_AOI_NEW::_internal_set_guildname(const std::string& value) {
  
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_AOI_NEW::set_guildname(std::string&& value) {
  
  guildname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_AOI_NEW.guildname)
}
inline void SC_AOI_NEW::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_AOI_NEW.guildname)
}
inline void SC_AOI_NEW::set_guildname(const char* value, size_t size) {
  
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_AOI_NEW.guildname)
}
inline std::string* SC_AOI_NEW::_internal_mutable_guildname() {
  
  return guildname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_AOI_NEW::release_guildname() {
  // @@protoc_insertion_point(field_release:SC_AOI_NEW.guildname)
  
  return guildname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_AOI_NEW::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    
  } else {
    
  }
  guildname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:SC_AOI_NEW.guildname)
}

// -------------------------------------------------------------------

// SC_AOI_REMOVE

// uint32 mapid = 1;
inline void SC_AOI_REMOVE::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_REMOVE::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_REMOVE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_REMOVE.mapid)
  return _internal_mapid();
}
inline void SC_AOI_REMOVE::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SC_AOI_REMOVE::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_REMOVE.mapid)
}

// repeated uint64 idlist = 2;
inline int SC_AOI_REMOVE::_internal_idlist_size() const {
  return idlist_.size();
}
inline int SC_AOI_REMOVE::idlist_size() const {
  return _internal_idlist_size();
}
inline void SC_AOI_REMOVE::clear_idlist() {
  idlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_REMOVE::_internal_idlist(int index) const {
  return idlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_REMOVE::idlist(int index) const {
  // @@protoc_insertion_point(field_get:SC_AOI_REMOVE.idlist)
  return _internal_idlist(index);
}
inline void SC_AOI_REMOVE::set_idlist(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  idlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_AOI_REMOVE.idlist)
}
inline void SC_AOI_REMOVE::_internal_add_idlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  idlist_.Add(value);
}
inline void SC_AOI_REMOVE::add_idlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_idlist(value);
  // @@protoc_insertion_point(field_add:SC_AOI_REMOVE.idlist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SC_AOI_REMOVE::_internal_idlist() const {
  return idlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SC_AOI_REMOVE::idlist() const {
  // @@protoc_insertion_point(field_list:SC_AOI_REMOVE.idlist)
  return _internal_idlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SC_AOI_REMOVE::_internal_mutable_idlist() {
  return &idlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SC_AOI_REMOVE::mutable_idlist() {
  // @@protoc_insertion_point(field_mutable_list:SC_AOI_REMOVE.idlist)
  return _internal_mutable_idlist();
}

// -------------------------------------------------------------------

// SC_AOI_UPDATE

// uint32 mapid = 1;
inline void SC_AOI_UPDATE::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_UPDATE::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_AOI_UPDATE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.mapid)
  return _internal_mapid();
}
inline void SC_AOI_UPDATE::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SC_AOI_UPDATE::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.mapid)
}

// uint64 actor_id = 2;
inline void SC_AOI_UPDATE::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_UPDATE::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_AOI_UPDATE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.actor_id)
  return _internal_actor_id();
}
inline void SC_AOI_UPDATE::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_AOI_UPDATE::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.actor_id)
}

// float posx = 3;
inline void SC_AOI_UPDATE::clear_posx() {
  posx_ = 0;
}
inline float SC_AOI_UPDATE::_internal_posx() const {
  return posx_;
}
inline float SC_AOI_UPDATE::posx() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.posx)
  return _internal_posx();
}
inline void SC_AOI_UPDATE::_internal_set_posx(float value) {
  
  posx_ = value;
}
inline void SC_AOI_UPDATE::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.posx)
}

// float posy = 4;
inline void SC_AOI_UPDATE::clear_posy() {
  posy_ = 0;
}
inline float SC_AOI_UPDATE::_internal_posy() const {
  return posy_;
}
inline float SC_AOI_UPDATE::posy() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.posy)
  return _internal_posy();
}
inline void SC_AOI_UPDATE::_internal_set_posy(float value) {
  
  posy_ = value;
}
inline void SC_AOI_UPDATE::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.posy)
}

// -------------------------------------------------------------------

// SC_MAPVAL_MapVal

// uint32 key = 1;
inline void SC_MAPVAL_MapVal::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_MAPVAL_MapVal::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_MAPVAL_MapVal::key() const {
  // @@protoc_insertion_point(field_get:SC_MAPVAL.MapVal.key)
  return _internal_key();
}
inline void SC_MAPVAL_MapVal::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void SC_MAPVAL_MapVal::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:SC_MAPVAL.MapVal.key)
}

// int64 value = 2;
inline void SC_MAPVAL_MapVal::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_MAPVAL_MapVal::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_MAPVAL_MapVal::value() const {
  // @@protoc_insertion_point(field_get:SC_MAPVAL.MapVal.value)
  return _internal_value();
}
inline void SC_MAPVAL_MapVal::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void SC_MAPVAL_MapVal::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:SC_MAPVAL.MapVal.value)
}

// -------------------------------------------------------------------

// SC_MAPVAL

// .SC_MAPVAL.State state = 1;
inline void SC_MAPVAL::clear_state() {
  state_ = 0;
}
inline ::SC_MAPVAL_State SC_MAPVAL::_internal_state() const {
  return static_cast< ::SC_MAPVAL_State >(state_);
}
inline ::SC_MAPVAL_State SC_MAPVAL::state() const {
  // @@protoc_insertion_point(field_get:SC_MAPVAL.state)
  return _internal_state();
}
inline void SC_MAPVAL::_internal_set_state(::SC_MAPVAL_State value) {
  
  state_ = value;
}
inline void SC_MAPVAL::set_state(::SC_MAPVAL_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SC_MAPVAL.state)
}

// repeated .SC_MAPVAL.MapVal map_val_set = 2;
inline int SC_MAPVAL::_internal_map_val_set_size() const {
  return map_val_set_.size();
}
inline int SC_MAPVAL::map_val_set_size() const {
  return _internal_map_val_set_size();
}
inline void SC_MAPVAL::clear_map_val_set() {
  map_val_set_.Clear();
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::mutable_map_val_set(int index) {
  // @@protoc_insertion_point(field_mutable:SC_MAPVAL.map_val_set)
  return map_val_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >*
SC_MAPVAL::mutable_map_val_set() {
  // @@protoc_insertion_point(field_mutable_list:SC_MAPVAL.map_val_set)
  return &map_val_set_;
}
inline const ::SC_MAPVAL_MapVal& SC_MAPVAL::_internal_map_val_set(int index) const {
  return map_val_set_.Get(index);
}
inline const ::SC_MAPVAL_MapVal& SC_MAPVAL::map_val_set(int index) const {
  // @@protoc_insertion_point(field_get:SC_MAPVAL.map_val_set)
  return _internal_map_val_set(index);
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::_internal_add_map_val_set() {
  return map_val_set_.Add();
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::add_map_val_set() {
  // @@protoc_insertion_point(field_add:SC_MAPVAL.map_val_set)
  return _internal_add_map_val_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >&
SC_MAPVAL::map_val_set() const {
  // @@protoc_insertion_point(field_list:SC_MAPVAL.map_val_set)
  return map_val_set_;
}

// repeated .SC_MAPVAL.MapVal user_map_val_set = 3;
inline int SC_MAPVAL::_internal_user_map_val_set_size() const {
  return user_map_val_set_.size();
}
inline int SC_MAPVAL::user_map_val_set_size() const {
  return _internal_user_map_val_set_size();
}
inline void SC_MAPVAL::clear_user_map_val_set() {
  user_map_val_set_.Clear();
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::mutable_user_map_val_set(int index) {
  // @@protoc_insertion_point(field_mutable:SC_MAPVAL.user_map_val_set)
  return user_map_val_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >*
SC_MAPVAL::mutable_user_map_val_set() {
  // @@protoc_insertion_point(field_mutable_list:SC_MAPVAL.user_map_val_set)
  return &user_map_val_set_;
}
inline const ::SC_MAPVAL_MapVal& SC_MAPVAL::_internal_user_map_val_set(int index) const {
  return user_map_val_set_.Get(index);
}
inline const ::SC_MAPVAL_MapVal& SC_MAPVAL::user_map_val_set(int index) const {
  // @@protoc_insertion_point(field_get:SC_MAPVAL.user_map_val_set)
  return _internal_user_map_val_set(index);
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::_internal_add_user_map_val_set() {
  return user_map_val_set_.Add();
}
inline ::SC_MAPVAL_MapVal* SC_MAPVAL::add_user_map_val_set() {
  // @@protoc_insertion_point(field_add:SC_MAPVAL.user_map_val_set)
  return _internal_add_user_map_val_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_MAPVAL_MapVal >&
SC_MAPVAL::user_map_val_set() const {
  // @@protoc_insertion_point(field_list:SC_MAPVAL.user_map_val_set)
  return user_map_val_set_;
}

// -------------------------------------------------------------------

// SC_ATTRIB_CHANGE_Data

// uint32 actype = 1;
inline void SC_ATTRIB_CHANGE_Data::clear_actype() {
  actype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ATTRIB_CHANGE_Data::_internal_actype() const {
  return actype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ATTRIB_CHANGE_Data::actype() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.actype)
  return _internal_actype();
}
inline void SC_ATTRIB_CHANGE_Data::_internal_set_actype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actype_ = value;
}
inline void SC_ATTRIB_CHANGE_Data::set_actype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actype(value);
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.actype)
}

// uint32 val = 2;
inline void SC_ATTRIB_CHANGE_Data::clear_val() {
  val_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ATTRIB_CHANGE_Data::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ATTRIB_CHANGE_Data::val() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.val)
  return _internal_val();
}
inline void SC_ATTRIB_CHANGE_Data::_internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  val_ = value;
}
inline void SC_ATTRIB_CHANGE_Data::set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.val)
}

// string valstr = 3;
inline void SC_ATTRIB_CHANGE_Data::clear_valstr() {
  valstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_ATTRIB_CHANGE_Data::valstr() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.valstr)
  return _internal_valstr();
}
inline void SC_ATTRIB_CHANGE_Data::set_valstr(const std::string& value) {
  _internal_set_valstr(value);
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.valstr)
}
inline std::string* SC_ATTRIB_CHANGE_Data::mutable_valstr() {
  // @@protoc_insertion_point(field_mutable:SC_ATTRIB_CHANGE.Data.valstr)
  return _internal_mutable_valstr();
}
inline const std::string& SC_ATTRIB_CHANGE_Data::_internal_valstr() const {
  return valstr_.GetNoArena();
}
inline void SC_ATTRIB_CHANGE_Data::_internal_set_valstr(const std::string& value) {
  
  valstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_ATTRIB_CHANGE_Data::set_valstr(std::string&& value) {
  
  valstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_ATTRIB_CHANGE.Data.valstr)
}
inline void SC_ATTRIB_CHANGE_Data::set_valstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  valstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_ATTRIB_CHANGE.Data.valstr)
}
inline void SC_ATTRIB_CHANGE_Data::set_valstr(const char* value, size_t size) {
  
  valstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_ATTRIB_CHANGE.Data.valstr)
}
inline std::string* SC_ATTRIB_CHANGE_Data::_internal_mutable_valstr() {
  
  return valstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_ATTRIB_CHANGE_Data::release_valstr() {
  // @@protoc_insertion_point(field_release:SC_ATTRIB_CHANGE.Data.valstr)
  
  return valstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_ATTRIB_CHANGE_Data::set_allocated_valstr(std::string* valstr) {
  if (valstr != nullptr) {
    
  } else {
    
  }
  valstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valstr);
  // @@protoc_insertion_point(field_set_allocated:SC_ATTRIB_CHANGE.Data.valstr)
}

// -------------------------------------------------------------------

// SC_ATTRIB_CHANGE

// uint64 actor_id = 1;
inline void SC_ATTRIB_CHANGE::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ATTRIB_CHANGE::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ATTRIB_CHANGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.actor_id)
  return _internal_actor_id();
}
inline void SC_ATTRIB_CHANGE::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_ATTRIB_CHANGE::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.actor_id)
}

// repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
inline int SC_ATTRIB_CHANGE::_internal_datalist_size() const {
  return datalist_.size();
}
inline int SC_ATTRIB_CHANGE::datalist_size() const {
  return _internal_datalist_size();
}
inline void SC_ATTRIB_CHANGE::clear_datalist() {
  datalist_.Clear();
}
inline ::SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ATTRIB_CHANGE.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >*
SC_ATTRIB_CHANGE::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_ATTRIB_CHANGE.datalist)
  return &datalist_;
}
inline const ::SC_ATTRIB_CHANGE_Data& SC_ATTRIB_CHANGE::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::SC_ATTRIB_CHANGE_Data& SC_ATTRIB_CHANGE::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.datalist)
  return _internal_datalist(index);
}
inline ::SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_ATTRIB_CHANGE.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >&
SC_ATTRIB_CHANGE::datalist() const {
  // @@protoc_insertion_point(field_list:SC_ATTRIB_CHANGE.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// SC_STATUS_LIST_Data

// uint32 statusid = 1;
inline void SC_STATUS_LIST_Data::clear_statusid() {
  statusid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::_internal_statusid() const {
  return statusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::statusid() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.Data.statusid)
  return _internal_statusid();
}
inline void SC_STATUS_LIST_Data::_internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusid_ = value;
}
inline void SC_STATUS_LIST_Data::set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statusid(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.Data.statusid)
}

// uint32 statustype = 2;
inline void SC_STATUS_LIST_Data::clear_statustype() {
  statustype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::_internal_statustype() const {
  return statustype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::statustype() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.Data.statustype)
  return _internal_statustype();
}
inline void SC_STATUS_LIST_Data::_internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statustype_ = value;
}
inline void SC_STATUS_LIST_Data::set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statustype(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.Data.statustype)
}

// uint32 statuslev = 3;
inline void SC_STATUS_LIST_Data::clear_statuslev() {
  statuslev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::_internal_statuslev() const {
  return statuslev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_LIST_Data::statuslev() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.Data.statuslev)
  return _internal_statuslev();
}
inline void SC_STATUS_LIST_Data::_internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statuslev_ = value;
}
inline void SC_STATUS_LIST_Data::set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statuslev(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.Data.statuslev)
}

// int32 power = 4;
inline void SC_STATUS_LIST_Data::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_LIST_Data::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_LIST_Data::power() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.Data.power)
  return _internal_power();
}
inline void SC_STATUS_LIST_Data::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void SC_STATUS_LIST_Data::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.Data.power)
}

// uint64 idcaster = 8;
inline void SC_STATUS_LIST_Data::clear_idcaster() {
  idcaster_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_LIST_Data::_internal_idcaster() const {
  return idcaster_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_LIST_Data::idcaster() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.Data.idcaster)
  return _internal_idcaster();
}
inline void SC_STATUS_LIST_Data::_internal_set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idcaster_ = value;
}
inline void SC_STATUS_LIST_Data::set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idcaster(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.Data.idcaster)
}

// -------------------------------------------------------------------

// SC_STATUS_LIST

// uint64 actor_id = 1;
inline void SC_STATUS_LIST::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_LIST::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_LIST::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.actor_id)
  return _internal_actor_id();
}
inline void SC_STATUS_LIST::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_STATUS_LIST::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.actor_id)
}

// repeated .SC_STATUS_LIST.Data status_list = 2;
inline int SC_STATUS_LIST::_internal_status_list_size() const {
  return status_list_.size();
}
inline int SC_STATUS_LIST::status_list_size() const {
  return _internal_status_list_size();
}
inline void SC_STATUS_LIST::clear_status_list() {
  status_list_.Clear();
}
inline ::SC_STATUS_LIST_Data* SC_STATUS_LIST::mutable_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_STATUS_LIST.status_list)
  return status_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_LIST_Data >*
SC_STATUS_LIST::mutable_status_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_STATUS_LIST.status_list)
  return &status_list_;
}
inline const ::SC_STATUS_LIST_Data& SC_STATUS_LIST::_internal_status_list(int index) const {
  return status_list_.Get(index);
}
inline const ::SC_STATUS_LIST_Data& SC_STATUS_LIST::status_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.status_list)
  return _internal_status_list(index);
}
inline ::SC_STATUS_LIST_Data* SC_STATUS_LIST::_internal_add_status_list() {
  return status_list_.Add();
}
inline ::SC_STATUS_LIST_Data* SC_STATUS_LIST::add_status_list() {
  // @@protoc_insertion_point(field_add:SC_STATUS_LIST.status_list)
  return _internal_add_status_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_LIST_Data >&
SC_STATUS_LIST::status_list() const {
  // @@protoc_insertion_point(field_list:SC_STATUS_LIST.status_list)
  return status_list_;
}

// -------------------------------------------------------------------

// SC_STATUS_INFO_Data

// uint32 statusid = 1;
inline void SC_STATUS_INFO_Data::clear_statusid() {
  statusid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::_internal_statusid() const {
  return statusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::statusid() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.statusid)
  return _internal_statusid();
}
inline void SC_STATUS_INFO_Data::_internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusid_ = value;
}
inline void SC_STATUS_INFO_Data::set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statusid(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.statusid)
}

// uint32 statustype = 2;
inline void SC_STATUS_INFO_Data::clear_statustype() {
  statustype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::_internal_statustype() const {
  return statustype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::statustype() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.statustype)
  return _internal_statustype();
}
inline void SC_STATUS_INFO_Data::_internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statustype_ = value;
}
inline void SC_STATUS_INFO_Data::set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statustype(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.statustype)
}

// uint32 statuslev = 3;
inline void SC_STATUS_INFO_Data::clear_statuslev() {
  statuslev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::_internal_statuslev() const {
  return statuslev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::statuslev() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.statuslev)
  return _internal_statuslev();
}
inline void SC_STATUS_INFO_Data::_internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statuslev_ = value;
}
inline void SC_STATUS_INFO_Data::set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statuslev(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.statuslev)
}

// int32 power = 4;
inline void SC_STATUS_INFO_Data::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::power() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.power)
  return _internal_power();
}
inline void SC_STATUS_INFO_Data::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void SC_STATUS_INFO_Data::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.power)
}

// int32 sec = 5;
inline void SC_STATUS_INFO_Data::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::sec() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.sec)
  return _internal_sec();
}
inline void SC_STATUS_INFO_Data::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void SC_STATUS_INFO_Data::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.sec)
}

// int32 times = 6;
inline void SC_STATUS_INFO_Data::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_STATUS_INFO_Data::times() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.times)
  return _internal_times();
}
inline void SC_STATUS_INFO_Data::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void SC_STATUS_INFO_Data::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.times)
}

// uint32 laststamp = 7;
inline void SC_STATUS_INFO_Data::clear_laststamp() {
  laststamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::_internal_laststamp() const {
  return laststamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_INFO_Data::laststamp() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.laststamp)
  return _internal_laststamp();
}
inline void SC_STATUS_INFO_Data::_internal_set_laststamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  laststamp_ = value;
}
inline void SC_STATUS_INFO_Data::set_laststamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_laststamp(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.laststamp)
}

// uint64 idcaster = 8;
inline void SC_STATUS_INFO_Data::clear_idcaster() {
  idcaster_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_INFO_Data::_internal_idcaster() const {
  return idcaster_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_INFO_Data::idcaster() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.idcaster)
  return _internal_idcaster();
}
inline void SC_STATUS_INFO_Data::_internal_set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idcaster_ = value;
}
inline void SC_STATUS_INFO_Data::set_idcaster(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idcaster(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.idcaster)
}

// bool ispause = 9;
inline void SC_STATUS_INFO_Data::clear_ispause() {
  ispause_ = false;
}
inline bool SC_STATUS_INFO_Data::_internal_ispause() const {
  return ispause_;
}
inline bool SC_STATUS_INFO_Data::ispause() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.ispause)
  return _internal_ispause();
}
inline void SC_STATUS_INFO_Data::_internal_set_ispause(bool value) {
  
  ispause_ = value;
}
inline void SC_STATUS_INFO_Data::set_ispause(bool value) {
  _internal_set_ispause(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.ispause)
}

// -------------------------------------------------------------------

// SC_STATUS_INFO

// uint64 actor_id = 1;
inline void SC_STATUS_INFO::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_INFO::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_INFO::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.actor_id)
  return _internal_actor_id();
}
inline void SC_STATUS_INFO::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_STATUS_INFO::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.actor_id)
}

// repeated .SC_STATUS_INFO.Data statuslist = 2;
inline int SC_STATUS_INFO::_internal_statuslist_size() const {
  return statuslist_.size();
}
inline int SC_STATUS_INFO::statuslist_size() const {
  return _internal_statuslist_size();
}
inline void SC_STATUS_INFO::clear_statuslist() {
  statuslist_.Clear();
}
inline ::SC_STATUS_INFO_Data* SC_STATUS_INFO::mutable_statuslist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_STATUS_INFO.statuslist)
  return statuslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_INFO_Data >*
SC_STATUS_INFO::mutable_statuslist() {
  // @@protoc_insertion_point(field_mutable_list:SC_STATUS_INFO.statuslist)
  return &statuslist_;
}
inline const ::SC_STATUS_INFO_Data& SC_STATUS_INFO::_internal_statuslist(int index) const {
  return statuslist_.Get(index);
}
inline const ::SC_STATUS_INFO_Data& SC_STATUS_INFO::statuslist(int index) const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.statuslist)
  return _internal_statuslist(index);
}
inline ::SC_STATUS_INFO_Data* SC_STATUS_INFO::_internal_add_statuslist() {
  return statuslist_.Add();
}
inline ::SC_STATUS_INFO_Data* SC_STATUS_INFO::add_statuslist() {
  // @@protoc_insertion_point(field_add:SC_STATUS_INFO.statuslist)
  return _internal_add_statuslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_STATUS_INFO_Data >&
SC_STATUS_INFO::statuslist() const {
  // @@protoc_insertion_point(field_list:SC_STATUS_INFO.statuslist)
  return statuslist_;
}

// -------------------------------------------------------------------

// SC_STATUS_ACTION

// uint64 actor_id = 1;
inline void SC_STATUS_ACTION::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_ACTION::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_STATUS_ACTION::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.actor_id)
  return _internal_actor_id();
}
inline void SC_STATUS_ACTION::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_STATUS_ACTION::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.actor_id)
}

// .SC_STATUS_ACTION.ACTION action = 2;
inline void SC_STATUS_ACTION::clear_action() {
  action_ = 0;
}
inline ::SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::_internal_action() const {
  return static_cast< ::SC_STATUS_ACTION_ACTION >(action_);
}
inline ::SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::action() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.action)
  return _internal_action();
}
inline void SC_STATUS_ACTION::_internal_set_action(::SC_STATUS_ACTION_ACTION value) {
  
  action_ = value;
}
inline void SC_STATUS_ACTION::set_action(::SC_STATUS_ACTION_ACTION value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.action)
}

// uint32 statusid = 3;
inline void SC_STATUS_ACTION::clear_statusid() {
  statusid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::_internal_statusid() const {
  return statusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::statusid() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.statusid)
  return _internal_statusid();
}
inline void SC_STATUS_ACTION::_internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusid_ = value;
}
inline void SC_STATUS_ACTION::set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statusid(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.statusid)
}

// uint32 statustype = 4;
inline void SC_STATUS_ACTION::clear_statustype() {
  statustype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::_internal_statustype() const {
  return statustype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::statustype() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.statustype)
  return _internal_statustype();
}
inline void SC_STATUS_ACTION::_internal_set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statustype_ = value;
}
inline void SC_STATUS_ACTION::set_statustype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statustype(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.statustype)
}

// uint32 statuslev = 5;
inline void SC_STATUS_ACTION::clear_statuslev() {
  statuslev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::_internal_statuslev() const {
  return statuslev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_STATUS_ACTION::statuslev() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.statuslev)
  return _internal_statuslev();
}
inline void SC_STATUS_ACTION::_internal_set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statuslev_ = value;
}
inline void SC_STATUS_ACTION::set_statuslev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statuslev(value);
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.statuslev)
}

// -------------------------------------------------------------------

// CS_MOVE

// uint64 mapid = 1;
inline void CS_MOVE::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_MOVE::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_MOVE::mapid() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.mapid)
  return _internal_mapid();
}
inline void CS_MOVE::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void CS_MOVE::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.mapid)
}

// float x = 2;
inline void CS_MOVE::clear_x() {
  x_ = 0;
}
inline float CS_MOVE::_internal_x() const {
  return x_;
}
inline float CS_MOVE::x() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.x)
  return _internal_x();
}
inline void CS_MOVE::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CS_MOVE::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.x)
}

// float y = 3;
inline void CS_MOVE::clear_y() {
  y_ = 0;
}
inline float CS_MOVE::_internal_y() const {
  return y_;
}
inline float CS_MOVE::y() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.y)
  return _internal_y();
}
inline void CS_MOVE::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CS_MOVE::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.y)
}

// float face = 4;
inline void CS_MOVE::clear_face() {
  face_ = 0;
}
inline float CS_MOVE::_internal_face() const {
  return face_;
}
inline float CS_MOVE::face() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.face)
  return _internal_face();
}
inline void CS_MOVE::_internal_set_face(float value) {
  
  face_ = value;
}
inline void CS_MOVE::set_face(float value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.face)
}

// -------------------------------------------------------------------

// CS_CHANGEMAP

// uint64 mapid = 1;
inline void CS_CHANGEMAP::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CHANGEMAP::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CHANGEMAP::mapid() const {
  // @@protoc_insertion_point(field_get:CS_CHANGEMAP.mapid)
  return _internal_mapid();
}
inline void CS_CHANGEMAP::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void CS_CHANGEMAP::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CS_CHANGEMAP.mapid)
}

// uint32 leavepoint_idx = 2;
inline void CS_CHANGEMAP::clear_leavepoint_idx() {
  leavepoint_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CHANGEMAP::_internal_leavepoint_idx() const {
  return leavepoint_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CHANGEMAP::leavepoint_idx() const {
  // @@protoc_insertion_point(field_get:CS_CHANGEMAP.leavepoint_idx)
  return _internal_leavepoint_idx();
}
inline void CS_CHANGEMAP::_internal_set_leavepoint_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leavepoint_idx_ = value;
}
inline void CS_CHANGEMAP::set_leavepoint_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leavepoint_idx(value);
  // @@protoc_insertion_point(field_set:CS_CHANGEMAP.leavepoint_idx)
}

// -------------------------------------------------------------------

// CS_CASTSKILL

// uint64 mapid = 1;
inline void CS_CASTSKILL::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CASTSKILL::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CASTSKILL::mapid() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.mapid)
  return _internal_mapid();
}
inline void CS_CASTSKILL::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void CS_CASTSKILL::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.mapid)
}

// uint32 skill_id = 2;
inline void CS_CASTSKILL::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CASTSKILL::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CASTSKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.skill_id)
  return _internal_skill_id();
}
inline void CS_CASTSKILL::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skill_id_ = value;
}
inline void CS_CASTSKILL::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.skill_id)
}

// uint64 target_id = 3;
inline void CS_CASTSKILL::clear_target_id() {
  target_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CASTSKILL::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_CASTSKILL::target_id() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.target_id)
  return _internal_target_id();
}
inline void CS_CASTSKILL::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_id_ = value;
}
inline void CS_CASTSKILL::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.target_id)
}

// float x = 4;
inline void CS_CASTSKILL::clear_x() {
  x_ = 0;
}
inline float CS_CASTSKILL::_internal_x() const {
  return x_;
}
inline float CS_CASTSKILL::x() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.x)
  return _internal_x();
}
inline void CS_CASTSKILL::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CS_CASTSKILL::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.x)
}

// float y = 5;
inline void CS_CASTSKILL::clear_y() {
  y_ = 0;
}
inline float CS_CASTSKILL::_internal_y() const {
  return y_;
}
inline float CS_CASTSKILL::y() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.y)
  return _internal_y();
}
inline void CS_CASTSKILL::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CS_CASTSKILL::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.y)
}

// -------------------------------------------------------------------

// SC_CASTSKILL

// uint64 mapid = 1;
inline void SC_CASTSKILL::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::mapid() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.mapid)
  return _internal_mapid();
}
inline void SC_CASTSKILL::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void SC_CASTSKILL::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.mapid)
}

// uint64 actor_id = 2;
inline void SC_CASTSKILL::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.actor_id)
  return _internal_actor_id();
}
inline void SC_CASTSKILL::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_CASTSKILL::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.actor_id)
}

// uint32 skill_id = 3;
inline void SC_CASTSKILL::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_CASTSKILL::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_CASTSKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.skill_id)
  return _internal_skill_id();
}
inline void SC_CASTSKILL::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skill_id_ = value;
}
inline void SC_CASTSKILL::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.skill_id)
}

// uint64 target_id = 4;
inline void SC_CASTSKILL::clear_target_id() {
  target_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_CASTSKILL::target_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.target_id)
  return _internal_target_id();
}
inline void SC_CASTSKILL::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_id_ = value;
}
inline void SC_CASTSKILL::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.target_id)
}

// float x = 5;
inline void SC_CASTSKILL::clear_x() {
  x_ = 0;
}
inline float SC_CASTSKILL::_internal_x() const {
  return x_;
}
inline float SC_CASTSKILL::x() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.x)
  return _internal_x();
}
inline void SC_CASTSKILL::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SC_CASTSKILL::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.x)
}

// float y = 6;
inline void SC_CASTSKILL::clear_y() {
  y_ = 0;
}
inline float SC_CASTSKILL::_internal_y() const {
  return y_;
}
inline float SC_CASTSKILL::y() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.y)
  return _internal_y();
}
inline void SC_CASTSKILL::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SC_CASTSKILL::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.y)
}

// -------------------------------------------------------------------

// SC_SKILL_DAMAGE_DamageInfo

// uint64 target_id = 1;
inline void SC_SKILL_DAMAGE_DamageInfo::clear_target_id() {
  target_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE_DamageInfo::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE_DamageInfo::target_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.DamageInfo.target_id)
  return _internal_target_id();
}
inline void SC_SKILL_DAMAGE_DamageInfo::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_id_ = value;
}
inline void SC_SKILL_DAMAGE_DamageInfo::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.DamageInfo.target_id)
}

// int32 damage = 2;
inline void SC_SKILL_DAMAGE_DamageInfo::clear_damage() {
  damage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SKILL_DAMAGE_DamageInfo::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SKILL_DAMAGE_DamageInfo::damage() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.DamageInfo.damage)
  return _internal_damage();
}
inline void SC_SKILL_DAMAGE_DamageInfo::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damage_ = value;
}
inline void SC_SKILL_DAMAGE_DamageInfo::set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.DamageInfo.damage)
}

// -------------------------------------------------------------------

// SC_SKILL_DAMAGE

// uint64 mapid = 1;
inline void SC_SKILL_DAMAGE::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.mapid)
  return _internal_mapid();
}
inline void SC_SKILL_DAMAGE::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void SC_SKILL_DAMAGE::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.mapid)
}

// uint64 actor_id = 2;
inline void SC_SKILL_DAMAGE::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_DAMAGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.actor_id)
  return _internal_actor_id();
}
inline void SC_SKILL_DAMAGE::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_SKILL_DAMAGE::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.actor_id)
}

// uint32 skill_id = 3;
inline void SC_SKILL_DAMAGE::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_DAMAGE::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_DAMAGE::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.skill_id)
  return _internal_skill_id();
}
inline void SC_SKILL_DAMAGE::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skill_id_ = value;
}
inline void SC_SKILL_DAMAGE::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.skill_id)
}

// repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
inline int SC_SKILL_DAMAGE::_internal_damagelist_size() const {
  return damagelist_.size();
}
inline int SC_SKILL_DAMAGE::damagelist_size() const {
  return _internal_damagelist_size();
}
inline void SC_SKILL_DAMAGE::clear_damagelist() {
  damagelist_.Clear();
}
inline ::SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE::mutable_damagelist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SKILL_DAMAGE.damagelist)
  return damagelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >*
SC_SKILL_DAMAGE::mutable_damagelist() {
  // @@protoc_insertion_point(field_mutable_list:SC_SKILL_DAMAGE.damagelist)
  return &damagelist_;
}
inline const ::SC_SKILL_DAMAGE_DamageInfo& SC_SKILL_DAMAGE::_internal_damagelist(int index) const {
  return damagelist_.Get(index);
}
inline const ::SC_SKILL_DAMAGE_DamageInfo& SC_SKILL_DAMAGE::damagelist(int index) const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.damagelist)
  return _internal_damagelist(index);
}
inline ::SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE::_internal_add_damagelist() {
  return damagelist_.Add();
}
inline ::SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE::add_damagelist() {
  // @@protoc_insertion_point(field_add:SC_SKILL_DAMAGE.damagelist)
  return _internal_add_damagelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >&
SC_SKILL_DAMAGE::damagelist() const {
  // @@protoc_insertion_point(field_list:SC_SKILL_DAMAGE.damagelist)
  return damagelist_;
}

// -------------------------------------------------------------------

// CS_SKILL_BREAK

// uint64 mapid = 1;
inline void CS_SKILL_BREAK::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_SKILL_BREAK::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_SKILL_BREAK::mapid() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_BREAK.mapid)
  return _internal_mapid();
}
inline void CS_SKILL_BREAK::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void CS_SKILL_BREAK::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CS_SKILL_BREAK.mapid)
}

// -------------------------------------------------------------------

// SC_SKILL_BREAK

// uint64 mapid = 1;
inline void SC_SKILL_BREAK::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_BREAK::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_BREAK::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_BREAK.mapid)
  return _internal_mapid();
}
inline void SC_SKILL_BREAK::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void SC_SKILL_BREAK::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_BREAK.mapid)
}

// uint64 actor_id = 2;
inline void SC_SKILL_BREAK::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_BREAK::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_BREAK::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_BREAK.actor_id)
  return _internal_actor_id();
}
inline void SC_SKILL_BREAK::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_SKILL_BREAK::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_BREAK.actor_id)
}

// -------------------------------------------------------------------

// CS_SKILL_CHGTARGETPOS

// float x = 1;
inline void CS_SKILL_CHGTARGETPOS::clear_x() {
  x_ = 0;
}
inline float CS_SKILL_CHGTARGETPOS::_internal_x() const {
  return x_;
}
inline float CS_SKILL_CHGTARGETPOS::x() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_CHGTARGETPOS.x)
  return _internal_x();
}
inline void CS_SKILL_CHGTARGETPOS::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CS_SKILL_CHGTARGETPOS::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CS_SKILL_CHGTARGETPOS.x)
}

// float y = 2;
inline void CS_SKILL_CHGTARGETPOS::clear_y() {
  y_ = 0;
}
inline float CS_SKILL_CHGTARGETPOS::_internal_y() const {
  return y_;
}
inline float CS_SKILL_CHGTARGETPOS::y() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_CHGTARGETPOS.y)
  return _internal_y();
}
inline void CS_SKILL_CHGTARGETPOS::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CS_SKILL_CHGTARGETPOS::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CS_SKILL_CHGTARGETPOS.y)
}

// -------------------------------------------------------------------

// SC_SKILL_STUN

// uint64 mapid = 1;
inline void SC_SKILL_STUN::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_STUN::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_STUN::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.mapid)
  return _internal_mapid();
}
inline void SC_SKILL_STUN::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void SC_SKILL_STUN::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.mapid)
}

// uint64 actor_id = 2;
inline void SC_SKILL_STUN::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_STUN::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_STUN::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.actor_id)
  return _internal_actor_id();
}
inline void SC_SKILL_STUN::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_SKILL_STUN::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.actor_id)
}

// uint32 skill_id = 3;
inline void SC_SKILL_STUN::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_STUN::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_STUN::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.skill_id)
  return _internal_skill_id();
}
inline void SC_SKILL_STUN::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skill_id_ = value;
}
inline void SC_SKILL_STUN::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.skill_id)
}

// uint32 stun_ms = 4;
inline void SC_SKILL_STUN::clear_stun_ms() {
  stun_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_STUN::_internal_stun_ms() const {
  return stun_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_STUN::stun_ms() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.stun_ms)
  return _internal_stun_ms();
}
inline void SC_SKILL_STUN::_internal_set_stun_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stun_ms_ = value;
}
inline void SC_SKILL_STUN::set_stun_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stun_ms(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.stun_ms)
}

// -------------------------------------------------------------------

// SC_SKILL_EFFACT

// uint64 mapid = 1;
inline void SC_SKILL_EFFACT::clear_mapid() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_EFFACT::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_EFFACT::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.mapid)
  return _internal_mapid();
}
inline void SC_SKILL_EFFACT::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mapid_ = value;
}
inline void SC_SKILL_EFFACT::set_mapid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.mapid)
}

// uint64 actor_id = 2;
inline void SC_SKILL_EFFACT::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_EFFACT::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_SKILL_EFFACT::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.actor_id)
  return _internal_actor_id();
}
inline void SC_SKILL_EFFACT::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_SKILL_EFFACT::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.actor_id)
}

// uint32 skill_id = 3;
inline void SC_SKILL_EFFACT::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_EFFACT::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_SKILL_EFFACT::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.skill_id)
  return _internal_skill_id();
}
inline void SC_SKILL_EFFACT::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skill_id_ = value;
}
inline void SC_SKILL_EFFACT::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.skill_id)
}

// -------------------------------------------------------------------

// SC_DAMAGE

// uint64 actor_id = 1;
inline void SC_DAMAGE::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DAMAGE::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DAMAGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.actor_id)
  return _internal_actor_id();
}
inline void SC_DAMAGE::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_DAMAGE::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_DAMAGE.actor_id)
}

// uint64 attacker_id = 2;
inline void SC_DAMAGE::clear_attacker_id() {
  attacker_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DAMAGE::_internal_attacker_id() const {
  return attacker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DAMAGE::attacker_id() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.attacker_id)
  return _internal_attacker_id();
}
inline void SC_DAMAGE::_internal_set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attacker_id_ = value;
}
inline void SC_DAMAGE::set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attacker_id(value);
  // @@protoc_insertion_point(field_set:SC_DAMAGE.attacker_id)
}

// uint32 damage = 3;
inline void SC_DAMAGE::clear_damage() {
  damage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DAMAGE::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DAMAGE::damage() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.damage)
  return _internal_damage();
}
inline void SC_DAMAGE::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  damage_ = value;
}
inline void SC_DAMAGE::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:SC_DAMAGE.damage)
}

// uint32 hittype = 4;
inline void SC_DAMAGE::clear_hittype() {
  hittype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DAMAGE::_internal_hittype() const {
  return hittype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DAMAGE::hittype() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.hittype)
  return _internal_hittype();
}
inline void SC_DAMAGE::_internal_set_hittype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hittype_ = value;
}
inline void SC_DAMAGE::set_hittype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hittype(value);
  // @@protoc_insertion_point(field_set:SC_DAMAGE.hittype)
}

// bool crtical = 5;
inline void SC_DAMAGE::clear_crtical() {
  crtical_ = false;
}
inline bool SC_DAMAGE::_internal_crtical() const {
  return crtical_;
}
inline bool SC_DAMAGE::crtical() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.crtical)
  return _internal_crtical();
}
inline void SC_DAMAGE::_internal_set_crtical(bool value) {
  
  crtical_ = value;
}
inline void SC_DAMAGE::set_crtical(bool value) {
  _internal_set_crtical(value);
  // @@protoc_insertion_point(field_set:SC_DAMAGE.crtical)
}

// -------------------------------------------------------------------

// SC_DEAD

// uint64 actor_id = 1;
inline void SC_DEAD::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DEAD::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DEAD::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_DEAD.actor_id)
  return _internal_actor_id();
}
inline void SC_DEAD::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_DEAD::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_DEAD.actor_id)
}

// uint64 attacker_id = 2;
inline void SC_DEAD::clear_attacker_id() {
  attacker_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DEAD::_internal_attacker_id() const {
  return attacker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DEAD::attacker_id() const {
  // @@protoc_insertion_point(field_get:SC_DEAD.attacker_id)
  return _internal_attacker_id();
}
inline void SC_DEAD::_internal_set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attacker_id_ = value;
}
inline void SC_DEAD::set_attacker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attacker_id(value);
  // @@protoc_insertion_point(field_set:SC_DEAD.attacker_id)
}

// -------------------------------------------------------------------

// CS_CHANGE_PKMODE

// uint32 pkmode = 1;
inline void CS_CHANGE_PKMODE::clear_pkmode() {
  pkmode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CHANGE_PKMODE::_internal_pkmode() const {
  return pkmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CHANGE_PKMODE::pkmode() const {
  // @@protoc_insertion_point(field_get:CS_CHANGE_PKMODE.pkmode)
  return _internal_pkmode();
}
inline void CS_CHANGE_PKMODE::_internal_set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pkmode_ = value;
}
inline void CS_CHANGE_PKMODE::set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pkmode(value);
  // @@protoc_insertion_point(field_set:CS_CHANGE_PKMODE.pkmode)
}

// -------------------------------------------------------------------

// SC_CHANGE_PKMODE

// uint32 pkmode = 1;
inline void SC_CHANGE_PKMODE::clear_pkmode() {
  pkmode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_CHANGE_PKMODE::_internal_pkmode() const {
  return pkmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_CHANGE_PKMODE::pkmode() const {
  // @@protoc_insertion_point(field_get:SC_CHANGE_PKMODE.pkmode)
  return _internal_pkmode();
}
inline void SC_CHANGE_PKMODE::_internal_set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pkmode_ = value;
}
inline void SC_CHANGE_PKMODE::set_pkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pkmode(value);
  // @@protoc_insertion_point(field_set:SC_CHANGE_PKMODE.pkmode)
}

// -------------------------------------------------------------------

// CS_REBORN

// uint32 reborn_type = 1;
inline void CS_REBORN::clear_reborn_type() {
  reborn_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_REBORN::_internal_reborn_type() const {
  return reborn_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_REBORN::reborn_type() const {
  // @@protoc_insertion_point(field_get:CS_REBORN.reborn_type)
  return _internal_reborn_type();
}
inline void CS_REBORN::_internal_set_reborn_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reborn_type_ = value;
}
inline void CS_REBORN::set_reborn_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reborn_type(value);
  // @@protoc_insertion_point(field_set:CS_REBORN.reborn_type)
}

// -------------------------------------------------------------------

// SC_ITEM_INFO

// uint64 actor_id = 1;
inline void SC_ITEM_INFO::clear_actor_id() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_INFO::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_INFO::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.actor_id)
  return _internal_actor_id();
}
inline void SC_ITEM_INFO::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actor_id_ = value;
}
inline void SC_ITEM_INFO::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.actor_id)
}

// uint64 item_id = 2;
inline void SC_ITEM_INFO::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_INFO::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_INFO::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.item_id)
  return _internal_item_id();
}
inline void SC_ITEM_INFO::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  item_id_ = value;
}
inline void SC_ITEM_INFO::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.item_id)
}

// uint32 position = 3;
inline void SC_ITEM_INFO::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.position)
  return _internal_position();
}
inline void SC_ITEM_INFO::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void SC_ITEM_INFO::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.position)
}

// uint32 grid = 4;
inline void SC_ITEM_INFO::clear_grid() {
  grid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_grid() const {
  return grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::grid() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.grid)
  return _internal_grid();
}
inline void SC_ITEM_INFO::_internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_ = value;
}
inline void SC_ITEM_INFO::set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.grid)
}

// uint32 pile_num = 5;
inline void SC_ITEM_INFO::clear_pile_num() {
  pile_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_pile_num() const {
  return pile_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::pile_num() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.pile_num)
  return _internal_pile_num();
}
inline void SC_ITEM_INFO::_internal_set_pile_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pile_num_ = value;
}
inline void SC_ITEM_INFO::set_pile_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pile_num(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.pile_num)
}

// uint32 dura = 6;
inline void SC_ITEM_INFO::clear_dura() {
  dura_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_dura() const {
  return dura_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::dura() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.dura)
  return _internal_dura();
}
inline void SC_ITEM_INFO::_internal_set_dura(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dura_ = value;
}
inline void SC_ITEM_INFO::set_dura(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dura(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.dura)
}

// uint32 dura_limit = 7;
inline void SC_ITEM_INFO::clear_dura_limit() {
  dura_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_dura_limit() const {
  return dura_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::dura_limit() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.dura_limit)
  return _internal_dura_limit();
}
inline void SC_ITEM_INFO::_internal_set_dura_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dura_limit_ = value;
}
inline void SC_ITEM_INFO::set_dura_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dura_limit(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.dura_limit)
}

// uint32 expire_time = 8;
inline void SC_ITEM_INFO::clear_expire_time() {
  expire_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::expire_time() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.expire_time)
  return _internal_expire_time();
}
inline void SC_ITEM_INFO::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expire_time_ = value;
}
inline void SC_ITEM_INFO::set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.expire_time)
}

// uint32 addition_lev = 9;
inline void SC_ITEM_INFO::clear_addition_lev() {
  addition_lev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_addition_lev() const {
  return addition_lev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::addition_lev() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.addition_lev)
  return _internal_addition_lev();
}
inline void SC_ITEM_INFO::_internal_set_addition_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  addition_lev_ = value;
}
inline void SC_ITEM_INFO::set_addition_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_addition_lev(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.addition_lev)
}

// uint32 flag = 10;
inline void SC_ITEM_INFO::clear_flag() {
  flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_INFO::flag() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.flag)
  return _internal_flag();
}
inline void SC_ITEM_INFO::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flag_ = value;
}
inline void SC_ITEM_INFO::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.flag)
}

// -------------------------------------------------------------------

// SC_ITEM_CHANGE_ChangeData

// .SC_ITEM_CHANGE.ChangeType change_type = 1;
inline void SC_ITEM_CHANGE_ChangeData::clear_change_type() {
  change_type_ = 0;
}
inline ::SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE_ChangeData::_internal_change_type() const {
  return static_cast< ::SC_ITEM_CHANGE_ChangeType >(change_type_);
}
inline ::SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE_ChangeData::change_type() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.ChangeData.change_type)
  return _internal_change_type();
}
inline void SC_ITEM_CHANGE_ChangeData::_internal_set_change_type(::SC_ITEM_CHANGE_ChangeType value) {
  
  change_type_ = value;
}
inline void SC_ITEM_CHANGE_ChangeData::set_change_type(::SC_ITEM_CHANGE_ChangeType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.ChangeData.change_type)
}

// uint32 value = 2;
inline void SC_ITEM_CHANGE_ChangeData::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_CHANGE_ChangeData::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_CHANGE_ChangeData::value() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.ChangeData.value)
  return _internal_value();
}
inline void SC_ITEM_CHANGE_ChangeData::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void SC_ITEM_CHANGE_ChangeData::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.ChangeData.value)
}

// -------------------------------------------------------------------

// SC_ITEM_CHANGE

// uint64 item_id = 1;
inline void SC_ITEM_CHANGE::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_CHANGE::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_CHANGE::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.item_id)
  return _internal_item_id();
}
inline void SC_ITEM_CHANGE::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  item_id_ = value;
}
inline void SC_ITEM_CHANGE::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.item_id)
}

// uint32 position = 2;
inline void SC_ITEM_CHANGE::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_CHANGE::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_CHANGE::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.position)
  return _internal_position();
}
inline void SC_ITEM_CHANGE::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void SC_ITEM_CHANGE::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.position)
}

// repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
inline int SC_ITEM_CHANGE::_internal_change_list_size() const {
  return change_list_.size();
}
inline int SC_ITEM_CHANGE::change_list_size() const {
  return _internal_change_list_size();
}
inline void SC_ITEM_CHANGE::clear_change_list() {
  change_list_.Clear();
}
inline ::SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE::mutable_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ITEM_CHANGE.change_list)
  return change_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >*
SC_ITEM_CHANGE::mutable_change_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ITEM_CHANGE.change_list)
  return &change_list_;
}
inline const ::SC_ITEM_CHANGE_ChangeData& SC_ITEM_CHANGE::_internal_change_list(int index) const {
  return change_list_.Get(index);
}
inline const ::SC_ITEM_CHANGE_ChangeData& SC_ITEM_CHANGE::change_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.change_list)
  return _internal_change_list(index);
}
inline ::SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE::_internal_add_change_list() {
  return change_list_.Add();
}
inline ::SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE::add_change_list() {
  // @@protoc_insertion_point(field_add:SC_ITEM_CHANGE.change_list)
  return _internal_add_change_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >&
SC_ITEM_CHANGE::change_list() const {
  // @@protoc_insertion_point(field_list:SC_ITEM_CHANGE.change_list)
  return change_list_;
}

// -------------------------------------------------------------------

// SC_ITEM_DELETE

// uint64 item_id = 1;
inline void SC_ITEM_DELETE::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_DELETE::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ITEM_DELETE::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.item_id)
  return _internal_item_id();
}
inline void SC_ITEM_DELETE::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  item_id_ = value;
}
inline void SC_ITEM_DELETE::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.item_id)
}

// uint32 position = 2;
inline void SC_ITEM_DELETE::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_DELETE::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_DELETE::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.position)
  return _internal_position();
}
inline void SC_ITEM_DELETE::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void SC_ITEM_DELETE::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.position)
}

// uint32 grid = 3;
inline void SC_ITEM_DELETE::clear_grid() {
  grid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_DELETE::_internal_grid() const {
  return grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ITEM_DELETE::grid() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.grid)
  return _internal_grid();
}
inline void SC_ITEM_DELETE::_internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_ = value;
}
inline void SC_ITEM_DELETE::set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid(value);
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.grid)
}

// -------------------------------------------------------------------

// CS_ITEM_SWAP

// uint32 position = 1;
inline void CS_ITEM_SWAP::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.position)
  return _internal_position();
}
inline void CS_ITEM_SWAP::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void CS_ITEM_SWAP::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.position)
}

// uint32 grid1 = 2;
inline void CS_ITEM_SWAP::clear_grid1() {
  grid1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::_internal_grid1() const {
  return grid1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.grid1)
  return _internal_grid1();
}
inline void CS_ITEM_SWAP::_internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid1_ = value;
}
inline void CS_ITEM_SWAP::set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid1(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.grid1)
}

// uint32 grid2 = 3;
inline void CS_ITEM_SWAP::clear_grid2() {
  grid2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::_internal_grid2() const {
  return grid2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SWAP::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.grid2)
  return _internal_grid2();
}
inline void CS_ITEM_SWAP::_internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid2_ = value;
}
inline void CS_ITEM_SWAP::set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid2(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.grid2)
}

// -------------------------------------------------------------------

// CS_ITEM_SPLIT

// uint32 position = 1;
inline void CS_ITEM_SPLIT::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.position)
  return _internal_position();
}
inline void CS_ITEM_SPLIT::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void CS_ITEM_SPLIT::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.position)
}

// uint32 grid1 = 2;
inline void CS_ITEM_SPLIT::clear_grid1() {
  grid1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::_internal_grid1() const {
  return grid1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.grid1)
  return _internal_grid1();
}
inline void CS_ITEM_SPLIT::_internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid1_ = value;
}
inline void CS_ITEM_SPLIT::set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid1(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.grid1)
}

// uint32 grid2 = 3;
inline void CS_ITEM_SPLIT::clear_grid2() {
  grid2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::_internal_grid2() const {
  return grid2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.grid2)
  return _internal_grid2();
}
inline void CS_ITEM_SPLIT::_internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid2_ = value;
}
inline void CS_ITEM_SPLIT::set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid2(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.grid2)
}

// uint32 split_num = 4;
inline void CS_ITEM_SPLIT::clear_split_num() {
  split_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::_internal_split_num() const {
  return split_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_SPLIT::split_num() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.split_num)
  return _internal_split_num();
}
inline void CS_ITEM_SPLIT::_internal_set_split_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  split_num_ = value;
}
inline void CS_ITEM_SPLIT::set_split_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_split_num(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.split_num)
}

// -------------------------------------------------------------------

// CS_ITEM_COMBINE

// uint32 position = 1;
inline void CS_ITEM_COMBINE::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.position)
  return _internal_position();
}
inline void CS_ITEM_COMBINE::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void CS_ITEM_COMBINE::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.position)
}

// uint32 grid1 = 2;
inline void CS_ITEM_COMBINE::clear_grid1() {
  grid1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::_internal_grid1() const {
  return grid1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.grid1)
  return _internal_grid1();
}
inline void CS_ITEM_COMBINE::_internal_set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid1_ = value;
}
inline void CS_ITEM_COMBINE::set_grid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid1(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.grid1)
}

// uint32 grid2 = 3;
inline void CS_ITEM_COMBINE::clear_grid2() {
  grid2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::_internal_grid2() const {
  return grid2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_COMBINE::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.grid2)
  return _internal_grid2();
}
inline void CS_ITEM_COMBINE::_internal_set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid2_ = value;
}
inline void CS_ITEM_COMBINE::set_grid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid2(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.grid2)
}

// -------------------------------------------------------------------

// CS_ITEM_TIDY

// uint32 position = 1;
inline void CS_ITEM_TIDY::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_TIDY::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_TIDY::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_TIDY.position)
  return _internal_position();
}
inline void CS_ITEM_TIDY::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void CS_ITEM_TIDY::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_TIDY.position)
}

// -------------------------------------------------------------------

// CS_ITEM_USE

// uint32 grid = 1;
inline void CS_ITEM_USE::clear_grid() {
  grid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_USE::_internal_grid() const {
  return grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_USE::grid() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_USE.grid)
  return _internal_grid();
}
inline void CS_ITEM_USE::_internal_set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_ = value;
}
inline void CS_ITEM_USE::set_grid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_USE.grid)
}

// uint32 count = 2;
inline void CS_ITEM_USE::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_USE::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_USE::count() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_USE.count)
  return _internal_count();
}
inline void CS_ITEM_USE::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void CS_ITEM_USE::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_USE.count)
}

// -------------------------------------------------------------------

// CS_ITEM_STORAGE_OPEN

// -------------------------------------------------------------------

// CS_ITEM_STORAGE_CHECKOUT

// uint32 grid_in_storage = 1;
inline void CS_ITEM_STORAGE_CHECKOUT::clear_grid_in_storage() {
  grid_in_storage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_STORAGE_CHECKOUT::_internal_grid_in_storage() const {
  return grid_in_storage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_STORAGE_CHECKOUT::grid_in_storage() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_STORAGE_CHECKOUT.grid_in_storage)
  return _internal_grid_in_storage();
}
inline void CS_ITEM_STORAGE_CHECKOUT::_internal_set_grid_in_storage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_in_storage_ = value;
}
inline void CS_ITEM_STORAGE_CHECKOUT::set_grid_in_storage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid_in_storage(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_STORAGE_CHECKOUT.grid_in_storage)
}

// -------------------------------------------------------------------

// CS_ITEM_STORAGE_CHECKIN

// uint32 grid_in_package = 1;
inline void CS_ITEM_STORAGE_CHECKIN::clear_grid_in_package() {
  grid_in_package_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_STORAGE_CHECKIN::_internal_grid_in_package() const {
  return grid_in_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ITEM_STORAGE_CHECKIN::grid_in_package() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_STORAGE_CHECKIN.grid_in_package)
  return _internal_grid_in_package();
}
inline void CS_ITEM_STORAGE_CHECKIN::_internal_set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_in_package_ = value;
}
inline void CS_ITEM_STORAGE_CHECKIN::set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid_in_package(value);
  // @@protoc_insertion_point(field_set:CS_ITEM_STORAGE_CHECKIN.grid_in_package)
}

// -------------------------------------------------------------------

// CS_EQUIP

// uint32 grid_in_package = 1;
inline void CS_EQUIP::clear_grid_in_package() {
  grid_in_package_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_EQUIP::_internal_grid_in_package() const {
  return grid_in_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_EQUIP::grid_in_package() const {
  // @@protoc_insertion_point(field_get:CS_EQUIP.grid_in_package)
  return _internal_grid_in_package();
}
inline void CS_EQUIP::_internal_set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_in_package_ = value;
}
inline void CS_EQUIP::set_grid_in_package(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid_in_package(value);
  // @@protoc_insertion_point(field_set:CS_EQUIP.grid_in_package)
}

// uint32 grid_in_equip = 2;
inline void CS_EQUIP::clear_grid_in_equip() {
  grid_in_equip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_EQUIP::_internal_grid_in_equip() const {
  return grid_in_equip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_EQUIP::grid_in_equip() const {
  // @@protoc_insertion_point(field_get:CS_EQUIP.grid_in_equip)
  return _internal_grid_in_equip();
}
inline void CS_EQUIP::_internal_set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_in_equip_ = value;
}
inline void CS_EQUIP::set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid_in_equip(value);
  // @@protoc_insertion_point(field_set:CS_EQUIP.grid_in_equip)
}

// -------------------------------------------------------------------

// CS_UNEQUIP

// uint32 grid_in_equip = 1;
inline void CS_UNEQUIP::clear_grid_in_equip() {
  grid_in_equip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_UNEQUIP::_internal_grid_in_equip() const {
  return grid_in_equip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_UNEQUIP::grid_in_equip() const {
  // @@protoc_insertion_point(field_get:CS_UNEQUIP.grid_in_equip)
  return _internal_grid_in_equip();
}
inline void CS_UNEQUIP::_internal_set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grid_in_equip_ = value;
}
inline void CS_UNEQUIP::set_grid_in_equip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grid_in_equip(value);
  // @@protoc_insertion_point(field_set:CS_UNEQUIP.grid_in_equip)
}

// -------------------------------------------------------------------

// CS_TALK

// .TalkChannel channel = 1;
inline void CS_TALK::clear_channel() {
  channel_ = 0;
}
inline ::TalkChannel CS_TALK::_internal_channel() const {
  return static_cast< ::TalkChannel >(channel_);
}
inline ::TalkChannel CS_TALK::channel() const {
  // @@protoc_insertion_point(field_get:CS_TALK.channel)
  return _internal_channel();
}
inline void CS_TALK::_internal_set_channel(::TalkChannel value) {
  
  channel_ = value;
}
inline void CS_TALK::set_channel(::TalkChannel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CS_TALK.channel)
}

// string words = 2;
inline void CS_TALK::clear_words() {
  words_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_TALK::words() const {
  // @@protoc_insertion_point(field_get:CS_TALK.words)
  return _internal_words();
}
inline void CS_TALK::set_words(const std::string& value) {
  _internal_set_words(value);
  // @@protoc_insertion_point(field_set:CS_TALK.words)
}
inline std::string* CS_TALK::mutable_words() {
  // @@protoc_insertion_point(field_mutable:CS_TALK.words)
  return _internal_mutable_words();
}
inline const std::string& CS_TALK::_internal_words() const {
  return words_.GetNoArena();
}
inline void CS_TALK::_internal_set_words(const std::string& value) {
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_TALK::set_words(std::string&& value) {
  
  words_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_TALK.words)
}
inline void CS_TALK::set_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_TALK.words)
}
inline void CS_TALK::set_words(const char* value, size_t size) {
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_TALK.words)
}
inline std::string* CS_TALK::_internal_mutable_words() {
  
  return words_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_TALK::release_words() {
  // @@protoc_insertion_point(field_release:CS_TALK.words)
  
  return words_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_TALK::set_allocated_words(std::string* words) {
  if (words != nullptr) {
    
  } else {
    
  }
  words_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), words);
  // @@protoc_insertion_point(field_set_allocated:CS_TALK.words)
}

// uint64 reciver_id = 3;
inline void CS_TALK::clear_reciver_id() {
  reciver_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TALK::_internal_reciver_id() const {
  return reciver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TALK::reciver_id() const {
  // @@protoc_insertion_point(field_get:CS_TALK.reciver_id)
  return _internal_reciver_id();
}
inline void CS_TALK::_internal_set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reciver_id_ = value;
}
inline void CS_TALK::set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reciver_id(value);
  // @@protoc_insertion_point(field_set:CS_TALK.reciver_id)
}

// -------------------------------------------------------------------

// SC_TALK

// .TalkChannel channel = 1;
inline void SC_TALK::clear_channel() {
  channel_ = 0;
}
inline ::TalkChannel SC_TALK::_internal_channel() const {
  return static_cast< ::TalkChannel >(channel_);
}
inline ::TalkChannel SC_TALK::channel() const {
  // @@protoc_insertion_point(field_get:SC_TALK.channel)
  return _internal_channel();
}
inline void SC_TALK::_internal_set_channel(::TalkChannel value) {
  
  channel_ = value;
}
inline void SC_TALK::set_channel(::TalkChannel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:SC_TALK.channel)
}

// string words = 2;
inline void SC_TALK::clear_words() {
  words_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_TALK::words() const {
  // @@protoc_insertion_point(field_get:SC_TALK.words)
  return _internal_words();
}
inline void SC_TALK::set_words(const std::string& value) {
  _internal_set_words(value);
  // @@protoc_insertion_point(field_set:SC_TALK.words)
}
inline std::string* SC_TALK::mutable_words() {
  // @@protoc_insertion_point(field_mutable:SC_TALK.words)
  return _internal_mutable_words();
}
inline const std::string& SC_TALK::_internal_words() const {
  return words_.GetNoArena();
}
inline void SC_TALK::_internal_set_words(const std::string& value) {
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_TALK::set_words(std::string&& value) {
  
  words_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TALK.words)
}
inline void SC_TALK::set_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TALK.words)
}
inline void SC_TALK::set_words(const char* value, size_t size) {
  
  words_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TALK.words)
}
inline std::string* SC_TALK::_internal_mutable_words() {
  
  return words_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_TALK::release_words() {
  // @@protoc_insertion_point(field_release:SC_TALK.words)
  
  return words_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TALK::set_allocated_words(std::string* words) {
  if (words != nullptr) {
    
  } else {
    
  }
  words_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), words);
  // @@protoc_insertion_point(field_set_allocated:SC_TALK.words)
}

// uint64 sender_id = 4;
inline void SC_TALK::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TALK::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TALK::sender_id() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_id)
  return _internal_sender_id();
}
inline void SC_TALK::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sender_id_ = value;
}
inline void SC_TALK::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:SC_TALK.sender_id)
}

// string sender_name = 5;
inline void SC_TALK::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_TALK::sender_name() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_name)
  return _internal_sender_name();
}
inline void SC_TALK::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:SC_TALK.sender_name)
}
inline std::string* SC_TALK::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:SC_TALK.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& SC_TALK::_internal_sender_name() const {
  return sender_name_.GetNoArena();
}
inline void SC_TALK::_internal_set_sender_name(const std::string& value) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_TALK::set_sender_name(std::string&& value) {
  
  sender_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TALK.sender_name)
}
inline void SC_TALK::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TALK.sender_name)
}
inline void SC_TALK::set_sender_name(const char* value, size_t size) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TALK.sender_name)
}
inline std::string* SC_TALK::_internal_mutable_sender_name() {
  
  return sender_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_TALK::release_sender_name() {
  // @@protoc_insertion_point(field_release:SC_TALK.sender_name)
  
  return sender_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TALK::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TALK.sender_name)
}

// uint32 sender_sign = 6;
inline void SC_TALK::clear_sender_sign() {
  sender_sign_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::_internal_sender_sign() const {
  return sender_sign_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::sender_sign() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_sign)
  return _internal_sender_sign();
}
inline void SC_TALK::_internal_set_sender_sign(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sender_sign_ = value;
}
inline void SC_TALK::set_sender_sign(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sender_sign(value);
  // @@protoc_insertion_point(field_set:SC_TALK.sender_sign)
}

// uint32 sender_viplev = 7;
inline void SC_TALK::clear_sender_viplev() {
  sender_viplev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::_internal_sender_viplev() const {
  return sender_viplev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::sender_viplev() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_viplev)
  return _internal_sender_viplev();
}
inline void SC_TALK::_internal_set_sender_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sender_viplev_ = value;
}
inline void SC_TALK::set_sender_viplev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sender_viplev(value);
  // @@protoc_insertion_point(field_set:SC_TALK.sender_viplev)
}

// uint32 send_time = 8;
inline void SC_TALK::clear_send_time() {
  send_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TALK::send_time() const {
  // @@protoc_insertion_point(field_get:SC_TALK.send_time)
  return _internal_send_time();
}
inline void SC_TALK::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_time_ = value;
}
inline void SC_TALK::set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:SC_TALK.send_time)
}

// uint64 reciver_id = 9;
inline void SC_TALK::clear_reciver_id() {
  reciver_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TALK::_internal_reciver_id() const {
  return reciver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TALK::reciver_id() const {
  // @@protoc_insertion_point(field_get:SC_TALK.reciver_id)
  return _internal_reciver_id();
}
inline void SC_TALK::_internal_set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reciver_id_ = value;
}
inline void SC_TALK::set_reciver_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reciver_id(value);
  // @@protoc_insertion_point(field_set:SC_TALK.reciver_id)
}

// repeated .SC_ITEM_INFO item_list = 20;
inline int SC_TALK::_internal_item_list_size() const {
  return item_list_.size();
}
inline int SC_TALK::item_list_size() const {
  return _internal_item_list_size();
}
inline void SC_TALK::clear_item_list() {
  item_list_.Clear();
}
inline ::SC_ITEM_INFO* SC_TALK::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TALK.item_list)
  return item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_INFO >*
SC_TALK::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TALK.item_list)
  return &item_list_;
}
inline const ::SC_ITEM_INFO& SC_TALK::_internal_item_list(int index) const {
  return item_list_.Get(index);
}
inline const ::SC_ITEM_INFO& SC_TALK::item_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TALK.item_list)
  return _internal_item_list(index);
}
inline ::SC_ITEM_INFO* SC_TALK::_internal_add_item_list() {
  return item_list_.Add();
}
inline ::SC_ITEM_INFO* SC_TALK::add_item_list() {
  // @@protoc_insertion_point(field_add:SC_TALK.item_list)
  return _internal_add_item_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ITEM_INFO >&
SC_TALK::item_list() const {
  // @@protoc_insertion_point(field_list:SC_TALK.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// SC_TASK_INFO_Info

// uint64 task_id = 1;
inline void SC_TASK_INFO_Info::clear_task_id() {
  task_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TASK_INFO_Info::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TASK_INFO_Info::task_id() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.task_id)
  return _internal_task_id();
}
inline void SC_TASK_INFO_Info::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  task_id_ = value;
}
inline void SC_TASK_INFO_Info::set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.task_id)
}

// uint32 accept_time = 2;
inline void SC_TASK_INFO_Info::clear_accept_time() {
  accept_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_accept_time() const {
  return accept_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::accept_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.accept_time)
  return _internal_accept_time();
}
inline void SC_TASK_INFO_Info::_internal_set_accept_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accept_time_ = value;
}
inline void SC_TASK_INFO_Info::set_accept_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accept_time(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.accept_time)
}

// uint32 finish_time = 3;
inline void SC_TASK_INFO_Info::clear_finish_time() {
  finish_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_finish_time() const {
  return finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::finish_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.finish_time)
  return _internal_finish_time();
}
inline void SC_TASK_INFO_Info::_internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finish_time_ = value;
}
inline void SC_TASK_INFO_Info::set_finish_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finish_time(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.finish_time)
}

// uint32 expire_time = 4;
inline void SC_TASK_INFO_Info::clear_expire_time() {
  expire_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::expire_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.expire_time)
  return _internal_expire_time();
}
inline void SC_TASK_INFO_Info::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expire_time_ = value;
}
inline void SC_TASK_INFO_Info::set_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.expire_time)
}

// uint32 daycount = 5;
inline void SC_TASK_INFO_Info::clear_daycount() {
  daycount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_daycount() const {
  return daycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::daycount() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.daycount)
  return _internal_daycount();
}
inline void SC_TASK_INFO_Info::_internal_set_daycount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  daycount_ = value;
}
inline void SC_TASK_INFO_Info::set_daycount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_daycount(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.daycount)
}

// uint32 daycount_max = 6;
inline void SC_TASK_INFO_Info::clear_daycount_max() {
  daycount_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_daycount_max() const {
  return daycount_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::daycount_max() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.daycount_max)
  return _internal_daycount_max();
}
inline void SC_TASK_INFO_Info::_internal_set_daycount_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  daycount_max_ = value;
}
inline void SC_TASK_INFO_Info::set_daycount_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_daycount_max(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.daycount_max)
}

// uint32 state = 7;
inline void SC_TASK_INFO_Info::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::state() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.state)
  return _internal_state();
}
inline void SC_TASK_INFO_Info::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void SC_TASK_INFO_Info::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.state)
}

// uint32 num1 = 10;
inline void SC_TASK_INFO_Info::clear_num1() {
  num1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_num1() const {
  return num1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::num1() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num1)
  return _internal_num1();
}
inline void SC_TASK_INFO_Info::_internal_set_num1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num1_ = value;
}
inline void SC_TASK_INFO_Info::set_num1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num1(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num1)
}

// uint32 num2 = 11;
inline void SC_TASK_INFO_Info::clear_num2() {
  num2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_num2() const {
  return num2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::num2() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num2)
  return _internal_num2();
}
inline void SC_TASK_INFO_Info::_internal_set_num2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num2_ = value;
}
inline void SC_TASK_INFO_Info::set_num2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num2(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num2)
}

// uint32 num3 = 12;
inline void SC_TASK_INFO_Info::clear_num3() {
  num3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_num3() const {
  return num3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::num3() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num3)
  return _internal_num3();
}
inline void SC_TASK_INFO_Info::_internal_set_num3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num3_ = value;
}
inline void SC_TASK_INFO_Info::set_num3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num3(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num3)
}

// uint32 num4 = 13;
inline void SC_TASK_INFO_Info::clear_num4() {
  num4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::_internal_num4() const {
  return num4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_INFO_Info::num4() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num4)
  return _internal_num4();
}
inline void SC_TASK_INFO_Info::_internal_set_num4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num4_ = value;
}
inline void SC_TASK_INFO_Info::set_num4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num4(value);
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num4)
}

// -------------------------------------------------------------------

// SC_TASK_INFO

// repeated .SC_TASK_INFO.Info task_info_list = 1;
inline int SC_TASK_INFO::_internal_task_info_list_size() const {
  return task_info_list_.size();
}
inline int SC_TASK_INFO::task_info_list_size() const {
  return _internal_task_info_list_size();
}
inline void SC_TASK_INFO::clear_task_info_list() {
  task_info_list_.Clear();
}
inline ::SC_TASK_INFO_Info* SC_TASK_INFO::mutable_task_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TASK_INFO.task_info_list)
  return task_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_TASK_INFO_Info >*
SC_TASK_INFO::mutable_task_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TASK_INFO.task_info_list)
  return &task_info_list_;
}
inline const ::SC_TASK_INFO_Info& SC_TASK_INFO::_internal_task_info_list(int index) const {
  return task_info_list_.Get(index);
}
inline const ::SC_TASK_INFO_Info& SC_TASK_INFO::task_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.task_info_list)
  return _internal_task_info_list(index);
}
inline ::SC_TASK_INFO_Info* SC_TASK_INFO::_internal_add_task_info_list() {
  return task_info_list_.Add();
}
inline ::SC_TASK_INFO_Info* SC_TASK_INFO::add_task_info_list() {
  // @@protoc_insertion_point(field_add:SC_TASK_INFO.task_info_list)
  return _internal_add_task_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_TASK_INFO_Info >&
SC_TASK_INFO::task_info_list() const {
  // @@protoc_insertion_point(field_list:SC_TASK_INFO.task_info_list)
  return task_info_list_;
}

// -------------------------------------------------------------------

// SC_TASK_DATA

// uint64 task_id = 1;
inline void SC_TASK_DATA::clear_task_id() {
  task_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TASK_DATA::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TASK_DATA::task_id() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.task_id)
  return _internal_task_id();
}
inline void SC_TASK_DATA::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  task_id_ = value;
}
inline void SC_TASK_DATA::set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.task_id)
}

// uint32 idx = 2;
inline void SC_TASK_DATA::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_DATA::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_DATA::idx() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.idx)
  return _internal_idx();
}
inline void SC_TASK_DATA::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void SC_TASK_DATA::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.idx)
}

// uint32 num = 3;
inline void SC_TASK_DATA::clear_num() {
  num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_DATA::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TASK_DATA::num() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.num)
  return _internal_num();
}
inline void SC_TASK_DATA::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ = value;
}
inline void SC_TASK_DATA::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.num)
}

// -------------------------------------------------------------------

// CS_TASK_SUBMIT

// uint64 task_id = 1;
inline void CS_TASK_SUBMIT::clear_task_id() {
  task_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TASK_SUBMIT::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TASK_SUBMIT::task_id() const {
  // @@protoc_insertion_point(field_get:CS_TASK_SUBMIT.task_id)
  return _internal_task_id();
}
inline void CS_TASK_SUBMIT::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  task_id_ = value;
}
inline void CS_TASK_SUBMIT::set_task_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:CS_TASK_SUBMIT.task_id)
}

// uint32 submit_multiple = 2;
inline void CS_TASK_SUBMIT::clear_submit_multiple() {
  submit_multiple_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_TASK_SUBMIT::_internal_submit_multiple() const {
  return submit_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_TASK_SUBMIT::submit_multiple() const {
  // @@protoc_insertion_point(field_get:CS_TASK_SUBMIT.submit_multiple)
  return _internal_submit_multiple();
}
inline void CS_TASK_SUBMIT::_internal_set_submit_multiple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  submit_multiple_ = value;
}
inline void CS_TASK_SUBMIT::set_submit_multiple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_submit_multiple(value);
  // @@protoc_insertion_point(field_set:CS_TASK_SUBMIT.submit_multiple)
}

// -------------------------------------------------------------------

// CS_ACTIVE_NPC

// uint64 npc_id = 1;
inline void CS_ACTIVE_NPC::clear_npc_id() {
  npc_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ACTIVE_NPC::_internal_npc_id() const {
  return npc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ACTIVE_NPC::npc_id() const {
  // @@protoc_insertion_point(field_get:CS_ACTIVE_NPC.npc_id)
  return _internal_npc_id();
}
inline void CS_ACTIVE_NPC::_internal_set_npc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_id_ = value;
}
inline void CS_ACTIVE_NPC::set_npc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_npc_id(value);
  // @@protoc_insertion_point(field_set:CS_ACTIVE_NPC.npc_id)
}

// -------------------------------------------------------------------

// SC_DIALOG_dialog_link

// uint32 style = 1;
inline void SC_DIALOG_dialog_link::clear_style() {
  style_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DIALOG_dialog_link::_internal_style() const {
  return style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DIALOG_dialog_link::style() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link.style)
  return _internal_style();
}
inline void SC_DIALOG_dialog_link::_internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  style_ = value;
}
inline void SC_DIALOG_dialog_link::set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_link.style)
}

// string txt = 2;
inline void SC_DIALOG_dialog_link::clear_txt() {
  txt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_DIALOG_dialog_link::txt() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link.txt)
  return _internal_txt();
}
inline void SC_DIALOG_dialog_link::set_txt(const std::string& value) {
  _internal_set_txt(value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_link.txt)
}
inline std::string* SC_DIALOG_dialog_link::mutable_txt() {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_link.txt)
  return _internal_mutable_txt();
}
inline const std::string& SC_DIALOG_dialog_link::_internal_txt() const {
  return txt_.GetNoArena();
}
inline void SC_DIALOG_dialog_link::_internal_set_txt(const std::string& value) {
  
  txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_DIALOG_dialog_link::set_txt(std::string&& value) {
  
  txt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_DIALOG.dialog_link.txt)
}
inline void SC_DIALOG_dialog_link::set_txt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_link.txt)
}
inline void SC_DIALOG_dialog_link::set_txt(const char* value, size_t size) {
  
  txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_link.txt)
}
inline std::string* SC_DIALOG_dialog_link::_internal_mutable_txt() {
  
  return txt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_DIALOG_dialog_link::release_txt() {
  // @@protoc_insertion_point(field_release:SC_DIALOG.dialog_link.txt)
  
  return txt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_DIALOG_dialog_link::set_allocated_txt(std::string* txt) {
  if (txt != nullptr) {
    
  } else {
    
  }
  txt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txt);
  // @@protoc_insertion_point(field_set_allocated:SC_DIALOG.dialog_link.txt)
}

// -------------------------------------------------------------------

// SC_DIALOG

// uint64 dialog_id = 1;
inline void SC_DIALOG::clear_dialog_id() {
  dialog_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DIALOG::_internal_dialog_id() const {
  return dialog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_DIALOG::dialog_id() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_id)
  return _internal_dialog_id();
}
inline void SC_DIALOG::_internal_set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dialog_id_ = value;
}
inline void SC_DIALOG::set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dialog_id(value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_id)
}

// uint32 dialog_type = 2;
inline void SC_DIALOG::clear_dialog_type() {
  dialog_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DIALOG::_internal_dialog_type() const {
  return dialog_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_DIALOG::dialog_type() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_type)
  return _internal_dialog_type();
}
inline void SC_DIALOG::_internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dialog_type_ = value;
}
inline void SC_DIALOG::set_dialog_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dialog_type(value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_type)
}

// string dialog_title = 3;
inline void SC_DIALOG::clear_dialog_title() {
  dialog_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_DIALOG::dialog_title() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_title)
  return _internal_dialog_title();
}
inline void SC_DIALOG::set_dialog_title(const std::string& value) {
  _internal_set_dialog_title(value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_title)
}
inline std::string* SC_DIALOG::mutable_dialog_title() {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_title)
  return _internal_mutable_dialog_title();
}
inline const std::string& SC_DIALOG::_internal_dialog_title() const {
  return dialog_title_.GetNoArena();
}
inline void SC_DIALOG::_internal_set_dialog_title(const std::string& value) {
  
  dialog_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_DIALOG::set_dialog_title(std::string&& value) {
  
  dialog_title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_DIALOG.dialog_title)
}
inline void SC_DIALOG::set_dialog_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dialog_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_title)
}
inline void SC_DIALOG::set_dialog_title(const char* value, size_t size) {
  
  dialog_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_title)
}
inline std::string* SC_DIALOG::_internal_mutable_dialog_title() {
  
  return dialog_title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_DIALOG::release_dialog_title() {
  // @@protoc_insertion_point(field_release:SC_DIALOG.dialog_title)
  
  return dialog_title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_DIALOG::set_allocated_dialog_title(std::string* dialog_title) {
  if (dialog_title != nullptr) {
    
  } else {
    
  }
  dialog_title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dialog_title);
  // @@protoc_insertion_point(field_set_allocated:SC_DIALOG.dialog_title)
}

// repeated string dialog_txt = 4;
inline int SC_DIALOG::_internal_dialog_txt_size() const {
  return dialog_txt_.size();
}
inline int SC_DIALOG::dialog_txt_size() const {
  return _internal_dialog_txt_size();
}
inline void SC_DIALOG::clear_dialog_txt() {
  dialog_txt_.Clear();
}
inline std::string* SC_DIALOG::add_dialog_txt() {
  // @@protoc_insertion_point(field_add_mutable:SC_DIALOG.dialog_txt)
  return _internal_add_dialog_txt();
}
inline const std::string& SC_DIALOG::_internal_dialog_txt(int index) const {
  return dialog_txt_.Get(index);
}
inline const std::string& SC_DIALOG::dialog_txt(int index) const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_txt)
  return _internal_dialog_txt(index);
}
inline std::string* SC_DIALOG::mutable_dialog_txt(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_txt)
  return dialog_txt_.Mutable(index);
}
inline void SC_DIALOG::set_dialog_txt(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_txt)
  dialog_txt_.Mutable(index)->assign(value);
}
inline void SC_DIALOG::set_dialog_txt(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_txt)
  dialog_txt_.Mutable(index)->assign(std::move(value));
}
inline void SC_DIALOG::set_dialog_txt(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dialog_txt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_txt)
}
inline void SC_DIALOG::set_dialog_txt(int index, const char* value, size_t size) {
  dialog_txt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_txt)
}
inline std::string* SC_DIALOG::_internal_add_dialog_txt() {
  return dialog_txt_.Add();
}
inline void SC_DIALOG::add_dialog_txt(const std::string& value) {
  dialog_txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC_DIALOG.dialog_txt)
}
inline void SC_DIALOG::add_dialog_txt(std::string&& value) {
  dialog_txt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SC_DIALOG.dialog_txt)
}
inline void SC_DIALOG::add_dialog_txt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dialog_txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC_DIALOG.dialog_txt)
}
inline void SC_DIALOG::add_dialog_txt(const char* value, size_t size) {
  dialog_txt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC_DIALOG.dialog_txt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SC_DIALOG::dialog_txt() const {
  // @@protoc_insertion_point(field_list:SC_DIALOG.dialog_txt)
  return dialog_txt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SC_DIALOG::mutable_dialog_txt() {
  // @@protoc_insertion_point(field_mutable_list:SC_DIALOG.dialog_txt)
  return &dialog_txt_;
}

// repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
inline int SC_DIALOG::_internal_dialog_link_list_size() const {
  return dialog_link_list_.size();
}
inline int SC_DIALOG::dialog_link_list_size() const {
  return _internal_dialog_link_list_size();
}
inline void SC_DIALOG::clear_dialog_link_list() {
  dialog_link_list_.Clear();
}
inline ::SC_DIALOG_dialog_link* SC_DIALOG::mutable_dialog_link_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_link_list)
  return dialog_link_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DIALOG_dialog_link >*
SC_DIALOG::mutable_dialog_link_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_DIALOG.dialog_link_list)
  return &dialog_link_list_;
}
inline const ::SC_DIALOG_dialog_link& SC_DIALOG::_internal_dialog_link_list(int index) const {
  return dialog_link_list_.Get(index);
}
inline const ::SC_DIALOG_dialog_link& SC_DIALOG::dialog_link_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link_list)
  return _internal_dialog_link_list(index);
}
inline ::SC_DIALOG_dialog_link* SC_DIALOG::_internal_add_dialog_link_list() {
  return dialog_link_list_.Add();
}
inline ::SC_DIALOG_dialog_link* SC_DIALOG::add_dialog_link_list() {
  // @@protoc_insertion_point(field_add:SC_DIALOG.dialog_link_list)
  return _internal_add_dialog_link_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_DIALOG_dialog_link >&
SC_DIALOG::dialog_link_list() const {
  // @@protoc_insertion_point(field_list:SC_DIALOG.dialog_link_list)
  return dialog_link_list_;
}

// -------------------------------------------------------------------

// CS_DIALOG_CLICK

// uint64 dialog_id = 1;
inline void CS_DIALOG_CLICK::clear_dialog_id() {
  dialog_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_DIALOG_CLICK::_internal_dialog_id() const {
  return dialog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_DIALOG_CLICK::dialog_id() const {
  // @@protoc_insertion_point(field_get:CS_DIALOG_CLICK.dialog_id)
  return _internal_dialog_id();
}
inline void CS_DIALOG_CLICK::_internal_set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dialog_id_ = value;
}
inline void CS_DIALOG_CLICK::set_dialog_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dialog_id(value);
  // @@protoc_insertion_point(field_set:CS_DIALOG_CLICK.dialog_id)
}

// uint32 dialog_button_idx = 2;
inline void CS_DIALOG_CLICK::clear_dialog_button_idx() {
  dialog_button_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_DIALOG_CLICK::_internal_dialog_button_idx() const {
  return dialog_button_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_DIALOG_CLICK::dialog_button_idx() const {
  // @@protoc_insertion_point(field_get:CS_DIALOG_CLICK.dialog_button_idx)
  return _internal_dialog_button_idx();
}
inline void CS_DIALOG_CLICK::_internal_set_dialog_button_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dialog_button_idx_ = value;
}
inline void CS_DIALOG_CLICK::set_dialog_button_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dialog_button_idx(value);
  // @@protoc_insertion_point(field_set:CS_DIALOG_CLICK.dialog_button_idx)
}

// -------------------------------------------------------------------

// SC_ACHI_INFO_Info

// uint32 achi_id = 1;
inline void SC_ACHI_INFO_Info::clear_achi_id() {
  achi_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACHI_INFO_Info::_internal_achi_id() const {
  return achi_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACHI_INFO_Info::achi_id() const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.Info.achi_id)
  return _internal_achi_id();
}
inline void SC_ACHI_INFO_Info::_internal_set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achi_id_ = value;
}
inline void SC_ACHI_INFO_Info::set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achi_id(value);
  // @@protoc_insertion_point(field_set:SC_ACHI_INFO.Info.achi_id)
}

// uint32 take = 2;
inline void SC_ACHI_INFO_Info::clear_take() {
  take_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACHI_INFO_Info::_internal_take() const {
  return take_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACHI_INFO_Info::take() const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.Info.take)
  return _internal_take();
}
inline void SC_ACHI_INFO_Info::_internal_set_take(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  take_ = value;
}
inline void SC_ACHI_INFO_Info::set_take(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_take(value);
  // @@protoc_insertion_point(field_set:SC_ACHI_INFO.Info.take)
}

// -------------------------------------------------------------------

// SC_ACHI_INFO

// repeated .SC_ACHI_INFO.Info finish_list = 1;
inline int SC_ACHI_INFO::_internal_finish_list_size() const {
  return finish_list_.size();
}
inline int SC_ACHI_INFO::finish_list_size() const {
  return _internal_finish_list_size();
}
inline void SC_ACHI_INFO::clear_finish_list() {
  finish_list_.Clear();
}
inline ::SC_ACHI_INFO_Info* SC_ACHI_INFO::mutable_finish_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ACHI_INFO.finish_list)
  return finish_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACHI_INFO_Info >*
SC_ACHI_INFO::mutable_finish_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACHI_INFO.finish_list)
  return &finish_list_;
}
inline const ::SC_ACHI_INFO_Info& SC_ACHI_INFO::_internal_finish_list(int index) const {
  return finish_list_.Get(index);
}
inline const ::SC_ACHI_INFO_Info& SC_ACHI_INFO::finish_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.finish_list)
  return _internal_finish_list(index);
}
inline ::SC_ACHI_INFO_Info* SC_ACHI_INFO::_internal_add_finish_list() {
  return finish_list_.Add();
}
inline ::SC_ACHI_INFO_Info* SC_ACHI_INFO::add_finish_list() {
  // @@protoc_insertion_point(field_add:SC_ACHI_INFO.finish_list)
  return _internal_add_finish_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACHI_INFO_Info >&
SC_ACHI_INFO::finish_list() const {
  // @@protoc_insertion_point(field_list:SC_ACHI_INFO.finish_list)
  return finish_list_;
}

// -------------------------------------------------------------------

// CS_ACHI_TAKE

// uint32 achi_id = 1;
inline void CS_ACHI_TAKE::clear_achi_id() {
  achi_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ACHI_TAKE::_internal_achi_id() const {
  return achi_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_ACHI_TAKE::achi_id() const {
  // @@protoc_insertion_point(field_get:CS_ACHI_TAKE.achi_id)
  return _internal_achi_id();
}
inline void CS_ACHI_TAKE::_internal_set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achi_id_ = value;
}
inline void CS_ACHI_TAKE::set_achi_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achi_id(value);
  // @@protoc_insertion_point(field_set:CS_ACHI_TAKE.achi_id)
}

// -------------------------------------------------------------------

// CS_TEAMCREATE

// -------------------------------------------------------------------

// CS_TEAMQUIT

// -------------------------------------------------------------------

// CS_TEAMKICKMEMBER

// uint64 member_id = 1;
inline void CS_TEAMKICKMEMBER::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMKICKMEMBER::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMKICKMEMBER::member_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMKICKMEMBER.member_id)
  return _internal_member_id();
}
inline void CS_TEAMKICKMEMBER::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void CS_TEAMKICKMEMBER::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMKICKMEMBER.member_id)
}

// -------------------------------------------------------------------

// CS_TEAMINVITEMEMBER

// uint64 invitee_id = 1;
inline void CS_TEAMINVITEMEMBER::clear_invitee_id() {
  invitee_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMINVITEMEMBER::_internal_invitee_id() const {
  return invitee_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMINVITEMEMBER::invitee_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMINVITEMEMBER.invitee_id)
  return _internal_invitee_id();
}
inline void CS_TEAMINVITEMEMBER::_internal_set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  invitee_id_ = value;
}
inline void CS_TEAMINVITEMEMBER::set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitee_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMINVITEMEMBER.invitee_id)
}

// -------------------------------------------------------------------

// SC_TEAMINVITEMEMBER

// uint64 team_id = 1;
inline void SC_TEAMINVITEMEMBER::clear_team_id() {
  team_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMINVITEMEMBER::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMINVITEMEMBER::team_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.team_id)
  return _internal_team_id();
}
inline void SC_TEAMINVITEMEMBER::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  team_id_ = value;
}
inline void SC_TEAMINVITEMEMBER::set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.team_id)
}

// uint64 inviter_id = 2;
inline void SC_TEAMINVITEMEMBER::clear_inviter_id() {
  inviter_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMINVITEMEMBER::_internal_inviter_id() const {
  return inviter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMINVITEMEMBER::inviter_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.inviter_id)
  return _internal_inviter_id();
}
inline void SC_TEAMINVITEMEMBER::_internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inviter_id_ = value;
}
inline void SC_TEAMINVITEMEMBER::set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter_id(value);
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.inviter_id)
}

// string inviter_name = 3;
inline void SC_TEAMINVITEMEMBER::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_TEAMINVITEMEMBER::inviter_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.inviter_name)
  return _internal_inviter_name();
}
inline void SC_TEAMINVITEMEMBER::set_inviter_name(const std::string& value) {
  _internal_set_inviter_name(value);
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.inviter_name)
}
inline std::string* SC_TEAMINVITEMEMBER::mutable_inviter_name() {
  // @@protoc_insertion_point(field_mutable:SC_TEAMINVITEMEMBER.inviter_name)
  return _internal_mutable_inviter_name();
}
inline const std::string& SC_TEAMINVITEMEMBER::_internal_inviter_name() const {
  return inviter_name_.GetNoArena();
}
inline void SC_TEAMINVITEMEMBER::_internal_set_inviter_name(const std::string& value) {
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_TEAMINVITEMEMBER::set_inviter_name(std::string&& value) {
  
  inviter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TEAMINVITEMEMBER.inviter_name)
}
inline void SC_TEAMINVITEMEMBER::set_inviter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMINVITEMEMBER.inviter_name)
}
inline void SC_TEAMINVITEMEMBER::set_inviter_name(const char* value, size_t size) {
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMINVITEMEMBER.inviter_name)
}
inline std::string* SC_TEAMINVITEMEMBER::_internal_mutable_inviter_name() {
  
  return inviter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_TEAMINVITEMEMBER::release_inviter_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMINVITEMEMBER.inviter_name)
  
  return inviter_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TEAMINVITEMEMBER::set_allocated_inviter_name(std::string* inviter_name) {
  if (inviter_name != nullptr) {
    
  } else {
    
  }
  inviter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMINVITEMEMBER.inviter_name)
}

// -------------------------------------------------------------------

// CS_TEAMACCEPTINVITE

// uint64 team_id = 1;
inline void CS_TEAMACCEPTINVITE::clear_team_id() {
  team_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTINVITE::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTINVITE::team_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.team_id)
  return _internal_team_id();
}
inline void CS_TEAMACCEPTINVITE::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  team_id_ = value;
}
inline void CS_TEAMACCEPTINVITE::set_team_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.team_id)
}

// uint64 inviter_id = 2;
inline void CS_TEAMACCEPTINVITE::clear_inviter_id() {
  inviter_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTINVITE::_internal_inviter_id() const {
  return inviter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTINVITE::inviter_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.inviter_id)
  return _internal_inviter_id();
}
inline void CS_TEAMACCEPTINVITE::_internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inviter_id_ = value;
}
inline void CS_TEAMACCEPTINVITE::set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.inviter_id)
}

// bool result = 3;
inline void CS_TEAMACCEPTINVITE::clear_result() {
  result_ = false;
}
inline bool CS_TEAMACCEPTINVITE::_internal_result() const {
  return result_;
}
inline bool CS_TEAMACCEPTINVITE::result() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.result)
  return _internal_result();
}
inline void CS_TEAMACCEPTINVITE::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CS_TEAMACCEPTINVITE::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.result)
}

// -------------------------------------------------------------------

// CS_TEAMNEWLEADER

// uint64 new_leader_id = 2;
inline void CS_TEAMNEWLEADER::clear_new_leader_id() {
  new_leader_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMNEWLEADER::_internal_new_leader_id() const {
  return new_leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMNEWLEADER::new_leader_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMNEWLEADER.new_leader_id)
  return _internal_new_leader_id();
}
inline void CS_TEAMNEWLEADER::_internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_leader_id_ = value;
}
inline void CS_TEAMNEWLEADER::set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_leader_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMNEWLEADER.new_leader_id)
}

// -------------------------------------------------------------------

// SC_TEAMMEMBER_INFO

// repeated .TeamMemberInfo member_list = 1;
inline int SC_TEAMMEMBER_INFO::_internal_member_list_size() const {
  return member_list_.size();
}
inline int SC_TEAMMEMBER_INFO::member_list_size() const {
  return _internal_member_list_size();
}
inline ::TeamMemberInfo* SC_TEAMMEMBER_INFO::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TEAMMEMBER_INFO.member_list)
  return member_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamMemberInfo >*
SC_TEAMMEMBER_INFO::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TEAMMEMBER_INFO.member_list)
  return &member_list_;
}
inline const ::TeamMemberInfo& SC_TEAMMEMBER_INFO::_internal_member_list(int index) const {
  return member_list_.Get(index);
}
inline const ::TeamMemberInfo& SC_TEAMMEMBER_INFO::member_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.member_list)
  return _internal_member_list(index);
}
inline ::TeamMemberInfo* SC_TEAMMEMBER_INFO::_internal_add_member_list() {
  return member_list_.Add();
}
inline ::TeamMemberInfo* SC_TEAMMEMBER_INFO::add_member_list() {
  // @@protoc_insertion_point(field_add:SC_TEAMMEMBER_INFO.member_list)
  return _internal_add_member_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamMemberInfo >&
SC_TEAMMEMBER_INFO::member_list() const {
  // @@protoc_insertion_point(field_list:SC_TEAMMEMBER_INFO.member_list)
  return member_list_;
}

// -------------------------------------------------------------------

// SC_TEAMMEMBER_ACTION

// .SC_TEAMMEMBER_ACTION.Action action = 1;
inline void SC_TEAMMEMBER_ACTION::clear_action() {
  action_ = 0;
}
inline ::SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::_internal_action() const {
  return static_cast< ::SC_TEAMMEMBER_ACTION_Action >(action_);
}
inline ::SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::action() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.action)
  return _internal_action();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_action(::SC_TEAMMEMBER_ACTION_Action value) {
  
  action_ = value;
}
inline void SC_TEAMMEMBER_ACTION::set_action(::SC_TEAMMEMBER_ACTION_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.action)
}

// uint64 operator_id = 2;
inline void SC_TEAMMEMBER_ACTION::clear_operator_id() {
  operator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMMEMBER_ACTION::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMMEMBER_ACTION::operator_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.operator_id)
  return _internal_operator_id();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  operator_id_ = value;
}
inline void SC_TEAMMEMBER_ACTION::set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.operator_id)
}

// uint64 member_id = 3;
inline void SC_TEAMMEMBER_ACTION::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMMEMBER_ACTION::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMMEMBER_ACTION::member_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_id)
  return _internal_member_id();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void SC_TEAMMEMBER_ACTION::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_id)
}

// uint32 member_lev = 4;
inline void SC_TEAMMEMBER_ACTION::clear_member_lev() {
  member_lev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TEAMMEMBER_ACTION::_internal_member_lev() const {
  return member_lev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_TEAMMEMBER_ACTION::member_lev() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_lev)
  return _internal_member_lev();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_lev_ = value;
}
inline void SC_TEAMMEMBER_ACTION::set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_lev(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_lev)
}

// string member_name = 5;
inline void SC_TEAMMEMBER_ACTION::clear_member_name() {
  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_TEAMMEMBER_ACTION::member_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_name)
  return _internal_member_name();
}
inline void SC_TEAMMEMBER_ACTION::set_member_name(const std::string& value) {
  _internal_set_member_name(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_name)
}
inline std::string* SC_TEAMMEMBER_ACTION::mutable_member_name() {
  // @@protoc_insertion_point(field_mutable:SC_TEAMMEMBER_ACTION.member_name)
  return _internal_mutable_member_name();
}
inline const std::string& SC_TEAMMEMBER_ACTION::_internal_member_name() const {
  return member_name_.GetNoArena();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_member_name(const std::string& value) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_TEAMMEMBER_ACTION::set_member_name(std::string&& value) {
  
  member_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TEAMMEMBER_ACTION.member_name)
}
inline void SC_TEAMMEMBER_ACTION::set_member_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMMEMBER_ACTION.member_name)
}
inline void SC_TEAMMEMBER_ACTION::set_member_name(const char* value, size_t size) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMMEMBER_ACTION.member_name)
}
inline std::string* SC_TEAMMEMBER_ACTION::_internal_mutable_member_name() {
  
  return member_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_TEAMMEMBER_ACTION::release_member_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMMEMBER_ACTION.member_name)
  
  return member_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TEAMMEMBER_ACTION::set_allocated_member_name(std::string* member_name) {
  if (member_name != nullptr) {
    
  } else {
    
  }
  member_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), member_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMMEMBER_ACTION.member_name)
}

// bool member_online = 6;
inline void SC_TEAMMEMBER_ACTION::clear_member_online() {
  member_online_ = false;
}
inline bool SC_TEAMMEMBER_ACTION::_internal_member_online() const {
  return member_online_;
}
inline bool SC_TEAMMEMBER_ACTION::member_online() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_online)
  return _internal_member_online();
}
inline void SC_TEAMMEMBER_ACTION::_internal_set_member_online(bool value) {
  
  member_online_ = value;
}
inline void SC_TEAMMEMBER_ACTION::set_member_online(bool value) {
  _internal_set_member_online(value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_online)
}

// -------------------------------------------------------------------

// CS_TEAMAPPLYMEMBER

// uint64 respondent_id = 1;
inline void CS_TEAMAPPLYMEMBER::clear_respondent_id() {
  respondent_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMAPPLYMEMBER::_internal_respondent_id() const {
  return respondent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMAPPLYMEMBER::respondent_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMAPPLYMEMBER.respondent_id)
  return _internal_respondent_id();
}
inline void CS_TEAMAPPLYMEMBER::_internal_set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  respondent_id_ = value;
}
inline void CS_TEAMAPPLYMEMBER::set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_respondent_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMAPPLYMEMBER.respondent_id)
}

// -------------------------------------------------------------------

// SC_TEAMAPPLYMEMBER

// uint64 applicant_id = 1;
inline void SC_TEAMAPPLYMEMBER::clear_applicant_id() {
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMAPPLYMEMBER::_internal_applicant_id() const {
  return applicant_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_TEAMAPPLYMEMBER::applicant_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMAPPLYMEMBER.applicant_id)
  return _internal_applicant_id();
}
inline void SC_TEAMAPPLYMEMBER::_internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applicant_id_ = value;
}
inline void SC_TEAMAPPLYMEMBER::set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_applicant_id(value);
  // @@protoc_insertion_point(field_set:SC_TEAMAPPLYMEMBER.applicant_id)
}

// string applicant_name = 2;
inline void SC_TEAMAPPLYMEMBER::clear_applicant_name() {
  applicant_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_TEAMAPPLYMEMBER::applicant_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMAPPLYMEMBER.applicant_name)
  return _internal_applicant_name();
}
inline void SC_TEAMAPPLYMEMBER::set_applicant_name(const std::string& value) {
  _internal_set_applicant_name(value);
  // @@protoc_insertion_point(field_set:SC_TEAMAPPLYMEMBER.applicant_name)
}
inline std::string* SC_TEAMAPPLYMEMBER::mutable_applicant_name() {
  // @@protoc_insertion_point(field_mutable:SC_TEAMAPPLYMEMBER.applicant_name)
  return _internal_mutable_applicant_name();
}
inline const std::string& SC_TEAMAPPLYMEMBER::_internal_applicant_name() const {
  return applicant_name_.GetNoArena();
}
inline void SC_TEAMAPPLYMEMBER::_internal_set_applicant_name(const std::string& value) {
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_TEAMAPPLYMEMBER::set_applicant_name(std::string&& value) {
  
  applicant_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TEAMAPPLYMEMBER.applicant_name)
}
inline void SC_TEAMAPPLYMEMBER::set_applicant_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMAPPLYMEMBER.applicant_name)
}
inline void SC_TEAMAPPLYMEMBER::set_applicant_name(const char* value, size_t size) {
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMAPPLYMEMBER.applicant_name)
}
inline std::string* SC_TEAMAPPLYMEMBER::_internal_mutable_applicant_name() {
  
  return applicant_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_TEAMAPPLYMEMBER::release_applicant_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMAPPLYMEMBER.applicant_name)
  
  return applicant_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TEAMAPPLYMEMBER::set_allocated_applicant_name(std::string* applicant_name) {
  if (applicant_name != nullptr) {
    
  } else {
    
  }
  applicant_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicant_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMAPPLYMEMBER.applicant_name)
}

// -------------------------------------------------------------------

// CS_TEAMACCEPTAPPLY

// uint64 applicant_id = 1;
inline void CS_TEAMACCEPTAPPLY::clear_applicant_id() {
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTAPPLY::_internal_applicant_id() const {
  return applicant_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_TEAMACCEPTAPPLY::applicant_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTAPPLY.applicant_id)
  return _internal_applicant_id();
}
inline void CS_TEAMACCEPTAPPLY::_internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applicant_id_ = value;
}
inline void CS_TEAMACCEPTAPPLY::set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_applicant_id(value);
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTAPPLY.applicant_id)
}

// bool result = 2;
inline void CS_TEAMACCEPTAPPLY::clear_result() {
  result_ = false;
}
inline bool CS_TEAMACCEPTAPPLY::_internal_result() const {
  return result_;
}
inline bool CS_TEAMACCEPTAPPLY::result() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTAPPLY.result)
  return _internal_result();
}
inline void CS_TEAMACCEPTAPPLY::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CS_TEAMACCEPTAPPLY::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTAPPLY.result)
}

// -------------------------------------------------------------------

// CS_GUILDCREATE

// -------------------------------------------------------------------

// CS_GUILDQUIT

// -------------------------------------------------------------------

// CS_GUILDKICKMEMBER

// uint64 member_id = 1;
inline void CS_GUILDKICKMEMBER::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDKICKMEMBER::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDKICKMEMBER::member_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDKICKMEMBER.member_id)
  return _internal_member_id();
}
inline void CS_GUILDKICKMEMBER::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void CS_GUILDKICKMEMBER::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDKICKMEMBER.member_id)
}

// -------------------------------------------------------------------

// CS_GUILDINVITEMEMBER

// uint64 invitee_id = 1;
inline void CS_GUILDINVITEMEMBER::clear_invitee_id() {
  invitee_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDINVITEMEMBER::_internal_invitee_id() const {
  return invitee_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDINVITEMEMBER::invitee_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDINVITEMEMBER.invitee_id)
  return _internal_invitee_id();
}
inline void CS_GUILDINVITEMEMBER::_internal_set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  invitee_id_ = value;
}
inline void CS_GUILDINVITEMEMBER::set_invitee_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitee_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDINVITEMEMBER.invitee_id)
}

// -------------------------------------------------------------------

// SC_GUILDINVITEMEMBER

// uint64 guild_id = 1;
inline void SC_GUILDINVITEMEMBER::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDINVITEMEMBER::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDINVITEMEMBER::guild_id() const {
  // @@protoc_insertion_point(field_get:SC_GUILDINVITEMEMBER.guild_id)
  return _internal_guild_id();
}
inline void SC_GUILDINVITEMEMBER::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void SC_GUILDINVITEMEMBER::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:SC_GUILDINVITEMEMBER.guild_id)
}

// uint64 inviter_id = 2;
inline void SC_GUILDINVITEMEMBER::clear_inviter_id() {
  inviter_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDINVITEMEMBER::_internal_inviter_id() const {
  return inviter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDINVITEMEMBER::inviter_id() const {
  // @@protoc_insertion_point(field_get:SC_GUILDINVITEMEMBER.inviter_id)
  return _internal_inviter_id();
}
inline void SC_GUILDINVITEMEMBER::_internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inviter_id_ = value;
}
inline void SC_GUILDINVITEMEMBER::set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter_id(value);
  // @@protoc_insertion_point(field_set:SC_GUILDINVITEMEMBER.inviter_id)
}

// string inviter_name = 3;
inline void SC_GUILDINVITEMEMBER::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_GUILDINVITEMEMBER::inviter_name() const {
  // @@protoc_insertion_point(field_get:SC_GUILDINVITEMEMBER.inviter_name)
  return _internal_inviter_name();
}
inline void SC_GUILDINVITEMEMBER::set_inviter_name(const std::string& value) {
  _internal_set_inviter_name(value);
  // @@protoc_insertion_point(field_set:SC_GUILDINVITEMEMBER.inviter_name)
}
inline std::string* SC_GUILDINVITEMEMBER::mutable_inviter_name() {
  // @@protoc_insertion_point(field_mutable:SC_GUILDINVITEMEMBER.inviter_name)
  return _internal_mutable_inviter_name();
}
inline const std::string& SC_GUILDINVITEMEMBER::_internal_inviter_name() const {
  return inviter_name_.GetNoArena();
}
inline void SC_GUILDINVITEMEMBER::_internal_set_inviter_name(const std::string& value) {
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_GUILDINVITEMEMBER::set_inviter_name(std::string&& value) {
  
  inviter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_GUILDINVITEMEMBER.inviter_name)
}
inline void SC_GUILDINVITEMEMBER::set_inviter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_GUILDINVITEMEMBER.inviter_name)
}
inline void SC_GUILDINVITEMEMBER::set_inviter_name(const char* value, size_t size) {
  
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_GUILDINVITEMEMBER.inviter_name)
}
inline std::string* SC_GUILDINVITEMEMBER::_internal_mutable_inviter_name() {
  
  return inviter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_GUILDINVITEMEMBER::release_inviter_name() {
  // @@protoc_insertion_point(field_release:SC_GUILDINVITEMEMBER.inviter_name)
  
  return inviter_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_GUILDINVITEMEMBER::set_allocated_inviter_name(std::string* inviter_name) {
  if (inviter_name != nullptr) {
    
  } else {
    
  }
  inviter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:SC_GUILDINVITEMEMBER.inviter_name)
}

// -------------------------------------------------------------------

// CS_GUILDACCEPTINVITE

// uint64 guild_id = 1;
inline void CS_GUILDACCEPTINVITE::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTINVITE::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTINVITE::guild_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDACCEPTINVITE.guild_id)
  return _internal_guild_id();
}
inline void CS_GUILDACCEPTINVITE::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void CS_GUILDACCEPTINVITE::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDACCEPTINVITE.guild_id)
}

// uint64 inviter_id = 2;
inline void CS_GUILDACCEPTINVITE::clear_inviter_id() {
  inviter_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTINVITE::_internal_inviter_id() const {
  return inviter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTINVITE::inviter_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDACCEPTINVITE.inviter_id)
  return _internal_inviter_id();
}
inline void CS_GUILDACCEPTINVITE::_internal_set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inviter_id_ = value;
}
inline void CS_GUILDACCEPTINVITE::set_inviter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDACCEPTINVITE.inviter_id)
}

// bool result = 3;
inline void CS_GUILDACCEPTINVITE::clear_result() {
  result_ = false;
}
inline bool CS_GUILDACCEPTINVITE::_internal_result() const {
  return result_;
}
inline bool CS_GUILDACCEPTINVITE::result() const {
  // @@protoc_insertion_point(field_get:CS_GUILDACCEPTINVITE.result)
  return _internal_result();
}
inline void CS_GUILDACCEPTINVITE::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CS_GUILDACCEPTINVITE::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CS_GUILDACCEPTINVITE.result)
}

// -------------------------------------------------------------------

// CS_GUILDNEWLEADER

// uint64 new_leader_id = 2;
inline void CS_GUILDNEWLEADER::clear_new_leader_id() {
  new_leader_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDNEWLEADER::_internal_new_leader_id() const {
  return new_leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDNEWLEADER::new_leader_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDNEWLEADER.new_leader_id)
  return _internal_new_leader_id();
}
inline void CS_GUILDNEWLEADER::_internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_leader_id_ = value;
}
inline void CS_GUILDNEWLEADER::set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_leader_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDNEWLEADER.new_leader_id)
}

// -------------------------------------------------------------------

// SC_GUILDMEMBER_INFO

// repeated .GuildMemberInfo member_list = 1;
inline int SC_GUILDMEMBER_INFO::_internal_member_list_size() const {
  return member_list_.size();
}
inline int SC_GUILDMEMBER_INFO::member_list_size() const {
  return _internal_member_list_size();
}
inline ::GuildMemberInfo* SC_GUILDMEMBER_INFO::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_GUILDMEMBER_INFO.member_list)
  return member_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GuildMemberInfo >*
SC_GUILDMEMBER_INFO::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_GUILDMEMBER_INFO.member_list)
  return &member_list_;
}
inline const ::GuildMemberInfo& SC_GUILDMEMBER_INFO::_internal_member_list(int index) const {
  return member_list_.Get(index);
}
inline const ::GuildMemberInfo& SC_GUILDMEMBER_INFO::member_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_INFO.member_list)
  return _internal_member_list(index);
}
inline ::GuildMemberInfo* SC_GUILDMEMBER_INFO::_internal_add_member_list() {
  return member_list_.Add();
}
inline ::GuildMemberInfo* SC_GUILDMEMBER_INFO::add_member_list() {
  // @@protoc_insertion_point(field_add:SC_GUILDMEMBER_INFO.member_list)
  return _internal_add_member_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GuildMemberInfo >&
SC_GUILDMEMBER_INFO::member_list() const {
  // @@protoc_insertion_point(field_list:SC_GUILDMEMBER_INFO.member_list)
  return member_list_;
}

// -------------------------------------------------------------------

// SC_GUILDMEMBER_ACTION

// .SC_GUILDMEMBER_ACTION.Action action = 1;
inline void SC_GUILDMEMBER_ACTION::clear_action() {
  action_ = 0;
}
inline ::SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::_internal_action() const {
  return static_cast< ::SC_GUILDMEMBER_ACTION_Action >(action_);
}
inline ::SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::action() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.action)
  return _internal_action();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_action(::SC_GUILDMEMBER_ACTION_Action value) {
  
  action_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_action(::SC_GUILDMEMBER_ACTION_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.action)
}

// uint64 operator_id = 2;
inline void SC_GUILDMEMBER_ACTION::clear_operator_id() {
  operator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDMEMBER_ACTION::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDMEMBER_ACTION::operator_id() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.operator_id)
  return _internal_operator_id();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  operator_id_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_operator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.operator_id)
}

// uint64 member_id = 3;
inline void SC_GUILDMEMBER_ACTION::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDMEMBER_ACTION::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDMEMBER_ACTION::member_id() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_id)
  return _internal_member_id();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_id)
}

// uint32 member_lev = 4;
inline void SC_GUILDMEMBER_ACTION::clear_member_lev() {
  member_lev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::_internal_member_lev() const {
  return member_lev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::member_lev() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_lev)
  return _internal_member_lev();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_lev_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_lev(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_lev)
}

// string member_name = 5;
inline void SC_GUILDMEMBER_ACTION::clear_member_name() {
  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_GUILDMEMBER_ACTION::member_name() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_name)
  return _internal_member_name();
}
inline void SC_GUILDMEMBER_ACTION::set_member_name(const std::string& value) {
  _internal_set_member_name(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_name)
}
inline std::string* SC_GUILDMEMBER_ACTION::mutable_member_name() {
  // @@protoc_insertion_point(field_mutable:SC_GUILDMEMBER_ACTION.member_name)
  return _internal_mutable_member_name();
}
inline const std::string& SC_GUILDMEMBER_ACTION::_internal_member_name() const {
  return member_name_.GetNoArena();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_name(const std::string& value) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_GUILDMEMBER_ACTION::set_member_name(std::string&& value) {
  
  member_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_GUILDMEMBER_ACTION.member_name)
}
inline void SC_GUILDMEMBER_ACTION::set_member_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_GUILDMEMBER_ACTION.member_name)
}
inline void SC_GUILDMEMBER_ACTION::set_member_name(const char* value, size_t size) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_GUILDMEMBER_ACTION.member_name)
}
inline std::string* SC_GUILDMEMBER_ACTION::_internal_mutable_member_name() {
  
  return member_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_GUILDMEMBER_ACTION::release_member_name() {
  // @@protoc_insertion_point(field_release:SC_GUILDMEMBER_ACTION.member_name)
  
  return member_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_GUILDMEMBER_ACTION::set_allocated_member_name(std::string* member_name) {
  if (member_name != nullptr) {
    
  } else {
    
  }
  member_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), member_name);
  // @@protoc_insertion_point(field_set_allocated:SC_GUILDMEMBER_ACTION.member_name)
}

// bool member_online = 6;
inline void SC_GUILDMEMBER_ACTION::clear_member_online() {
  member_online_ = false;
}
inline bool SC_GUILDMEMBER_ACTION::_internal_member_online() const {
  return member_online_;
}
inline bool SC_GUILDMEMBER_ACTION::member_online() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_online)
  return _internal_member_online();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_online(bool value) {
  
  member_online_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_online(bool value) {
  _internal_set_member_online(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_online)
}

// uint32 member_rank = 7;
inline void SC_GUILDMEMBER_ACTION::clear_member_rank() {
  member_rank_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::_internal_member_rank() const {
  return member_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::member_rank() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_rank)
  return _internal_member_rank();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_rank_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_rank(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_rank)
}

// uint32 member_score = 8;
inline void SC_GUILDMEMBER_ACTION::clear_member_score() {
  member_score_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::_internal_member_score() const {
  return member_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::member_score() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_score)
  return _internal_member_score();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_score_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_score(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_score)
}

// uint32 member_last_logout = 9;
inline void SC_GUILDMEMBER_ACTION::clear_member_last_logout() {
  member_last_logout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::_internal_member_last_logout() const {
  return member_last_logout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_GUILDMEMBER_ACTION::member_last_logout() const {
  // @@protoc_insertion_point(field_get:SC_GUILDMEMBER_ACTION.member_last_logout)
  return _internal_member_last_logout();
}
inline void SC_GUILDMEMBER_ACTION::_internal_set_member_last_logout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_last_logout_ = value;
}
inline void SC_GUILDMEMBER_ACTION::set_member_last_logout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_last_logout(value);
  // @@protoc_insertion_point(field_set:SC_GUILDMEMBER_ACTION.member_last_logout)
}

// -------------------------------------------------------------------

// CS_GUILDAPPLYMEMBER

// uint64 respondent_id = 1;
inline void CS_GUILDAPPLYMEMBER::clear_respondent_id() {
  respondent_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDAPPLYMEMBER::_internal_respondent_id() const {
  return respondent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDAPPLYMEMBER::respondent_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDAPPLYMEMBER.respondent_id)
  return _internal_respondent_id();
}
inline void CS_GUILDAPPLYMEMBER::_internal_set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  respondent_id_ = value;
}
inline void CS_GUILDAPPLYMEMBER::set_respondent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_respondent_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDAPPLYMEMBER.respondent_id)
}

// -------------------------------------------------------------------

// SC_GUILDAPPLYMEMBER

// uint64 applicant_id = 1;
inline void SC_GUILDAPPLYMEMBER::clear_applicant_id() {
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDAPPLYMEMBER::_internal_applicant_id() const {
  return applicant_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_GUILDAPPLYMEMBER::applicant_id() const {
  // @@protoc_insertion_point(field_get:SC_GUILDAPPLYMEMBER.applicant_id)
  return _internal_applicant_id();
}
inline void SC_GUILDAPPLYMEMBER::_internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applicant_id_ = value;
}
inline void SC_GUILDAPPLYMEMBER::set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_applicant_id(value);
  // @@protoc_insertion_point(field_set:SC_GUILDAPPLYMEMBER.applicant_id)
}

// string applicant_name = 2;
inline void SC_GUILDAPPLYMEMBER::clear_applicant_name() {
  applicant_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_GUILDAPPLYMEMBER::applicant_name() const {
  // @@protoc_insertion_point(field_get:SC_GUILDAPPLYMEMBER.applicant_name)
  return _internal_applicant_name();
}
inline void SC_GUILDAPPLYMEMBER::set_applicant_name(const std::string& value) {
  _internal_set_applicant_name(value);
  // @@protoc_insertion_point(field_set:SC_GUILDAPPLYMEMBER.applicant_name)
}
inline std::string* SC_GUILDAPPLYMEMBER::mutable_applicant_name() {
  // @@protoc_insertion_point(field_mutable:SC_GUILDAPPLYMEMBER.applicant_name)
  return _internal_mutable_applicant_name();
}
inline const std::string& SC_GUILDAPPLYMEMBER::_internal_applicant_name() const {
  return applicant_name_.GetNoArena();
}
inline void SC_GUILDAPPLYMEMBER::_internal_set_applicant_name(const std::string& value) {
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_GUILDAPPLYMEMBER::set_applicant_name(std::string&& value) {
  
  applicant_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_GUILDAPPLYMEMBER.applicant_name)
}
inline void SC_GUILDAPPLYMEMBER::set_applicant_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_GUILDAPPLYMEMBER.applicant_name)
}
inline void SC_GUILDAPPLYMEMBER::set_applicant_name(const char* value, size_t size) {
  
  applicant_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_GUILDAPPLYMEMBER.applicant_name)
}
inline std::string* SC_GUILDAPPLYMEMBER::_internal_mutable_applicant_name() {
  
  return applicant_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_GUILDAPPLYMEMBER::release_applicant_name() {
  // @@protoc_insertion_point(field_release:SC_GUILDAPPLYMEMBER.applicant_name)
  
  return applicant_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_GUILDAPPLYMEMBER::set_allocated_applicant_name(std::string* applicant_name) {
  if (applicant_name != nullptr) {
    
  } else {
    
  }
  applicant_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicant_name);
  // @@protoc_insertion_point(field_set_allocated:SC_GUILDAPPLYMEMBER.applicant_name)
}

// -------------------------------------------------------------------

// CS_GUILDACCEPTAPPLY

// uint64 applicant_id = 1;
inline void CS_GUILDACCEPTAPPLY::clear_applicant_id() {
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTAPPLY::_internal_applicant_id() const {
  return applicant_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_GUILDACCEPTAPPLY::applicant_id() const {
  // @@protoc_insertion_point(field_get:CS_GUILDACCEPTAPPLY.applicant_id)
  return _internal_applicant_id();
}
inline void CS_GUILDACCEPTAPPLY::_internal_set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applicant_id_ = value;
}
inline void CS_GUILDACCEPTAPPLY::set_applicant_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_applicant_id(value);
  // @@protoc_insertion_point(field_set:CS_GUILDACCEPTAPPLY.applicant_id)
}

// bool result = 2;
inline void CS_GUILDACCEPTAPPLY::clear_result() {
  result_ = false;
}
inline bool CS_GUILDACCEPTAPPLY::_internal_result() const {
  return result_;
}
inline bool CS_GUILDACCEPTAPPLY::result() const {
  // @@protoc_insertion_point(field_get:CS_GUILDACCEPTAPPLY.result)
  return _internal_result();
}
inline void CS_GUILDACCEPTAPPLY::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CS_GUILDACCEPTAPPLY::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CS_GUILDACCEPTAPPLY.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SC_MAPVAL_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_MAPVAL_State>() {
  return ::SC_MAPVAL_State_descriptor();
}
template <> struct is_proto_enum< ::SC_STATUS_ACTION_ACTION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_STATUS_ACTION_ACTION>() {
  return ::SC_STATUS_ACTION_ACTION_descriptor();
}
template <> struct is_proto_enum< ::SC_ITEM_CHANGE_ChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ITEM_CHANGE_ChangeType>() {
  return ::SC_ITEM_CHANGE_ChangeType_descriptor();
}
template <> struct is_proto_enum< ::SC_TEAMMEMBER_ACTION_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TEAMMEMBER_ACTION_Action>() {
  return ::SC_TEAMMEMBER_ACTION_Action_descriptor();
}
template <> struct is_proto_enum< ::SC_GUILDMEMBER_ACTION_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_GUILDMEMBER_ACTION_Action>() {
  return ::SC_GUILDMEMBER_ACTION_Action_descriptor();
}
template <> struct is_proto_enum< ::TalkChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TalkChannel>() {
  return ::TalkChannel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2fzone_5fservice_2eproto
