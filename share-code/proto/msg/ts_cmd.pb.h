// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/ts_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2fts_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2fts_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2fts_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2fts_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fts_5fcmd_2eproto;
class SC_KEY;
class SC_KEYDefaultTypeInternal;
extern SC_KEYDefaultTypeInternal _SC_KEY_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SC_KEY* Arena::CreateMaybeMessage<::SC_KEY>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TS_CMD : int {
  CMD_BEGIN = 0,
  CMD_SC_KEY = 1,
  CMD_PING = 2,
  CMD_PONG = 3,
  CMD_WORLD_BEGIN = 10,
  CMD_WORLD_END = 999,
  CMD_ZONE_BEGIN = 1000,
  CMD_ZONE_END = 3999,
  CMD_CLOSE = 9999,
  CMD_MAX = 10000,
  TS_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TS_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TS_CMD_IsValid(int value);
constexpr TS_CMD TS_CMD_MIN = CMD_BEGIN;
constexpr TS_CMD TS_CMD_MAX = CMD_MAX;
constexpr int TS_CMD_ARRAYSIZE = TS_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TS_CMD_descriptor();
template<typename T>
inline const std::string& TS_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TS_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TS_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TS_CMD_descriptor(), enum_t_value);
}
inline bool TS_CMD_Parse(
    const std::string& name, TS_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TS_CMD>(
    TS_CMD_descriptor(), name, value);
}
// ===================================================================

class SC_KEY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_KEY) */ {
 public:
  SC_KEY();
  virtual ~SC_KEY();

  SC_KEY(const SC_KEY& from);
  SC_KEY(SC_KEY&& from) noexcept
    : SC_KEY() {
    *this = ::std::move(from);
  }

  inline SC_KEY& operator=(const SC_KEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_KEY& operator=(SC_KEY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_KEY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_KEY* internal_default_instance() {
    return reinterpret_cast<const SC_KEY*>(
               &_SC_KEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_KEY& a, SC_KEY& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_KEY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_KEY* New() const final {
    return CreateMaybeMessage<SC_KEY>(nullptr);
  }

  SC_KEY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_KEY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_KEY& from);
  void MergeFrom(const SC_KEY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_KEY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_KEY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fts_5fcmd_2eproto);
    return ::descriptor_table_msg_2fts_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_KEY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fts_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_KEY

// uint32 key = 1;
inline void SC_KEY::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_KEY::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_KEY::key() const {
  // @@protoc_insertion_point(field_get:SC_KEY.key)
  return _internal_key();
}
inline void SC_KEY::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void SC_KEY::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:SC_KEY.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TS_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TS_CMD>() {
  return ::TS_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2fts_5fcmd_2eproto
