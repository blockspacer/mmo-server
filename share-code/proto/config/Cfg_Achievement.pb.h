// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/Cfg_Achievement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAchievement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAchievement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2fCfg_5fAchievement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2fCfg_5fAchievement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2fCfg_5fAchievement_2eproto;
class Cfg_Achievement;
class Cfg_AchievementDefaultTypeInternal;
extern Cfg_AchievementDefaultTypeInternal _Cfg_Achievement_default_instance_;
class Cfg_Achievement_Row;
class Cfg_Achievement_RowDefaultTypeInternal;
extern Cfg_Achievement_RowDefaultTypeInternal _Cfg_Achievement_Row_default_instance_;
class Cfg_Achievement_Row_AwardData;
class Cfg_Achievement_Row_AwardDataDefaultTypeInternal;
extern Cfg_Achievement_Row_AwardDataDefaultTypeInternal _Cfg_Achievement_Row_AwardData_default_instance_;
class Cfg_Achievement_Row_CheckData;
class Cfg_Achievement_Row_CheckDataDefaultTypeInternal;
extern Cfg_Achievement_Row_CheckDataDefaultTypeInternal _Cfg_Achievement_Row_CheckData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cfg_Achievement* Arena::CreateMaybeMessage<::Cfg_Achievement>(Arena*);
template<> ::Cfg_Achievement_Row* Arena::CreateMaybeMessage<::Cfg_Achievement_Row>(Arena*);
template<> ::Cfg_Achievement_Row_AwardData* Arena::CreateMaybeMessage<::Cfg_Achievement_Row_AwardData>(Arena*);
template<> ::Cfg_Achievement_Row_CheckData* Arena::CreateMaybeMessage<::Cfg_Achievement_Row_CheckData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum AchiConditionType : int {
  CONDITION_NONE = 0,
  CONDITION_LEVEL = 1,
  CONDITION_MONEY = 2,
  CONDITION_ACHIPOINT = 3,
  CONDITION_COMBATPOWER = 4,
  CONDITION_USER_FRIEND = 5,
  CONDITION_VIP = 6,
  CONDITION_TASK = 10,
  CONDITION_SKILL_LEARN = 11,
  CONDITION_EQUIPMENT = 20,
  CONDITION_EQUIPMENT_SUIT = 21,
  CONDITION_EQUIPMENT_QUILITY = 22,
  CONDITION_EQUIPMENT_ADDITION = 23,
  CONDITION_UPGRADE_ADDITION = 24,
  CONDITION_FORMULAITEM = 25,
  CONDITION_UPGRADEITEM = 26,
  CONDITION_FINISH_ACHI = 27,
  CONDITION_DATA_COUNT = 30,
  AchiConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AchiConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AchiConditionType_IsValid(int value);
constexpr AchiConditionType AchiConditionType_MIN = CONDITION_NONE;
constexpr AchiConditionType AchiConditionType_MAX = CONDITION_DATA_COUNT;
constexpr int AchiConditionType_ARRAYSIZE = AchiConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AchiConditionType_descriptor();
template<typename T>
inline const std::string& AchiConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AchiConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AchiConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AchiConditionType_descriptor(), enum_t_value);
}
inline bool AchiConditionType_Parse(
    const std::string& name, AchiConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AchiConditionType>(
    AchiConditionType_descriptor(), name, value);
}
// ===================================================================

class Cfg_Achievement_Row_CheckData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Achievement.Row.CheckData) */ {
 public:
  Cfg_Achievement_Row_CheckData();
  virtual ~Cfg_Achievement_Row_CheckData();

  Cfg_Achievement_Row_CheckData(const Cfg_Achievement_Row_CheckData& from);
  Cfg_Achievement_Row_CheckData(Cfg_Achievement_Row_CheckData&& from) noexcept
    : Cfg_Achievement_Row_CheckData() {
    *this = ::std::move(from);
  }

  inline Cfg_Achievement_Row_CheckData& operator=(const Cfg_Achievement_Row_CheckData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Achievement_Row_CheckData& operator=(Cfg_Achievement_Row_CheckData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Achievement_Row_CheckData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Achievement_Row_CheckData* internal_default_instance() {
    return reinterpret_cast<const Cfg_Achievement_Row_CheckData*>(
               &_Cfg_Achievement_Row_CheckData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cfg_Achievement_Row_CheckData& a, Cfg_Achievement_Row_CheckData& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Achievement_Row_CheckData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Achievement_Row_CheckData* New() const final {
    return CreateMaybeMessage<Cfg_Achievement_Row_CheckData>(nullptr);
  }

  Cfg_Achievement_Row_CheckData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Achievement_Row_CheckData>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Achievement_Row_CheckData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Achievement.Row.CheckData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAchievement_2eproto);
    return ::descriptor_table_config_2fCfg_5fAchievement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckTypeFieldNumber = 1,
    kVal0FieldNumber = 2,
    kVal1FieldNumber = 3,
    kVal2FieldNumber = 4,
  };
  // .AchiConditionType check_type = 1;
  void clear_check_type();
  ::AchiConditionType check_type() const;
  void set_check_type(::AchiConditionType value);
  private:
  ::AchiConditionType _internal_check_type() const;
  void _internal_set_check_type(::AchiConditionType value);
  public:

  // uint32 val0 = 2;
  void clear_val0();
  ::PROTOBUF_NAMESPACE_ID::uint32 val0() const;
  void set_val0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val0() const;
  void _internal_set_val0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 val1 = 3;
  void clear_val1();
  ::PROTOBUF_NAMESPACE_ID::uint32 val1() const;
  void set_val1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val1() const;
  void _internal_set_val1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 val2 = 4;
  void clear_val2();
  ::PROTOBUF_NAMESPACE_ID::uint32 val2() const;
  void set_val2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val2() const;
  void _internal_set_val2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_Achievement.Row.CheckData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int check_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAchievement_2eproto;
};
// -------------------------------------------------------------------

class Cfg_Achievement_Row_AwardData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Achievement.Row.AwardData) */ {
 public:
  Cfg_Achievement_Row_AwardData();
  virtual ~Cfg_Achievement_Row_AwardData();

  Cfg_Achievement_Row_AwardData(const Cfg_Achievement_Row_AwardData& from);
  Cfg_Achievement_Row_AwardData(Cfg_Achievement_Row_AwardData&& from) noexcept
    : Cfg_Achievement_Row_AwardData() {
    *this = ::std::move(from);
  }

  inline Cfg_Achievement_Row_AwardData& operator=(const Cfg_Achievement_Row_AwardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Achievement_Row_AwardData& operator=(Cfg_Achievement_Row_AwardData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Achievement_Row_AwardData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Achievement_Row_AwardData* internal_default_instance() {
    return reinterpret_cast<const Cfg_Achievement_Row_AwardData*>(
               &_Cfg_Achievement_Row_AwardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cfg_Achievement_Row_AwardData& a, Cfg_Achievement_Row_AwardData& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Achievement_Row_AwardData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Achievement_Row_AwardData* New() const final {
    return CreateMaybeMessage<Cfg_Achievement_Row_AwardData>(nullptr);
  }

  Cfg_Achievement_Row_AwardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Achievement_Row_AwardData>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Achievement_Row_AwardData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Achievement.Row.AwardData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAchievement_2eproto);
    return ::descriptor_table_config_2fCfg_5fAchievement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
    kFlagFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flag = 3;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_Achievement.Row.AwardData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAchievement_2eproto;
};
// -------------------------------------------------------------------

class Cfg_Achievement_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Achievement.Row) */ {
 public:
  Cfg_Achievement_Row();
  virtual ~Cfg_Achievement_Row();

  Cfg_Achievement_Row(const Cfg_Achievement_Row& from);
  Cfg_Achievement_Row(Cfg_Achievement_Row&& from) noexcept
    : Cfg_Achievement_Row() {
    *this = ::std::move(from);
  }

  inline Cfg_Achievement_Row& operator=(const Cfg_Achievement_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Achievement_Row& operator=(Cfg_Achievement_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Achievement_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Achievement_Row* internal_default_instance() {
    return reinterpret_cast<const Cfg_Achievement_Row*>(
               &_Cfg_Achievement_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cfg_Achievement_Row& a, Cfg_Achievement_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Achievement_Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Achievement_Row* New() const final {
    return CreateMaybeMessage<Cfg_Achievement_Row>(nullptr);
  }

  Cfg_Achievement_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Achievement_Row>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Achievement_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Achievement.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAchievement_2eproto);
    return ::descriptor_table_config_2fCfg_5fAchievement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cfg_Achievement_Row_CheckData CheckData;
  typedef Cfg_Achievement_Row_AwardData AwardData;

  // accessors -------------------------------------------------------

  enum : int {
    kAwardListFieldNumber = 9,
    kNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kCheckDataFieldNumber = 8,
    kIdFieldNumber = 1,
    kSortFieldNumber = 2,
    kLevReqFieldNumber = 5,
    kProfReqFieldNumber = 6,
    kGroupIdFieldNumber = 7,
    kAwardExpFieldNumber = 10,
    kAwardAchipointFieldNumber = 11,
  };
  // repeated .Cfg_Achievement.Row.AwardData award_list = 9;
  int award_list_size() const;
  private:
  int _internal_award_list_size() const;
  public:
  void clear_award_list();
  ::Cfg_Achievement_Row_AwardData* mutable_award_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row_AwardData >*
      mutable_award_list();
  private:
  const ::Cfg_Achievement_Row_AwardData& _internal_award_list(int index) const;
  ::Cfg_Achievement_Row_AwardData* _internal_add_award_list();
  public:
  const ::Cfg_Achievement_Row_AwardData& award_list(int index) const;
  ::Cfg_Achievement_Row_AwardData* add_award_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row_AwardData >&
      award_list() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string desc = 4;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .Cfg_Achievement.Row.CheckData check_data = 8;
  bool has_check_data() const;
  private:
  bool _internal_has_check_data() const;
  public:
  void clear_check_data();
  const ::Cfg_Achievement_Row_CheckData& check_data() const;
  ::Cfg_Achievement_Row_CheckData* release_check_data();
  ::Cfg_Achievement_Row_CheckData* mutable_check_data();
  void set_allocated_check_data(::Cfg_Achievement_Row_CheckData* check_data);
  private:
  const ::Cfg_Achievement_Row_CheckData& _internal_check_data() const;
  ::Cfg_Achievement_Row_CheckData* _internal_mutable_check_data();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sort = 2;
  void clear_sort();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort() const;
  void set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sort() const;
  void _internal_set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lev_req = 5;
  void clear_lev_req();
  ::PROTOBUF_NAMESPACE_ID::uint32 lev_req() const;
  void set_lev_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lev_req() const;
  void _internal_set_lev_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prof_req = 6;
  void clear_prof_req();
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_req() const;
  void set_prof_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prof_req() const;
  void _internal_set_prof_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 7;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 award_exp = 10;
  void clear_award_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 award_exp() const;
  void set_award_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_award_exp() const;
  void _internal_set_award_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 award_achipoint = 11;
  void clear_award_achipoint();
  ::PROTOBUF_NAMESPACE_ID::uint32 award_achipoint() const;
  void set_award_achipoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_award_achipoint() const;
  void _internal_set_award_achipoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_Achievement.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row_AwardData > award_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::Cfg_Achievement_Row_CheckData* check_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lev_req_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_req_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 award_exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 award_achipoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAchievement_2eproto;
};
// -------------------------------------------------------------------

class Cfg_Achievement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Achievement) */ {
 public:
  Cfg_Achievement();
  virtual ~Cfg_Achievement();

  Cfg_Achievement(const Cfg_Achievement& from);
  Cfg_Achievement(Cfg_Achievement&& from) noexcept
    : Cfg_Achievement() {
    *this = ::std::move(from);
  }

  inline Cfg_Achievement& operator=(const Cfg_Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Achievement& operator=(Cfg_Achievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Achievement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Achievement* internal_default_instance() {
    return reinterpret_cast<const Cfg_Achievement*>(
               &_Cfg_Achievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Cfg_Achievement& a, Cfg_Achievement& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Achievement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Achievement* New() const final {
    return CreateMaybeMessage<Cfg_Achievement>(nullptr);
  }

  Cfg_Achievement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Achievement>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Achievement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Achievement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAchievement_2eproto);
    return ::descriptor_table_config_2fCfg_5fAchievement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cfg_Achievement_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .Cfg_Achievement.Row rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Cfg_Achievement_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row >*
      mutable_rows();
  private:
  const ::Cfg_Achievement_Row& _internal_rows(int index) const;
  ::Cfg_Achievement_Row* _internal_add_rows();
  public:
  const ::Cfg_Achievement_Row& rows(int index) const;
  ::Cfg_Achievement_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:Cfg_Achievement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row > rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAchievement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cfg_Achievement_Row_CheckData

// .AchiConditionType check_type = 1;
inline void Cfg_Achievement_Row_CheckData::clear_check_type() {
  check_type_ = 0;
}
inline ::AchiConditionType Cfg_Achievement_Row_CheckData::_internal_check_type() const {
  return static_cast< ::AchiConditionType >(check_type_);
}
inline ::AchiConditionType Cfg_Achievement_Row_CheckData::check_type() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.CheckData.check_type)
  return _internal_check_type();
}
inline void Cfg_Achievement_Row_CheckData::_internal_set_check_type(::AchiConditionType value) {
  
  check_type_ = value;
}
inline void Cfg_Achievement_Row_CheckData::set_check_type(::AchiConditionType value) {
  _internal_set_check_type(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.CheckData.check_type)
}

// uint32 val0 = 2;
inline void Cfg_Achievement_Row_CheckData::clear_val0() {
  val0_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::_internal_val0() const {
  return val0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::val0() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.CheckData.val0)
  return _internal_val0();
}
inline void Cfg_Achievement_Row_CheckData::_internal_set_val0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  val0_ = value;
}
inline void Cfg_Achievement_Row_CheckData::set_val0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val0(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.CheckData.val0)
}

// uint32 val1 = 3;
inline void Cfg_Achievement_Row_CheckData::clear_val1() {
  val1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::_internal_val1() const {
  return val1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::val1() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.CheckData.val1)
  return _internal_val1();
}
inline void Cfg_Achievement_Row_CheckData::_internal_set_val1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  val1_ = value;
}
inline void Cfg_Achievement_Row_CheckData::set_val1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val1(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.CheckData.val1)
}

// uint32 val2 = 4;
inline void Cfg_Achievement_Row_CheckData::clear_val2() {
  val2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::_internal_val2() const {
  return val2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_CheckData::val2() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.CheckData.val2)
  return _internal_val2();
}
inline void Cfg_Achievement_Row_CheckData::_internal_set_val2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  val2_ = value;
}
inline void Cfg_Achievement_Row_CheckData::set_val2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val2(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.CheckData.val2)
}

// -------------------------------------------------------------------

// Cfg_Achievement_Row_AwardData

// uint32 type = 1;
inline void Cfg_Achievement_Row_AwardData::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::type() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.AwardData.type)
  return _internal_type();
}
inline void Cfg_Achievement_Row_AwardData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Cfg_Achievement_Row_AwardData::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.AwardData.type)
}

// uint32 num = 2;
inline void Cfg_Achievement_Row_AwardData::clear_num() {
  num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::num() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.AwardData.num)
  return _internal_num();
}
inline void Cfg_Achievement_Row_AwardData::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ = value;
}
inline void Cfg_Achievement_Row_AwardData::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.AwardData.num)
}

// uint32 flag = 3;
inline void Cfg_Achievement_Row_AwardData::clear_flag() {
  flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row_AwardData::flag() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.AwardData.flag)
  return _internal_flag();
}
inline void Cfg_Achievement_Row_AwardData::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flag_ = value;
}
inline void Cfg_Achievement_Row_AwardData::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.AwardData.flag)
}

// -------------------------------------------------------------------

// Cfg_Achievement_Row

// uint32 id = 1;
inline void Cfg_Achievement_Row::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::id() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.id)
  return _internal_id();
}
inline void Cfg_Achievement_Row::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Cfg_Achievement_Row::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.id)
}

// uint32 sort = 2;
inline void Cfg_Achievement_Row::clear_sort() {
  sort_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_sort() const {
  return sort_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::sort() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.sort)
  return _internal_sort();
}
inline void Cfg_Achievement_Row::_internal_set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sort_ = value;
}
inline void Cfg_Achievement_Row::set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.sort)
}

// string name = 3;
inline void Cfg_Achievement_Row::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Cfg_Achievement_Row::name() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.name)
  return _internal_name();
}
inline void Cfg_Achievement_Row::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.name)
}
inline std::string* Cfg_Achievement_Row::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Cfg_Achievement.Row.name)
  return _internal_mutable_name();
}
inline const std::string& Cfg_Achievement_Row::_internal_name() const {
  return name_.GetNoArena();
}
inline void Cfg_Achievement_Row::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Cfg_Achievement_Row::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cfg_Achievement.Row.name)
}
inline void Cfg_Achievement_Row::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cfg_Achievement.Row.name)
}
inline void Cfg_Achievement_Row::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cfg_Achievement.Row.name)
}
inline std::string* Cfg_Achievement_Row::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cfg_Achievement_Row::release_name() {
  // @@protoc_insertion_point(field_release:Cfg_Achievement.Row.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cfg_Achievement_Row::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cfg_Achievement.Row.name)
}

// string desc = 4;
inline void Cfg_Achievement_Row::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Cfg_Achievement_Row::desc() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.desc)
  return _internal_desc();
}
inline void Cfg_Achievement_Row::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.desc)
}
inline std::string* Cfg_Achievement_Row::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:Cfg_Achievement.Row.desc)
  return _internal_mutable_desc();
}
inline const std::string& Cfg_Achievement_Row::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void Cfg_Achievement_Row::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Cfg_Achievement_Row::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cfg_Achievement.Row.desc)
}
inline void Cfg_Achievement_Row::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cfg_Achievement.Row.desc)
}
inline void Cfg_Achievement_Row::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cfg_Achievement.Row.desc)
}
inline std::string* Cfg_Achievement_Row::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cfg_Achievement_Row::release_desc() {
  // @@protoc_insertion_point(field_release:Cfg_Achievement.Row.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cfg_Achievement_Row::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:Cfg_Achievement.Row.desc)
}

// uint32 lev_req = 5;
inline void Cfg_Achievement_Row::clear_lev_req() {
  lev_req_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_lev_req() const {
  return lev_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::lev_req() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.lev_req)
  return _internal_lev_req();
}
inline void Cfg_Achievement_Row::_internal_set_lev_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lev_req_ = value;
}
inline void Cfg_Achievement_Row::set_lev_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lev_req(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.lev_req)
}

// uint32 prof_req = 6;
inline void Cfg_Achievement_Row::clear_prof_req() {
  prof_req_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_prof_req() const {
  return prof_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::prof_req() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.prof_req)
  return _internal_prof_req();
}
inline void Cfg_Achievement_Row::_internal_set_prof_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prof_req_ = value;
}
inline void Cfg_Achievement_Row::set_prof_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prof_req(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.prof_req)
}

// uint32 group_id = 7;
inline void Cfg_Achievement_Row::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::group_id() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.group_id)
  return _internal_group_id();
}
inline void Cfg_Achievement_Row::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void Cfg_Achievement_Row::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.group_id)
}

// .Cfg_Achievement.Row.CheckData check_data = 8;
inline bool Cfg_Achievement_Row::_internal_has_check_data() const {
  return this != internal_default_instance() && check_data_ != nullptr;
}
inline bool Cfg_Achievement_Row::has_check_data() const {
  return _internal_has_check_data();
}
inline void Cfg_Achievement_Row::clear_check_data() {
  if (GetArenaNoVirtual() == nullptr && check_data_ != nullptr) {
    delete check_data_;
  }
  check_data_ = nullptr;
}
inline const ::Cfg_Achievement_Row_CheckData& Cfg_Achievement_Row::_internal_check_data() const {
  const ::Cfg_Achievement_Row_CheckData* p = check_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Cfg_Achievement_Row_CheckData*>(
      &::_Cfg_Achievement_Row_CheckData_default_instance_);
}
inline const ::Cfg_Achievement_Row_CheckData& Cfg_Achievement_Row::check_data() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.check_data)
  return _internal_check_data();
}
inline ::Cfg_Achievement_Row_CheckData* Cfg_Achievement_Row::release_check_data() {
  // @@protoc_insertion_point(field_release:Cfg_Achievement.Row.check_data)
  
  ::Cfg_Achievement_Row_CheckData* temp = check_data_;
  check_data_ = nullptr;
  return temp;
}
inline ::Cfg_Achievement_Row_CheckData* Cfg_Achievement_Row::_internal_mutable_check_data() {
  
  if (check_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cfg_Achievement_Row_CheckData>(GetArenaNoVirtual());
    check_data_ = p;
  }
  return check_data_;
}
inline ::Cfg_Achievement_Row_CheckData* Cfg_Achievement_Row::mutable_check_data() {
  // @@protoc_insertion_point(field_mutable:Cfg_Achievement.Row.check_data)
  return _internal_mutable_check_data();
}
inline void Cfg_Achievement_Row::set_allocated_check_data(::Cfg_Achievement_Row_CheckData* check_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete check_data_;
  }
  if (check_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_data, submessage_arena);
    }
    
  } else {
    
  }
  check_data_ = check_data;
  // @@protoc_insertion_point(field_set_allocated:Cfg_Achievement.Row.check_data)
}

// repeated .Cfg_Achievement.Row.AwardData award_list = 9;
inline int Cfg_Achievement_Row::_internal_award_list_size() const {
  return award_list_.size();
}
inline int Cfg_Achievement_Row::award_list_size() const {
  return _internal_award_list_size();
}
inline void Cfg_Achievement_Row::clear_award_list() {
  award_list_.Clear();
}
inline ::Cfg_Achievement_Row_AwardData* Cfg_Achievement_Row::mutable_award_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cfg_Achievement.Row.award_list)
  return award_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row_AwardData >*
Cfg_Achievement_Row::mutable_award_list() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_Achievement.Row.award_list)
  return &award_list_;
}
inline const ::Cfg_Achievement_Row_AwardData& Cfg_Achievement_Row::_internal_award_list(int index) const {
  return award_list_.Get(index);
}
inline const ::Cfg_Achievement_Row_AwardData& Cfg_Achievement_Row::award_list(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.award_list)
  return _internal_award_list(index);
}
inline ::Cfg_Achievement_Row_AwardData* Cfg_Achievement_Row::_internal_add_award_list() {
  return award_list_.Add();
}
inline ::Cfg_Achievement_Row_AwardData* Cfg_Achievement_Row::add_award_list() {
  // @@protoc_insertion_point(field_add:Cfg_Achievement.Row.award_list)
  return _internal_add_award_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row_AwardData >&
Cfg_Achievement_Row::award_list() const {
  // @@protoc_insertion_point(field_list:Cfg_Achievement.Row.award_list)
  return award_list_;
}

// uint32 award_exp = 10;
inline void Cfg_Achievement_Row::clear_award_exp() {
  award_exp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_award_exp() const {
  return award_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::award_exp() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.award_exp)
  return _internal_award_exp();
}
inline void Cfg_Achievement_Row::_internal_set_award_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  award_exp_ = value;
}
inline void Cfg_Achievement_Row::set_award_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_award_exp(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.award_exp)
}

// uint32 award_achipoint = 11;
inline void Cfg_Achievement_Row::clear_award_achipoint() {
  award_achipoint_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::_internal_award_achipoint() const {
  return award_achipoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Achievement_Row::award_achipoint() const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.Row.award_achipoint)
  return _internal_award_achipoint();
}
inline void Cfg_Achievement_Row::_internal_set_award_achipoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  award_achipoint_ = value;
}
inline void Cfg_Achievement_Row::set_award_achipoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_award_achipoint(value);
  // @@protoc_insertion_point(field_set:Cfg_Achievement.Row.award_achipoint)
}

// -------------------------------------------------------------------

// Cfg_Achievement

// repeated .Cfg_Achievement.Row rows = 1;
inline int Cfg_Achievement::_internal_rows_size() const {
  return rows_.size();
}
inline int Cfg_Achievement::rows_size() const {
  return _internal_rows_size();
}
inline void Cfg_Achievement::clear_rows() {
  rows_.Clear();
}
inline ::Cfg_Achievement_Row* Cfg_Achievement::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:Cfg_Achievement.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row >*
Cfg_Achievement::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_Achievement.rows)
  return &rows_;
}
inline const ::Cfg_Achievement_Row& Cfg_Achievement::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::Cfg_Achievement_Row& Cfg_Achievement::rows(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_Achievement.rows)
  return _internal_rows(index);
}
inline ::Cfg_Achievement_Row* Cfg_Achievement::_internal_add_rows() {
  return rows_.Add();
}
inline ::Cfg_Achievement_Row* Cfg_Achievement::add_rows() {
  // @@protoc_insertion_point(field_add:Cfg_Achievement.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Achievement_Row >&
Cfg_Achievement::rows() const {
  // @@protoc_insertion_point(field_list:Cfg_Achievement.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AchiConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AchiConditionType>() {
  return ::AchiConditionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAchievement_2eproto
