name: C/C++ CI

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: apt-all
      run: sudo bash server-depends/src/aptget_install.sh

    - name: cache-depends
      id: cache-depends
      uses: actions/cache@v1
      with:
        path: server-depends
        key: server-depends-${{ hashFiles('**/src/build_all.sh') }}
        restore-keys: server-depends-${{ hashFiles('**/src/build_all.sh') }}

    - name: build depends
      if: steps.cache-depends.outputs.cache-hit != 'true'
      run: bash server-depends/src/build_all.sh

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      uses: actions/cache@v1.1.0
      with:
        path: .ccache
        key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
        restore-keys: |
            ${ { matrix.config.name } }-ccache-
    - name: config ccache
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "800M")
        set(ENV{CCACHE_SLOPPINESS} "pch_defines,time_macros")
      

    - name: configure
      run: bash server-code/releasebuild.sh