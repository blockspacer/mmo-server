// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/world_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2fworld_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2fworld_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2fworld_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2fworld_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fworld_5fservice_2eproto;
class CS_CREATEACTOR;
class CS_CREATEACTORDefaultTypeInternal;
extern CS_CREATEACTORDefaultTypeInternal _CS_CREATEACTOR_default_instance_;
class CS_LOGIN;
class CS_LOGINDefaultTypeInternal;
extern CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;
class CS_SELECTACTOR;
class CS_SELECTACTORDefaultTypeInternal;
extern CS_SELECTACTORDefaultTypeInternal _CS_SELECTACTOR_default_instance_;
class SC_ACTORINFOLIST;
class SC_ACTORINFOLISTDefaultTypeInternal;
extern SC_ACTORINFOLISTDefaultTypeInternal _SC_ACTORINFOLIST_default_instance_;
class SC_ACTORINFOLIST_SC_ACTOR_INFO;
class SC_ACTORINFOLIST_SC_ACTOR_INFODefaultTypeInternal;
extern SC_ACTORINFOLIST_SC_ACTOR_INFODefaultTypeInternal _SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_;
class SC_CREATEACTOR;
class SC_CREATEACTORDefaultTypeInternal;
extern SC_CREATEACTORDefaultTypeInternal _SC_CREATEACTOR_default_instance_;
class SC_LOGIN;
class SC_LOGINDefaultTypeInternal;
extern SC_LOGINDefaultTypeInternal _SC_LOGIN_default_instance_;
class SC_SELECTACTOR;
class SC_SELECTACTORDefaultTypeInternal;
extern SC_SELECTACTORDefaultTypeInternal _SC_SELECTACTOR_default_instance_;
class SC_WAITINFO;
class SC_WAITINFODefaultTypeInternal;
extern SC_WAITINFODefaultTypeInternal _SC_WAITINFO_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CS_CREATEACTOR* Arena::CreateMaybeMessage<::CS_CREATEACTOR>(Arena*);
template<> ::CS_LOGIN* Arena::CreateMaybeMessage<::CS_LOGIN>(Arena*);
template<> ::CS_SELECTACTOR* Arena::CreateMaybeMessage<::CS_SELECTACTOR>(Arena*);
template<> ::SC_ACTORINFOLIST* Arena::CreateMaybeMessage<::SC_ACTORINFOLIST>(Arena*);
template<> ::SC_ACTORINFOLIST_SC_ACTOR_INFO* Arena::CreateMaybeMessage<::SC_ACTORINFOLIST_SC_ACTOR_INFO>(Arena*);
template<> ::SC_CREATEACTOR* Arena::CreateMaybeMessage<::SC_CREATEACTOR>(Arena*);
template<> ::SC_LOGIN* Arena::CreateMaybeMessage<::SC_LOGIN>(Arena*);
template<> ::SC_SELECTACTOR* Arena::CreateMaybeMessage<::SC_SELECTACTOR>(Arena*);
template<> ::SC_WAITINFO* Arena::CreateMaybeMessage<::SC_WAITINFO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SC_LOGIN_ErrorCode : int {
  SC_LOGIN_ErrorCode_EC_SUCC = 0,
  SC_LOGIN_ErrorCode_EC_PROG_VER = 1,
  SC_LOGIN_ErrorCode_EC_LAST_KEY = 2,
  SC_LOGIN_ErrorCode_EC_AUTH = 3,
  SC_LOGIN_ErrorCode_EC_WAIT_AUTH = 4,
  SC_LOGIN_ErrorCode_SC_LOGIN_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_LOGIN_ErrorCode_SC_LOGIN_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_LOGIN_ErrorCode_IsValid(int value);
constexpr SC_LOGIN_ErrorCode SC_LOGIN_ErrorCode_ErrorCode_MIN = SC_LOGIN_ErrorCode_EC_SUCC;
constexpr SC_LOGIN_ErrorCode SC_LOGIN_ErrorCode_ErrorCode_MAX = SC_LOGIN_ErrorCode_EC_WAIT_AUTH;
constexpr int SC_LOGIN_ErrorCode_ErrorCode_ARRAYSIZE = SC_LOGIN_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_LOGIN_ErrorCode_descriptor();
template<typename T>
inline const std::string& SC_LOGIN_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_LOGIN_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_LOGIN_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_LOGIN_ErrorCode_descriptor(), enum_t_value);
}
inline bool SC_LOGIN_ErrorCode_Parse(
    const std::string& name, SC_LOGIN_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_LOGIN_ErrorCode>(
    SC_LOGIN_ErrorCode_descriptor(), name, value);
}
enum SC_CREATEACTOR_ErrorCode : int {
  SC_CREATEACTOR_ErrorCode_EC_SUCC = 0,
  SC_CREATEACTOR_ErrorCode_EC_SAME_NAME = 1,
  SC_CREATEACTOR_ErrorCode_EC_NAME_TOO_LONG = 2,
  SC_CREATEACTOR_ErrorCode_EC_NAME_TOO_SHORT = 3,
  SC_CREATEACTOR_ErrorCode_EC_NAME_ILLEGAL = 4,
  SC_CREATEACTOR_ErrorCode_EC_MAX_ACTOR = 5,
  SC_CREATEACTOR_ErrorCode_SC_CREATEACTOR_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_CREATEACTOR_ErrorCode_SC_CREATEACTOR_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_CREATEACTOR_ErrorCode_IsValid(int value);
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR_ErrorCode_ErrorCode_MIN = SC_CREATEACTOR_ErrorCode_EC_SUCC;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR_ErrorCode_ErrorCode_MAX = SC_CREATEACTOR_ErrorCode_EC_MAX_ACTOR;
constexpr int SC_CREATEACTOR_ErrorCode_ErrorCode_ARRAYSIZE = SC_CREATEACTOR_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_CREATEACTOR_ErrorCode_descriptor();
template<typename T>
inline const std::string& SC_CREATEACTOR_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_CREATEACTOR_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_CREATEACTOR_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_CREATEACTOR_ErrorCode_descriptor(), enum_t_value);
}
inline bool SC_CREATEACTOR_ErrorCode_Parse(
    const std::string& name, SC_CREATEACTOR_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_CREATEACTOR_ErrorCode>(
    SC_CREATEACTOR_ErrorCode_descriptor(), name, value);
}
enum SC_SELECTACTOR_ErrorCode : int {
  SC_SELECTACTOR_ErrorCode_EC_SUCC = 0,
  SC_SELECTACTOR_ErrorCode_SC_SELECTACTOR_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SC_SELECTACTOR_ErrorCode_SC_SELECTACTOR_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SC_SELECTACTOR_ErrorCode_IsValid(int value);
constexpr SC_SELECTACTOR_ErrorCode SC_SELECTACTOR_ErrorCode_ErrorCode_MIN = SC_SELECTACTOR_ErrorCode_EC_SUCC;
constexpr SC_SELECTACTOR_ErrorCode SC_SELECTACTOR_ErrorCode_ErrorCode_MAX = SC_SELECTACTOR_ErrorCode_EC_SUCC;
constexpr int SC_SELECTACTOR_ErrorCode_ErrorCode_ARRAYSIZE = SC_SELECTACTOR_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_SELECTACTOR_ErrorCode_descriptor();
template<typename T>
inline const std::string& SC_SELECTACTOR_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SC_SELECTACTOR_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SC_SELECTACTOR_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SC_SELECTACTOR_ErrorCode_descriptor(), enum_t_value);
}
inline bool SC_SELECTACTOR_ErrorCode_Parse(
    const std::string& name, SC_SELECTACTOR_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SC_SELECTACTOR_ErrorCode>(
    SC_SELECTACTOR_ErrorCode_descriptor(), name, value);
}
enum WORLD_CS_CMD : int {
  WORLD_CS_CMD_NONE = 0,
  CMD_CS_LOGIN = 10,
  CMD_CS_CREATEACTOR = 11,
  CMD_CS_SELECTACTOR = 12,
  WORLD_CS_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WORLD_CS_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WORLD_CS_CMD_IsValid(int value);
constexpr WORLD_CS_CMD WORLD_CS_CMD_MIN = WORLD_CS_CMD_NONE;
constexpr WORLD_CS_CMD WORLD_CS_CMD_MAX = CMD_CS_SELECTACTOR;
constexpr int WORLD_CS_CMD_ARRAYSIZE = WORLD_CS_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WORLD_CS_CMD_descriptor();
template<typename T>
inline const std::string& WORLD_CS_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WORLD_CS_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WORLD_CS_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WORLD_CS_CMD_descriptor(), enum_t_value);
}
inline bool WORLD_CS_CMD_Parse(
    const std::string& name, WORLD_CS_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WORLD_CS_CMD>(
    WORLD_CS_CMD_descriptor(), name, value);
}
enum WORLD_SC_CMD : int {
  WORLD_SC_CMD_NONE = 0,
  CMD_SC_LOGIN = 10,
  CMD_SC_ACTORINFOLIST = 11,
  CMD_SC_WAITINFO = 12,
  CMD_SC_CREATEACTOR = 13,
  CMD_SC_SELECTACTOR = 14,
  WORLD_SC_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WORLD_SC_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WORLD_SC_CMD_IsValid(int value);
constexpr WORLD_SC_CMD WORLD_SC_CMD_MIN = WORLD_SC_CMD_NONE;
constexpr WORLD_SC_CMD WORLD_SC_CMD_MAX = CMD_SC_SELECTACTOR;
constexpr int WORLD_SC_CMD_ARRAYSIZE = WORLD_SC_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WORLD_SC_CMD_descriptor();
template<typename T>
inline const std::string& WORLD_SC_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WORLD_SC_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WORLD_SC_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WORLD_SC_CMD_descriptor(), enum_t_value);
}
inline bool WORLD_SC_CMD_Parse(
    const std::string& name, WORLD_SC_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WORLD_SC_CMD>(
    WORLD_SC_CMD_descriptor(), name, value);
}
// ===================================================================

class CS_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_LOGIN) */ {
 public:
  CS_LOGIN();
  virtual ~CS_LOGIN();

  CS_LOGIN(const CS_LOGIN& from);
  CS_LOGIN(CS_LOGIN&& from) noexcept
    : CS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN& operator=(const CS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN& operator=(CS_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN*>(
               &_CS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_LOGIN& a, CS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_LOGIN* New() const final {
    return CreateMaybeMessage<CS_LOGIN>(nullptr);
  }

  CS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_LOGIN& from);
  void MergeFrom(const CS_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 1,
    kAuthFieldNumber = 2,
    kLastSuccKeyFieldNumber = 3,
    kProgVerFieldNumber = 4,
  };
  // string openid = 1;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // string auth = 2;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string last_succ_key = 3;
  void clear_last_succ_key();
  const std::string& last_succ_key() const;
  void set_last_succ_key(const std::string& value);
  void set_last_succ_key(std::string&& value);
  void set_last_succ_key(const char* value);
  void set_last_succ_key(const char* value, size_t size);
  std::string* mutable_last_succ_key();
  std::string* release_last_succ_key();
  void set_allocated_last_succ_key(std::string* last_succ_key);
  private:
  const std::string& _internal_last_succ_key() const;
  void _internal_set_last_succ_key(const std::string& value);
  std::string* _internal_mutable_last_succ_key();
  public:

  // string prog_ver = 4;
  void clear_prog_ver();
  const std::string& prog_ver() const;
  void set_prog_ver(const std::string& value);
  void set_prog_ver(std::string&& value);
  void set_prog_ver(const char* value);
  void set_prog_ver(const char* value, size_t size);
  std::string* mutable_prog_ver();
  std::string* release_prog_ver();
  void set_allocated_prog_ver(std::string* prog_ver);
  private:
  const std::string& _internal_prog_ver() const;
  void _internal_set_prog_ver(const std::string& value);
  std::string* _internal_mutable_prog_ver();
  public:

  // @@protoc_insertion_point(class_scope:CS_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_succ_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prog_ver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_LOGIN) */ {
 public:
  SC_LOGIN();
  virtual ~SC_LOGIN();

  SC_LOGIN(const SC_LOGIN& from);
  SC_LOGIN(SC_LOGIN&& from) noexcept
    : SC_LOGIN() {
    *this = ::std::move(from);
  }

  inline SC_LOGIN& operator=(const SC_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOGIN& operator=(SC_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_LOGIN* internal_default_instance() {
    return reinterpret_cast<const SC_LOGIN*>(
               &_SC_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_LOGIN& a, SC_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_LOGIN* New() const final {
    return CreateMaybeMessage<SC_LOGIN>(nullptr);
  }

  SC_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_LOGIN& from);
  void MergeFrom(const SC_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_LOGIN_ErrorCode ErrorCode;
  static constexpr ErrorCode EC_SUCC =
    SC_LOGIN_ErrorCode_EC_SUCC;
  static constexpr ErrorCode EC_PROG_VER =
    SC_LOGIN_ErrorCode_EC_PROG_VER;
  static constexpr ErrorCode EC_LAST_KEY =
    SC_LOGIN_ErrorCode_EC_LAST_KEY;
  static constexpr ErrorCode EC_AUTH =
    SC_LOGIN_ErrorCode_EC_AUTH;
  static constexpr ErrorCode EC_WAIT_AUTH =
    SC_LOGIN_ErrorCode_EC_WAIT_AUTH;
  static inline bool ErrorCode_IsValid(int value) {
    return SC_LOGIN_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    SC_LOGIN_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    SC_LOGIN_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    SC_LOGIN_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return SC_LOGIN_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return SC_LOGIN_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return SC_LOGIN_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kLastSuccKeyFieldNumber = 3,
    kResultCodeFieldNumber = 1,
  };
  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // string last_succ_key = 3;
  void clear_last_succ_key();
  const std::string& last_succ_key() const;
  void set_last_succ_key(const std::string& value);
  void set_last_succ_key(std::string&& value);
  void set_last_succ_key(const char* value);
  void set_last_succ_key(const char* value, size_t size);
  std::string* mutable_last_succ_key();
  std::string* release_last_succ_key();
  void set_allocated_last_succ_key(std::string* last_succ_key);
  private:
  const std::string& _internal_last_succ_key() const;
  void _internal_set_last_succ_key(const std::string& value);
  std::string* _internal_mutable_last_succ_key();
  public:

  // .SC_LOGIN.ErrorCode result_code = 1;
  void clear_result_code();
  ::SC_LOGIN_ErrorCode result_code() const;
  void set_result_code(::SC_LOGIN_ErrorCode value);
  private:
  ::SC_LOGIN_ErrorCode _internal_result_code() const;
  void _internal_set_result_code(::SC_LOGIN_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:SC_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_succ_key_;
  int result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_WAITINFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_WAITINFO) */ {
 public:
  SC_WAITINFO();
  virtual ~SC_WAITINFO();

  SC_WAITINFO(const SC_WAITINFO& from);
  SC_WAITINFO(SC_WAITINFO&& from) noexcept
    : SC_WAITINFO() {
    *this = ::std::move(from);
  }

  inline SC_WAITINFO& operator=(const SC_WAITINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_WAITINFO& operator=(SC_WAITINFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_WAITINFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_WAITINFO* internal_default_instance() {
    return reinterpret_cast<const SC_WAITINFO*>(
               &_SC_WAITINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_WAITINFO& a, SC_WAITINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_WAITINFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_WAITINFO* New() const final {
    return CreateMaybeMessage<SC_WAITINFO>(nullptr);
  }

  SC_WAITINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_WAITINFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_WAITINFO& from);
  void MergeFrom(const SC_WAITINFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_WAITINFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_WAITINFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SC_WAITINFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ACTORINFOLIST_SC_ACTOR_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ACTORINFOLIST.SC_ACTOR_INFO) */ {
 public:
  SC_ACTORINFOLIST_SC_ACTOR_INFO();
  virtual ~SC_ACTORINFOLIST_SC_ACTOR_INFO();

  SC_ACTORINFOLIST_SC_ACTOR_INFO(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from);
  SC_ACTORINFOLIST_SC_ACTOR_INFO(SC_ACTORINFOLIST_SC_ACTOR_INFO&& from) noexcept
    : SC_ACTORINFOLIST_SC_ACTOR_INFO() {
    *this = ::std::move(from);
  }

  inline SC_ACTORINFOLIST_SC_ACTOR_INFO& operator=(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACTORINFOLIST_SC_ACTOR_INFO& operator=(SC_ACTORINFOLIST_SC_ACTOR_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ACTORINFOLIST_SC_ACTOR_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ACTORINFOLIST_SC_ACTOR_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_ACTORINFOLIST_SC_ACTOR_INFO*>(
               &_SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_ACTORINFOLIST_SC_ACTOR_INFO& a, SC_ACTORINFOLIST_SC_ACTOR_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACTORINFOLIST_SC_ACTOR_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ACTORINFOLIST_SC_ACTOR_INFO* New() const final {
    return CreateMaybeMessage<SC_ACTORINFOLIST_SC_ACTOR_INFO>(nullptr);
  }

  SC_ACTORINFOLIST_SC_ACTOR_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ACTORINFOLIST_SC_ACTOR_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from);
  void MergeFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACTORINFOLIST_SC_ACTOR_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ACTORINFOLIST.SC_ACTOR_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProfFieldNumber = 2,
    kBaselookFieldNumber = 3,
    kLevFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 prof = 2;
  void clear_prof();
  ::PROTOBUF_NAMESPACE_ID::uint32 prof() const;
  void set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prof() const;
  void _internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 baselook = 3;
  void clear_baselook();
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook() const;
  void set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baselook() const;
  void _internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lev = 4;
  void clear_lev();
  ::PROTOBUF_NAMESPACE_ID::uint32 lev() const;
  void set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lev() const;
  void _internal_set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_ACTORINFOLIST.SC_ACTOR_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_ACTORINFOLIST :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_ACTORINFOLIST) */ {
 public:
  SC_ACTORINFOLIST();
  virtual ~SC_ACTORINFOLIST();

  SC_ACTORINFOLIST(const SC_ACTORINFOLIST& from);
  SC_ACTORINFOLIST(SC_ACTORINFOLIST&& from) noexcept
    : SC_ACTORINFOLIST() {
    *this = ::std::move(from);
  }

  inline SC_ACTORINFOLIST& operator=(const SC_ACTORINFOLIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACTORINFOLIST& operator=(SC_ACTORINFOLIST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ACTORINFOLIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ACTORINFOLIST* internal_default_instance() {
    return reinterpret_cast<const SC_ACTORINFOLIST*>(
               &_SC_ACTORINFOLIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_ACTORINFOLIST& a, SC_ACTORINFOLIST& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACTORINFOLIST* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ACTORINFOLIST* New() const final {
    return CreateMaybeMessage<SC_ACTORINFOLIST>(nullptr);
  }

  SC_ACTORINFOLIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ACTORINFOLIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ACTORINFOLIST& from);
  void MergeFrom(const SC_ACTORINFOLIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACTORINFOLIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_ACTORINFOLIST";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_ACTORINFOLIST_SC_ACTOR_INFO SC_ACTOR_INFO;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::SC_ACTORINFOLIST_SC_ACTOR_INFO* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >*
      mutable_list();
  private:
  const ::SC_ACTORINFOLIST_SC_ACTOR_INFO& _internal_list(int index) const;
  ::SC_ACTORINFOLIST_SC_ACTOR_INFO* _internal_add_list();
  public:
  const ::SC_ACTORINFOLIST_SC_ACTOR_INFO& list(int index) const;
  ::SC_ACTORINFOLIST_SC_ACTOR_INFO* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >&
      list() const;

  // @@protoc_insertion_point(class_scope:SC_ACTORINFOLIST)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_CREATEACTOR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_CREATEACTOR) */ {
 public:
  CS_CREATEACTOR();
  virtual ~CS_CREATEACTOR();

  CS_CREATEACTOR(const CS_CREATEACTOR& from);
  CS_CREATEACTOR(CS_CREATEACTOR&& from) noexcept
    : CS_CREATEACTOR() {
    *this = ::std::move(from);
  }

  inline CS_CREATEACTOR& operator=(const CS_CREATEACTOR& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CREATEACTOR& operator=(CS_CREATEACTOR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_CREATEACTOR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_CREATEACTOR* internal_default_instance() {
    return reinterpret_cast<const CS_CREATEACTOR*>(
               &_CS_CREATEACTOR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_CREATEACTOR& a, CS_CREATEACTOR& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CREATEACTOR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_CREATEACTOR* New() const final {
    return CreateMaybeMessage<CS_CREATEACTOR>(nullptr);
  }

  CS_CREATEACTOR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_CREATEACTOR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_CREATEACTOR& from);
  void MergeFrom(const CS_CREATEACTOR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CREATEACTOR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_CREATEACTOR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProfFieldNumber = 2,
    kBaselookFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 prof = 2;
  void clear_prof();
  ::PROTOBUF_NAMESPACE_ID::uint32 prof() const;
  void set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prof() const;
  void _internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 baselook = 3;
  void clear_baselook();
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook() const;
  void set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baselook() const;
  void _internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_CREATEACTOR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prof_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baselook_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_CREATEACTOR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_CREATEACTOR) */ {
 public:
  SC_CREATEACTOR();
  virtual ~SC_CREATEACTOR();

  SC_CREATEACTOR(const SC_CREATEACTOR& from);
  SC_CREATEACTOR(SC_CREATEACTOR&& from) noexcept
    : SC_CREATEACTOR() {
    *this = ::std::move(from);
  }

  inline SC_CREATEACTOR& operator=(const SC_CREATEACTOR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CREATEACTOR& operator=(SC_CREATEACTOR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_CREATEACTOR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_CREATEACTOR* internal_default_instance() {
    return reinterpret_cast<const SC_CREATEACTOR*>(
               &_SC_CREATEACTOR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_CREATEACTOR& a, SC_CREATEACTOR& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CREATEACTOR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_CREATEACTOR* New() const final {
    return CreateMaybeMessage<SC_CREATEACTOR>(nullptr);
  }

  SC_CREATEACTOR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_CREATEACTOR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_CREATEACTOR& from);
  void MergeFrom(const SC_CREATEACTOR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CREATEACTOR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_CREATEACTOR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_CREATEACTOR_ErrorCode ErrorCode;
  static constexpr ErrorCode EC_SUCC =
    SC_CREATEACTOR_ErrorCode_EC_SUCC;
  static constexpr ErrorCode EC_SAME_NAME =
    SC_CREATEACTOR_ErrorCode_EC_SAME_NAME;
  static constexpr ErrorCode EC_NAME_TOO_LONG =
    SC_CREATEACTOR_ErrorCode_EC_NAME_TOO_LONG;
  static constexpr ErrorCode EC_NAME_TOO_SHORT =
    SC_CREATEACTOR_ErrorCode_EC_NAME_TOO_SHORT;
  static constexpr ErrorCode EC_NAME_ILLEGAL =
    SC_CREATEACTOR_ErrorCode_EC_NAME_ILLEGAL;
  static constexpr ErrorCode EC_MAX_ACTOR =
    SC_CREATEACTOR_ErrorCode_EC_MAX_ACTOR;
  static inline bool ErrorCode_IsValid(int value) {
    return SC_CREATEACTOR_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    SC_CREATEACTOR_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    SC_CREATEACTOR_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    SC_CREATEACTOR_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return SC_CREATEACTOR_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return SC_CREATEACTOR_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return SC_CREATEACTOR_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
  };
  // .SC_CREATEACTOR.ErrorCode result_code = 1;
  void clear_result_code();
  ::SC_CREATEACTOR_ErrorCode result_code() const;
  void set_result_code(::SC_CREATEACTOR_ErrorCode value);
  private:
  ::SC_CREATEACTOR_ErrorCode _internal_result_code() const;
  void _internal_set_result_code(::SC_CREATEACTOR_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:SC_CREATEACTOR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CS_SELECTACTOR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_SELECTACTOR) */ {
 public:
  CS_SELECTACTOR();
  virtual ~CS_SELECTACTOR();

  CS_SELECTACTOR(const CS_SELECTACTOR& from);
  CS_SELECTACTOR(CS_SELECTACTOR&& from) noexcept
    : CS_SELECTACTOR() {
    *this = ::std::move(from);
  }

  inline CS_SELECTACTOR& operator=(const CS_SELECTACTOR& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SELECTACTOR& operator=(CS_SELECTACTOR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_SELECTACTOR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_SELECTACTOR* internal_default_instance() {
    return reinterpret_cast<const CS_SELECTACTOR*>(
               &_CS_SELECTACTOR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CS_SELECTACTOR& a, CS_SELECTACTOR& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SELECTACTOR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_SELECTACTOR* New() const final {
    return CreateMaybeMessage<CS_SELECTACTOR>(nullptr);
  }

  CS_SELECTACTOR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_SELECTACTOR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_SELECTACTOR& from);
  void MergeFrom(const CS_SELECTACTOR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SELECTACTOR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_SELECTACTOR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdxFieldNumber = 1,
  };
  // uint32 actor_idx = 1;
  void clear_actor_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 actor_idx() const;
  void set_actor_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actor_idx() const;
  void _internal_set_actor_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_SELECTACTOR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actor_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SC_SELECTACTOR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SELECTACTOR) */ {
 public:
  SC_SELECTACTOR();
  virtual ~SC_SELECTACTOR();

  SC_SELECTACTOR(const SC_SELECTACTOR& from);
  SC_SELECTACTOR(SC_SELECTACTOR&& from) noexcept
    : SC_SELECTACTOR() {
    *this = ::std::move(from);
  }

  inline SC_SELECTACTOR& operator=(const SC_SELECTACTOR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SELECTACTOR& operator=(SC_SELECTACTOR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SELECTACTOR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SELECTACTOR* internal_default_instance() {
    return reinterpret_cast<const SC_SELECTACTOR*>(
               &_SC_SELECTACTOR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SC_SELECTACTOR& a, SC_SELECTACTOR& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SELECTACTOR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SELECTACTOR* New() const final {
    return CreateMaybeMessage<SC_SELECTACTOR>(nullptr);
  }

  SC_SELECTACTOR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SELECTACTOR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SELECTACTOR& from);
  void MergeFrom(const SC_SELECTACTOR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SELECTACTOR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SELECTACTOR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2fworld_5fservice_2eproto);
    return ::descriptor_table_msg_2fworld_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SC_SELECTACTOR_ErrorCode ErrorCode;
  static constexpr ErrorCode EC_SUCC =
    SC_SELECTACTOR_ErrorCode_EC_SUCC;
  static inline bool ErrorCode_IsValid(int value) {
    return SC_SELECTACTOR_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    SC_SELECTACTOR_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    SC_SELECTACTOR_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    SC_SELECTACTOR_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return SC_SELECTACTOR_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return SC_SELECTACTOR_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return SC_SELECTACTOR_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
  };
  // .SC_SELECTACTOR.ErrorCode result_code = 1;
  void clear_result_code();
  ::SC_SELECTACTOR_ErrorCode result_code() const;
  void set_result_code(::SC_SELECTACTOR_ErrorCode value);
  private:
  ::SC_SELECTACTOR_ErrorCode _internal_result_code() const;
  void _internal_set_result_code(::SC_SELECTACTOR_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:SC_SELECTACTOR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fworld_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_LOGIN

// string openid = 1;
inline void CS_LOGIN::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_LOGIN::openid() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.openid)
  return _internal_openid();
}
inline void CS_LOGIN::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.openid)
}
inline std::string* CS_LOGIN::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.openid)
  return _internal_mutable_openid();
}
inline const std::string& CS_LOGIN::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void CS_LOGIN::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_LOGIN::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_LOGIN.openid)
}
inline void CS_LOGIN::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.openid)
}
inline void CS_LOGIN::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.openid)
}
inline std::string* CS_LOGIN::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_LOGIN::release_openid() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOGIN::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.openid)
}

// string auth = 2;
inline void CS_LOGIN::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_LOGIN::auth() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.auth)
  return _internal_auth();
}
inline void CS_LOGIN::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.auth)
}
inline std::string* CS_LOGIN::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.auth)
  return _internal_mutable_auth();
}
inline const std::string& CS_LOGIN::_internal_auth() const {
  return auth_.GetNoArena();
}
inline void CS_LOGIN::_internal_set_auth(const std::string& value) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_LOGIN::set_auth(std::string&& value) {
  
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_LOGIN.auth)
}
inline void CS_LOGIN::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.auth)
}
inline void CS_LOGIN::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.auth)
}
inline std::string* CS_LOGIN::_internal_mutable_auth() {
  
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_LOGIN::release_auth() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.auth)
  
  return auth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOGIN::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.auth)
}

// string last_succ_key = 3;
inline void CS_LOGIN::clear_last_succ_key() {
  last_succ_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_LOGIN::last_succ_key() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.last_succ_key)
  return _internal_last_succ_key();
}
inline void CS_LOGIN::set_last_succ_key(const std::string& value) {
  _internal_set_last_succ_key(value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.last_succ_key)
}
inline std::string* CS_LOGIN::mutable_last_succ_key() {
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.last_succ_key)
  return _internal_mutable_last_succ_key();
}
inline const std::string& CS_LOGIN::_internal_last_succ_key() const {
  return last_succ_key_.GetNoArena();
}
inline void CS_LOGIN::_internal_set_last_succ_key(const std::string& value) {
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_LOGIN::set_last_succ_key(std::string&& value) {
  
  last_succ_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_LOGIN.last_succ_key)
}
inline void CS_LOGIN::set_last_succ_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.last_succ_key)
}
inline void CS_LOGIN::set_last_succ_key(const char* value, size_t size) {
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.last_succ_key)
}
inline std::string* CS_LOGIN::_internal_mutable_last_succ_key() {
  
  return last_succ_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_LOGIN::release_last_succ_key() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.last_succ_key)
  
  return last_succ_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOGIN::set_allocated_last_succ_key(std::string* last_succ_key) {
  if (last_succ_key != nullptr) {
    
  } else {
    
  }
  last_succ_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_succ_key);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.last_succ_key)
}

// string prog_ver = 4;
inline void CS_LOGIN::clear_prog_ver() {
  prog_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_LOGIN::prog_ver() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.prog_ver)
  return _internal_prog_ver();
}
inline void CS_LOGIN::set_prog_ver(const std::string& value) {
  _internal_set_prog_ver(value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.prog_ver)
}
inline std::string* CS_LOGIN::mutable_prog_ver() {
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.prog_ver)
  return _internal_mutable_prog_ver();
}
inline const std::string& CS_LOGIN::_internal_prog_ver() const {
  return prog_ver_.GetNoArena();
}
inline void CS_LOGIN::_internal_set_prog_ver(const std::string& value) {
  
  prog_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_LOGIN::set_prog_ver(std::string&& value) {
  
  prog_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_LOGIN.prog_ver)
}
inline void CS_LOGIN::set_prog_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prog_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.prog_ver)
}
inline void CS_LOGIN::set_prog_ver(const char* value, size_t size) {
  
  prog_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.prog_ver)
}
inline std::string* CS_LOGIN::_internal_mutable_prog_ver() {
  
  return prog_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_LOGIN::release_prog_ver() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.prog_ver)
  
  return prog_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOGIN::set_allocated_prog_ver(std::string* prog_ver) {
  if (prog_ver != nullptr) {
    
  } else {
    
  }
  prog_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prog_ver);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.prog_ver)
}

// -------------------------------------------------------------------

// SC_LOGIN

// .SC_LOGIN.ErrorCode result_code = 1;
inline void SC_LOGIN::clear_result_code() {
  result_code_ = 0;
}
inline ::SC_LOGIN_ErrorCode SC_LOGIN::_internal_result_code() const {
  return static_cast< ::SC_LOGIN_ErrorCode >(result_code_);
}
inline ::SC_LOGIN_ErrorCode SC_LOGIN::result_code() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.result_code)
  return _internal_result_code();
}
inline void SC_LOGIN::_internal_set_result_code(::SC_LOGIN_ErrorCode value) {
  
  result_code_ = value;
}
inline void SC_LOGIN::set_result_code(::SC_LOGIN_ErrorCode value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN.result_code)
}

// string detail = 2;
inline void SC_LOGIN::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_LOGIN::detail() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.detail)
  return _internal_detail();
}
inline void SC_LOGIN::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN.detail)
}
inline std::string* SC_LOGIN::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:SC_LOGIN.detail)
  return _internal_mutable_detail();
}
inline const std::string& SC_LOGIN::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void SC_LOGIN::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_LOGIN::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_LOGIN.detail)
}
inline void SC_LOGIN::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_LOGIN.detail)
}
inline void SC_LOGIN::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_LOGIN.detail)
}
inline std::string* SC_LOGIN::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_LOGIN::release_detail() {
  // @@protoc_insertion_point(field_release:SC_LOGIN.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_LOGIN::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:SC_LOGIN.detail)
}

// string last_succ_key = 3;
inline void SC_LOGIN::clear_last_succ_key() {
  last_succ_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_LOGIN::last_succ_key() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.last_succ_key)
  return _internal_last_succ_key();
}
inline void SC_LOGIN::set_last_succ_key(const std::string& value) {
  _internal_set_last_succ_key(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN.last_succ_key)
}
inline std::string* SC_LOGIN::mutable_last_succ_key() {
  // @@protoc_insertion_point(field_mutable:SC_LOGIN.last_succ_key)
  return _internal_mutable_last_succ_key();
}
inline const std::string& SC_LOGIN::_internal_last_succ_key() const {
  return last_succ_key_.GetNoArena();
}
inline void SC_LOGIN::_internal_set_last_succ_key(const std::string& value) {
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_LOGIN::set_last_succ_key(std::string&& value) {
  
  last_succ_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_LOGIN.last_succ_key)
}
inline void SC_LOGIN::set_last_succ_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_LOGIN.last_succ_key)
}
inline void SC_LOGIN::set_last_succ_key(const char* value, size_t size) {
  
  last_succ_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_LOGIN.last_succ_key)
}
inline std::string* SC_LOGIN::_internal_mutable_last_succ_key() {
  
  return last_succ_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_LOGIN::release_last_succ_key() {
  // @@protoc_insertion_point(field_release:SC_LOGIN.last_succ_key)
  
  return last_succ_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_LOGIN::set_allocated_last_succ_key(std::string* last_succ_key) {
  if (last_succ_key != nullptr) {
    
  } else {
    
  }
  last_succ_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_succ_key);
  // @@protoc_insertion_point(field_set_allocated:SC_LOGIN.last_succ_key)
}

// -------------------------------------------------------------------

// SC_WAITINFO

// -------------------------------------------------------------------

// SC_ACTORINFOLIST_SC_ACTOR_INFO

// string name = 1;
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SC_ACTORINFOLIST_SC_ACTOR_INFO::name() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  return _internal_name();
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
inline std::string* SC_ACTORINFOLIST_SC_ACTOR_INFO::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  return _internal_mutable_name();
}
inline const std::string& SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_name() const {
  return name_.GetNoArena();
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
inline std::string* SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SC_ACTORINFOLIST_SC_ACTOR_INFO::release_name() {
  // @@protoc_insertion_point(field_release:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}

// uint32 prof = 2;
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_prof() {
  prof_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_prof() const {
  return prof_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::prof() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.prof)
  return _internal_prof();
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prof_ = value;
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prof(value);
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.prof)
}

// uint32 baselook = 3;
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_baselook() {
  baselook_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_baselook() const {
  return baselook_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::baselook() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.baselook)
  return _internal_baselook();
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baselook_ = value;
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baselook(value);
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.baselook)
}

// uint32 lev = 4;
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_lev() {
  lev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_lev() const {
  return lev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::lev() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.lev)
  return _internal_lev();
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::_internal_set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lev_ = value;
}
inline void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_lev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lev(value);
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.lev)
}

// -------------------------------------------------------------------

// SC_ACTORINFOLIST

// repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
inline int SC_ACTORINFOLIST::_internal_list_size() const {
  return list_.size();
}
inline int SC_ACTORINFOLIST::list_size() const {
  return _internal_list_size();
}
inline void SC_ACTORINFOLIST::clear_list() {
  list_.Clear();
}
inline ::SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ACTORINFOLIST.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >*
SC_ACTORINFOLIST::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACTORINFOLIST.list)
  return &list_;
}
inline const ::SC_ACTORINFOLIST_SC_ACTOR_INFO& SC_ACTORINFOLIST::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::SC_ACTORINFOLIST_SC_ACTOR_INFO& SC_ACTORINFOLIST::list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.list)
  return _internal_list(index);
}
inline ::SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST::_internal_add_list() {
  return list_.Add();
}
inline ::SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST::add_list() {
  // @@protoc_insertion_point(field_add:SC_ACTORINFOLIST.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >&
SC_ACTORINFOLIST::list() const {
  // @@protoc_insertion_point(field_list:SC_ACTORINFOLIST.list)
  return list_;
}

// -------------------------------------------------------------------

// CS_CREATEACTOR

// string name = 1;
inline void CS_CREATEACTOR::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CS_CREATEACTOR::name() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.name)
  return _internal_name();
}
inline void CS_CREATEACTOR::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.name)
}
inline std::string* CS_CREATEACTOR::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CS_CREATEACTOR.name)
  return _internal_mutable_name();
}
inline const std::string& CS_CREATEACTOR::_internal_name() const {
  return name_.GetNoArena();
}
inline void CS_CREATEACTOR::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CS_CREATEACTOR::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_CREATEACTOR.name)
}
inline void CS_CREATEACTOR::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_CREATEACTOR.name)
}
inline void CS_CREATEACTOR::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_CREATEACTOR.name)
}
inline std::string* CS_CREATEACTOR::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CS_CREATEACTOR::release_name() {
  // @@protoc_insertion_point(field_release:CS_CREATEACTOR.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CS_CREATEACTOR::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CS_CREATEACTOR.name)
}

// uint32 prof = 2;
inline void CS_CREATEACTOR::clear_prof() {
  prof_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CREATEACTOR::_internal_prof() const {
  return prof_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CREATEACTOR::prof() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.prof)
  return _internal_prof();
}
inline void CS_CREATEACTOR::_internal_set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prof_ = value;
}
inline void CS_CREATEACTOR::set_prof(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prof(value);
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.prof)
}

// uint32 baselook = 3;
inline void CS_CREATEACTOR::clear_baselook() {
  baselook_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CREATEACTOR::_internal_baselook() const {
  return baselook_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_CREATEACTOR::baselook() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.baselook)
  return _internal_baselook();
}
inline void CS_CREATEACTOR::_internal_set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baselook_ = value;
}
inline void CS_CREATEACTOR::set_baselook(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baselook(value);
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.baselook)
}

// -------------------------------------------------------------------

// SC_CREATEACTOR

// .SC_CREATEACTOR.ErrorCode result_code = 1;
inline void SC_CREATEACTOR::clear_result_code() {
  result_code_ = 0;
}
inline ::SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::_internal_result_code() const {
  return static_cast< ::SC_CREATEACTOR_ErrorCode >(result_code_);
}
inline ::SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::result_code() const {
  // @@protoc_insertion_point(field_get:SC_CREATEACTOR.result_code)
  return _internal_result_code();
}
inline void SC_CREATEACTOR::_internal_set_result_code(::SC_CREATEACTOR_ErrorCode value) {
  
  result_code_ = value;
}
inline void SC_CREATEACTOR::set_result_code(::SC_CREATEACTOR_ErrorCode value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:SC_CREATEACTOR.result_code)
}

// -------------------------------------------------------------------

// CS_SELECTACTOR

// uint32 actor_idx = 1;
inline void CS_SELECTACTOR::clear_actor_idx() {
  actor_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_SELECTACTOR::_internal_actor_idx() const {
  return actor_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_SELECTACTOR::actor_idx() const {
  // @@protoc_insertion_point(field_get:CS_SELECTACTOR.actor_idx)
  return _internal_actor_idx();
}
inline void CS_SELECTACTOR::_internal_set_actor_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actor_idx_ = value;
}
inline void CS_SELECTACTOR::set_actor_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actor_idx(value);
  // @@protoc_insertion_point(field_set:CS_SELECTACTOR.actor_idx)
}

// -------------------------------------------------------------------

// SC_SELECTACTOR

// .SC_SELECTACTOR.ErrorCode result_code = 1;
inline void SC_SELECTACTOR::clear_result_code() {
  result_code_ = 0;
}
inline ::SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::_internal_result_code() const {
  return static_cast< ::SC_SELECTACTOR_ErrorCode >(result_code_);
}
inline ::SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::result_code() const {
  // @@protoc_insertion_point(field_get:SC_SELECTACTOR.result_code)
  return _internal_result_code();
}
inline void SC_SELECTACTOR::_internal_set_result_code(::SC_SELECTACTOR_ErrorCode value) {
  
  result_code_ = value;
}
inline void SC_SELECTACTOR::set_result_code(::SC_SELECTACTOR_ErrorCode value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:SC_SELECTACTOR.result_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SC_LOGIN_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_LOGIN_ErrorCode>() {
  return ::SC_LOGIN_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::SC_CREATEACTOR_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_CREATEACTOR_ErrorCode>() {
  return ::SC_CREATEACTOR_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::SC_SELECTACTOR_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SELECTACTOR_ErrorCode>() {
  return ::SC_SELECTACTOR_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::WORLD_CS_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WORLD_CS_CMD>() {
  return ::WORLD_CS_CMD_descriptor();
}
template <> struct is_proto_enum< ::WORLD_SC_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WORLD_SC_CMD>() {
  return ::WORLD_SC_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2fworld_5fservice_2eproto
