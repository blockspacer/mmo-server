// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/Cfg_Scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fScene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fScene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2fCfg_5fScene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2fCfg_5fScene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2fCfg_5fScene_2eproto;
class Cfg_Scene;
class Cfg_SceneDefaultTypeInternal;
extern Cfg_SceneDefaultTypeInternal _Cfg_Scene_default_instance_;
class Cfg_Scene_Row;
class Cfg_Scene_RowDefaultTypeInternal;
extern Cfg_Scene_RowDefaultTypeInternal _Cfg_Scene_Row_default_instance_;
class PhaseData;
class PhaseDataDefaultTypeInternal;
extern PhaseDataDefaultTypeInternal _PhaseData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cfg_Scene* Arena::CreateMaybeMessage<::Cfg_Scene>(Arena*);
template<> ::Cfg_Scene_Row* Arena::CreateMaybeMessage<::Cfg_Scene_Row>(Arena*);
template<> ::PhaseData* Arena::CreateMaybeMessage<::PhaseData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PhaseData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhaseData) */ {
 public:
  PhaseData();
  virtual ~PhaseData();

  PhaseData(const PhaseData& from);
  PhaseData(PhaseData&& from) noexcept
    : PhaseData() {
    *this = ::std::move(from);
  }

  inline PhaseData& operator=(const PhaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseData& operator=(PhaseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhaseData* internal_default_instance() {
    return reinterpret_cast<const PhaseData*>(
               &_PhaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PhaseData& a, PhaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseData* New() const final {
    return CreateMaybeMessage<PhaseData>(nullptr);
  }

  PhaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseData>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhaseData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fScene_2eproto);
    return ::descriptor_table_config_2fCfg_5fScene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kViewgridWidthFieldNumber = 2,
    kLeftFieldNumber = 5,
    kTopFieldNumber = 6,
    kRightFieldNumber = 7,
    kBottomFieldNumber = 8,
    kLinkPhaseFieldNumber = 9,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float viewgrid_width = 2;
  void clear_viewgrid_width();
  float viewgrid_width() const;
  void set_viewgrid_width(float value);
  private:
  float _internal_viewgrid_width() const;
  void _internal_set_viewgrid_width(float value);
  public:

  // float left = 5;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 6;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // float right = 7;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float bottom = 8;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // uint64 link_phase = 9;
  void clear_link_phase();
  ::PROTOBUF_NAMESPACE_ID::uint64 link_phase() const;
  void set_link_phase(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_link_phase() const;
  void _internal_set_link_phase(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:PhaseData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  float viewgrid_width_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  ::PROTOBUF_NAMESPACE_ID::uint64 link_phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fScene_2eproto;
};
// -------------------------------------------------------------------

class Cfg_Scene_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Scene.Row) */ {
 public:
  Cfg_Scene_Row();
  virtual ~Cfg_Scene_Row();

  Cfg_Scene_Row(const Cfg_Scene_Row& from);
  Cfg_Scene_Row(Cfg_Scene_Row&& from) noexcept
    : Cfg_Scene_Row() {
    *this = ::std::move(from);
  }

  inline Cfg_Scene_Row& operator=(const Cfg_Scene_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Scene_Row& operator=(Cfg_Scene_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Scene_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Scene_Row* internal_default_instance() {
    return reinterpret_cast<const Cfg_Scene_Row*>(
               &_Cfg_Scene_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cfg_Scene_Row& a, Cfg_Scene_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Scene_Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Scene_Row* New() const final {
    return CreateMaybeMessage<Cfg_Scene_Row>(nullptr);
  }

  Cfg_Scene_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Scene_Row>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Scene_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Scene.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fScene_2eproto);
    return ::descriptor_table_config_2fCfg_5fScene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseDataFieldNumber = 10,
    kNameFieldNumber = 2,
    kIdmapFieldNumber = 1,
    kIdmapdataFieldNumber = 3,
    kIdzoneFieldNumber = 4,
    kMaptypeFieldNumber = 5,
    kIdscriptFieldNumber = 7,
    kMapflagFieldNumber = 6,
  };
  // repeated .PhaseData phase_data = 10;
  int phase_data_size() const;
  private:
  int _internal_phase_data_size() const;
  public:
  void clear_phase_data();
  ::PhaseData* mutable_phase_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhaseData >*
      mutable_phase_data();
  private:
  const ::PhaseData& _internal_phase_data(int index) const;
  ::PhaseData* _internal_add_phase_data();
  public:
  const ::PhaseData& phase_data(int index) const;
  ::PhaseData* add_phase_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhaseData >&
      phase_data() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 idmap = 1;
  void clear_idmap();
  ::PROTOBUF_NAMESPACE_ID::uint32 idmap() const;
  void set_idmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idmap() const;
  void _internal_set_idmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idmapdata = 3;
  void clear_idmapdata();
  ::PROTOBUF_NAMESPACE_ID::uint32 idmapdata() const;
  void set_idmapdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idmapdata() const;
  void _internal_set_idmapdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idzone = 4;
  void clear_idzone();
  ::PROTOBUF_NAMESPACE_ID::uint32 idzone() const;
  void set_idzone(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idzone() const;
  void _internal_set_idzone(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maptype = 5;
  void clear_maptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 maptype() const;
  void set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maptype() const;
  void _internal_set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 idscript = 7;
  void clear_idscript();
  ::PROTOBUF_NAMESPACE_ID::uint64 idscript() const;
  void set_idscript(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idscript() const;
  void _internal_set_idscript(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mapflag = 6;
  void clear_mapflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapflag() const;
  void set_mapflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapflag() const;
  void _internal_set_mapflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_Scene.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhaseData > phase_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idmap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idmapdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idzone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maptype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idscript_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fScene_2eproto;
};
// -------------------------------------------------------------------

class Cfg_Scene :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_Scene) */ {
 public:
  Cfg_Scene();
  virtual ~Cfg_Scene();

  Cfg_Scene(const Cfg_Scene& from);
  Cfg_Scene(Cfg_Scene&& from) noexcept
    : Cfg_Scene() {
    *this = ::std::move(from);
  }

  inline Cfg_Scene& operator=(const Cfg_Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_Scene& operator=(Cfg_Scene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_Scene* internal_default_instance() {
    return reinterpret_cast<const Cfg_Scene*>(
               &_Cfg_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cfg_Scene& a, Cfg_Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_Scene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_Scene* New() const final {
    return CreateMaybeMessage<Cfg_Scene>(nullptr);
  }

  Cfg_Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_Scene>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_Scene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fScene_2eproto);
    return ::descriptor_table_config_2fCfg_5fScene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cfg_Scene_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .Cfg_Scene.Row rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Cfg_Scene_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Scene_Row >*
      mutable_rows();
  private:
  const ::Cfg_Scene_Row& _internal_rows(int index) const;
  ::Cfg_Scene_Row* _internal_add_rows();
  public:
  const ::Cfg_Scene_Row& rows(int index) const;
  ::Cfg_Scene_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Scene_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:Cfg_Scene)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Scene_Row > rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fScene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhaseData

// uint64 id = 1;
inline void PhaseData::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PhaseData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PhaseData::id() const {
  // @@protoc_insertion_point(field_get:PhaseData.id)
  return _internal_id();
}
inline void PhaseData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void PhaseData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PhaseData.id)
}

// float viewgrid_width = 2;
inline void PhaseData::clear_viewgrid_width() {
  viewgrid_width_ = 0;
}
inline float PhaseData::_internal_viewgrid_width() const {
  return viewgrid_width_;
}
inline float PhaseData::viewgrid_width() const {
  // @@protoc_insertion_point(field_get:PhaseData.viewgrid_width)
  return _internal_viewgrid_width();
}
inline void PhaseData::_internal_set_viewgrid_width(float value) {
  
  viewgrid_width_ = value;
}
inline void PhaseData::set_viewgrid_width(float value) {
  _internal_set_viewgrid_width(value);
  // @@protoc_insertion_point(field_set:PhaseData.viewgrid_width)
}

// float left = 5;
inline void PhaseData::clear_left() {
  left_ = 0;
}
inline float PhaseData::_internal_left() const {
  return left_;
}
inline float PhaseData::left() const {
  // @@protoc_insertion_point(field_get:PhaseData.left)
  return _internal_left();
}
inline void PhaseData::_internal_set_left(float value) {
  
  left_ = value;
}
inline void PhaseData::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:PhaseData.left)
}

// float top = 6;
inline void PhaseData::clear_top() {
  top_ = 0;
}
inline float PhaseData::_internal_top() const {
  return top_;
}
inline float PhaseData::top() const {
  // @@protoc_insertion_point(field_get:PhaseData.top)
  return _internal_top();
}
inline void PhaseData::_internal_set_top(float value) {
  
  top_ = value;
}
inline void PhaseData::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:PhaseData.top)
}

// float right = 7;
inline void PhaseData::clear_right() {
  right_ = 0;
}
inline float PhaseData::_internal_right() const {
  return right_;
}
inline float PhaseData::right() const {
  // @@protoc_insertion_point(field_get:PhaseData.right)
  return _internal_right();
}
inline void PhaseData::_internal_set_right(float value) {
  
  right_ = value;
}
inline void PhaseData::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:PhaseData.right)
}

// float bottom = 8;
inline void PhaseData::clear_bottom() {
  bottom_ = 0;
}
inline float PhaseData::_internal_bottom() const {
  return bottom_;
}
inline float PhaseData::bottom() const {
  // @@protoc_insertion_point(field_get:PhaseData.bottom)
  return _internal_bottom();
}
inline void PhaseData::_internal_set_bottom(float value) {
  
  bottom_ = value;
}
inline void PhaseData::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:PhaseData.bottom)
}

// uint64 link_phase = 9;
inline void PhaseData::clear_link_phase() {
  link_phase_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PhaseData::_internal_link_phase() const {
  return link_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PhaseData::link_phase() const {
  // @@protoc_insertion_point(field_get:PhaseData.link_phase)
  return _internal_link_phase();
}
inline void PhaseData::_internal_set_link_phase(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  link_phase_ = value;
}
inline void PhaseData::set_link_phase(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_link_phase(value);
  // @@protoc_insertion_point(field_set:PhaseData.link_phase)
}

// -------------------------------------------------------------------

// Cfg_Scene_Row

// uint32 idmap = 1;
inline void Cfg_Scene_Row::clear_idmap() {
  idmap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::_internal_idmap() const {
  return idmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::idmap() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.idmap)
  return _internal_idmap();
}
inline void Cfg_Scene_Row::_internal_set_idmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idmap_ = value;
}
inline void Cfg_Scene_Row::set_idmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idmap(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.idmap)
}

// string name = 2;
inline void Cfg_Scene_Row::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Cfg_Scene_Row::name() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.name)
  return _internal_name();
}
inline void Cfg_Scene_Row::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.name)
}
inline std::string* Cfg_Scene_Row::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Cfg_Scene.Row.name)
  return _internal_mutable_name();
}
inline const std::string& Cfg_Scene_Row::_internal_name() const {
  return name_.GetNoArena();
}
inline void Cfg_Scene_Row::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Cfg_Scene_Row::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cfg_Scene.Row.name)
}
inline void Cfg_Scene_Row::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cfg_Scene.Row.name)
}
inline void Cfg_Scene_Row::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cfg_Scene.Row.name)
}
inline std::string* Cfg_Scene_Row::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cfg_Scene_Row::release_name() {
  // @@protoc_insertion_point(field_release:Cfg_Scene.Row.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cfg_Scene_Row::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cfg_Scene.Row.name)
}

// uint32 idmapdata = 3;
inline void Cfg_Scene_Row::clear_idmapdata() {
  idmapdata_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::_internal_idmapdata() const {
  return idmapdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::idmapdata() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.idmapdata)
  return _internal_idmapdata();
}
inline void Cfg_Scene_Row::_internal_set_idmapdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idmapdata_ = value;
}
inline void Cfg_Scene_Row::set_idmapdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idmapdata(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.idmapdata)
}

// uint32 idzone = 4;
inline void Cfg_Scene_Row::clear_idzone() {
  idzone_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::_internal_idzone() const {
  return idzone_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::idzone() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.idzone)
  return _internal_idzone();
}
inline void Cfg_Scene_Row::_internal_set_idzone(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idzone_ = value;
}
inline void Cfg_Scene_Row::set_idzone(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idzone(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.idzone)
}

// uint32 maptype = 5;
inline void Cfg_Scene_Row::clear_maptype() {
  maptype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::_internal_maptype() const {
  return maptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::maptype() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.maptype)
  return _internal_maptype();
}
inline void Cfg_Scene_Row::_internal_set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maptype_ = value;
}
inline void Cfg_Scene_Row::set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maptype(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.maptype)
}

// uint32 mapflag = 6;
inline void Cfg_Scene_Row::clear_mapflag() {
  mapflag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::_internal_mapflag() const {
  return mapflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_Scene_Row::mapflag() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.mapflag)
  return _internal_mapflag();
}
inline void Cfg_Scene_Row::_internal_set_mapflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapflag_ = value;
}
inline void Cfg_Scene_Row::set_mapflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapflag(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.mapflag)
}

// uint64 idscript = 7;
inline void Cfg_Scene_Row::clear_idscript() {
  idscript_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cfg_Scene_Row::_internal_idscript() const {
  return idscript_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cfg_Scene_Row::idscript() const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.idscript)
  return _internal_idscript();
}
inline void Cfg_Scene_Row::_internal_set_idscript(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idscript_ = value;
}
inline void Cfg_Scene_Row::set_idscript(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idscript(value);
  // @@protoc_insertion_point(field_set:Cfg_Scene.Row.idscript)
}

// repeated .PhaseData phase_data = 10;
inline int Cfg_Scene_Row::_internal_phase_data_size() const {
  return phase_data_.size();
}
inline int Cfg_Scene_Row::phase_data_size() const {
  return _internal_phase_data_size();
}
inline void Cfg_Scene_Row::clear_phase_data() {
  phase_data_.Clear();
}
inline ::PhaseData* Cfg_Scene_Row::mutable_phase_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cfg_Scene.Row.phase_data)
  return phase_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhaseData >*
Cfg_Scene_Row::mutable_phase_data() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_Scene.Row.phase_data)
  return &phase_data_;
}
inline const ::PhaseData& Cfg_Scene_Row::_internal_phase_data(int index) const {
  return phase_data_.Get(index);
}
inline const ::PhaseData& Cfg_Scene_Row::phase_data(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.Row.phase_data)
  return _internal_phase_data(index);
}
inline ::PhaseData* Cfg_Scene_Row::_internal_add_phase_data() {
  return phase_data_.Add();
}
inline ::PhaseData* Cfg_Scene_Row::add_phase_data() {
  // @@protoc_insertion_point(field_add:Cfg_Scene.Row.phase_data)
  return _internal_add_phase_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhaseData >&
Cfg_Scene_Row::phase_data() const {
  // @@protoc_insertion_point(field_list:Cfg_Scene.Row.phase_data)
  return phase_data_;
}

// -------------------------------------------------------------------

// Cfg_Scene

// repeated .Cfg_Scene.Row rows = 1;
inline int Cfg_Scene::_internal_rows_size() const {
  return rows_.size();
}
inline int Cfg_Scene::rows_size() const {
  return _internal_rows_size();
}
inline void Cfg_Scene::clear_rows() {
  rows_.Clear();
}
inline ::Cfg_Scene_Row* Cfg_Scene::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:Cfg_Scene.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Scene_Row >*
Cfg_Scene::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_Scene.rows)
  return &rows_;
}
inline const ::Cfg_Scene_Row& Cfg_Scene::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::Cfg_Scene_Row& Cfg_Scene::rows(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_Scene.rows)
  return _internal_rows(index);
}
inline ::Cfg_Scene_Row* Cfg_Scene::_internal_add_rows() {
  return rows_.Add();
}
inline ::Cfg_Scene_Row* Cfg_Scene::add_rows() {
  // @@protoc_insertion_point(field_add:Cfg_Scene.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_Scene_Row >&
Cfg_Scene::rows() const {
  // @@protoc_insertion_point(field_list:Cfg_Scene.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fScene_2eproto
