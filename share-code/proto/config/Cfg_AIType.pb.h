// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/Cfg_AIType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAIType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAIType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2fCfg_5fAIType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2fCfg_5fAIType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2fCfg_5fAIType_2eproto;
class Cfg_AIType;
class Cfg_AITypeDefaultTypeInternal;
extern Cfg_AITypeDefaultTypeInternal _Cfg_AIType_default_instance_;
class Cfg_AIType_Row;
class Cfg_AIType_RowDefaultTypeInternal;
extern Cfg_AIType_RowDefaultTypeInternal _Cfg_AIType_Row_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cfg_AIType* Arena::CreateMaybeMessage<::Cfg_AIType>(Arena*);
template<> ::Cfg_AIType_Row* Arena::CreateMaybeMessage<::Cfg_AIType_Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Cfg_AIType_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_AIType.Row) */ {
 public:
  Cfg_AIType_Row();
  virtual ~Cfg_AIType_Row();

  Cfg_AIType_Row(const Cfg_AIType_Row& from);
  Cfg_AIType_Row(Cfg_AIType_Row&& from) noexcept
    : Cfg_AIType_Row() {
    *this = ::std::move(from);
  }

  inline Cfg_AIType_Row& operator=(const Cfg_AIType_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_AIType_Row& operator=(Cfg_AIType_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_AIType_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_AIType_Row* internal_default_instance() {
    return reinterpret_cast<const Cfg_AIType_Row*>(
               &_Cfg_AIType_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cfg_AIType_Row& a, Cfg_AIType_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_AIType_Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_AIType_Row* New() const final {
    return CreateMaybeMessage<Cfg_AIType_Row>(nullptr);
  }

  Cfg_AIType_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_AIType_Row>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_AIType_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_AIType.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAIType_2eproto);
    return ::descriptor_table_config_2fCfg_5fAIType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 22,
    kIdmonsterFieldNumber = 1,
    kAiTypeFieldNumber = 2,
    kIdleRandomwalkMsMinFieldNumber = 3,
    kIdleRandomwalkMsMaxFieldNumber = 4,
    kIdleRandomwalkStepMinFieldNumber = 5,
    kIdleRandomwalkStepMaxFieldNumber = 6,
    kIdleRandomwalkRangeFieldNumber = 7,
    kAttackPursueSelfrangeFieldNumber = 8,
    kAttackTargetRangeFieldNumber = 9,
    kSearchEnemyRangeFieldNumber = 10,
    kSearchEnemyMsMinFieldNumber = 11,
    kSearchEnemyMsMaxFieldNumber = 12,
    kPatrolWaitMsMinFieldNumber = 13,
    kPatrolWaitMsMaxFieldNumber = 14,
    kEscapeRangeMinFieldNumber = 15,
    kEscapeRangeMaxFieldNumber = 16,
    kAttackWaitMsFieldNumber = 18,
    kTargetfamIdFieldNumber = 20,
    kSkillfamIdFieldNumber = 21,
    kCanApproachFieldNumber = 17,
    kAiDebugFieldNumber = 25,
    kFollowPathFieldNumber = 23,
    kScriptIdFieldNumber = 24,
  };
  // repeated uint32 skill_id = 22;
  int skill_id_size() const;
  private:
  int _internal_skill_id_size() const;
  public:
  void clear_skill_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_skill_id() const;
  void _internal_add_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_skill_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id(int index) const;
  void set_skill_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      skill_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_skill_id();

  // uint32 idmonster = 1;
  void clear_idmonster();
  ::PROTOBUF_NAMESPACE_ID::uint32 idmonster() const;
  void set_idmonster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idmonster() const;
  void _internal_set_idmonster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ai_type = 2;
  void clear_ai_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 ai_type() const;
  void set_ai_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ai_type() const;
  void _internal_set_ai_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idle_randomwalk_ms_min = 3;
  void clear_idle_randomwalk_ms_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 idle_randomwalk_ms_min() const;
  void set_idle_randomwalk_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idle_randomwalk_ms_min() const;
  void _internal_set_idle_randomwalk_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idle_randomwalk_ms_max = 4;
  void clear_idle_randomwalk_ms_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 idle_randomwalk_ms_max() const;
  void set_idle_randomwalk_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idle_randomwalk_ms_max() const;
  void _internal_set_idle_randomwalk_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float idle_randomwalk_step_min = 5;
  void clear_idle_randomwalk_step_min();
  float idle_randomwalk_step_min() const;
  void set_idle_randomwalk_step_min(float value);
  private:
  float _internal_idle_randomwalk_step_min() const;
  void _internal_set_idle_randomwalk_step_min(float value);
  public:

  // float idle_randomwalk_step_max = 6;
  void clear_idle_randomwalk_step_max();
  float idle_randomwalk_step_max() const;
  void set_idle_randomwalk_step_max(float value);
  private:
  float _internal_idle_randomwalk_step_max() const;
  void _internal_set_idle_randomwalk_step_max(float value);
  public:

  // float idle_randomwalk_range = 7;
  void clear_idle_randomwalk_range();
  float idle_randomwalk_range() const;
  void set_idle_randomwalk_range(float value);
  private:
  float _internal_idle_randomwalk_range() const;
  void _internal_set_idle_randomwalk_range(float value);
  public:

  // float attack_pursue_selfrange = 8;
  void clear_attack_pursue_selfrange();
  float attack_pursue_selfrange() const;
  void set_attack_pursue_selfrange(float value);
  private:
  float _internal_attack_pursue_selfrange() const;
  void _internal_set_attack_pursue_selfrange(float value);
  public:

  // float attack_target_range = 9;
  void clear_attack_target_range();
  float attack_target_range() const;
  void set_attack_target_range(float value);
  private:
  float _internal_attack_target_range() const;
  void _internal_set_attack_target_range(float value);
  public:

  // float search_enemy_range = 10;
  void clear_search_enemy_range();
  float search_enemy_range() const;
  void set_search_enemy_range(float value);
  private:
  float _internal_search_enemy_range() const;
  void _internal_set_search_enemy_range(float value);
  public:

  // float search_enemy_ms_min = 11;
  void clear_search_enemy_ms_min();
  float search_enemy_ms_min() const;
  void set_search_enemy_ms_min(float value);
  private:
  float _internal_search_enemy_ms_min() const;
  void _internal_set_search_enemy_ms_min(float value);
  public:

  // float search_enemy_ms_max = 12;
  void clear_search_enemy_ms_max();
  float search_enemy_ms_max() const;
  void set_search_enemy_ms_max(float value);
  private:
  float _internal_search_enemy_ms_max() const;
  void _internal_set_search_enemy_ms_max(float value);
  public:

  // uint32 patrol_wait_ms_min = 13;
  void clear_patrol_wait_ms_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 patrol_wait_ms_min() const;
  void set_patrol_wait_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_patrol_wait_ms_min() const;
  void _internal_set_patrol_wait_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 patrol_wait_ms_max = 14;
  void clear_patrol_wait_ms_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 patrol_wait_ms_max() const;
  void set_patrol_wait_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_patrol_wait_ms_max() const;
  void _internal_set_patrol_wait_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float escape_range_min = 15;
  void clear_escape_range_min();
  float escape_range_min() const;
  void set_escape_range_min(float value);
  private:
  float _internal_escape_range_min() const;
  void _internal_set_escape_range_min(float value);
  public:

  // float escape_range_max = 16;
  void clear_escape_range_max();
  float escape_range_max() const;
  void set_escape_range_max(float value);
  private:
  float _internal_escape_range_max() const;
  void _internal_set_escape_range_max(float value);
  public:

  // uint32 attack_wait_ms = 18;
  void clear_attack_wait_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 attack_wait_ms() const;
  void set_attack_wait_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attack_wait_ms() const;
  void _internal_set_attack_wait_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 targetfam_id = 20;
  void clear_targetfam_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetfam_id() const;
  void set_targetfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_targetfam_id() const;
  void _internal_set_targetfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 skillfam_id = 21;
  void clear_skillfam_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillfam_id() const;
  void set_skillfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillfam_id() const;
  void _internal_set_skillfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool can_approach = 17;
  void clear_can_approach();
  bool can_approach() const;
  void set_can_approach(bool value);
  private:
  bool _internal_can_approach() const;
  void _internal_set_can_approach(bool value);
  public:

  // bool ai_debug = 25;
  void clear_ai_debug();
  bool ai_debug() const;
  void set_ai_debug(bool value);
  private:
  bool _internal_ai_debug() const;
  void _internal_set_ai_debug(bool value);
  public:

  // uint32 follow_path = 23;
  void clear_follow_path();
  ::PROTOBUF_NAMESPACE_ID::uint32 follow_path() const;
  void set_follow_path(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_follow_path() const;
  void _internal_set_follow_path(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 script_id = 24;
  void clear_script_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 script_id() const;
  void set_script_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_script_id() const;
  void _internal_set_script_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_AIType.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > skill_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idmonster_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ai_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idle_randomwalk_ms_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idle_randomwalk_ms_max_;
  float idle_randomwalk_step_min_;
  float idle_randomwalk_step_max_;
  float idle_randomwalk_range_;
  float attack_pursue_selfrange_;
  float attack_target_range_;
  float search_enemy_range_;
  float search_enemy_ms_min_;
  float search_enemy_ms_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 patrol_wait_ms_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 patrol_wait_ms_max_;
  float escape_range_min_;
  float escape_range_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attack_wait_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetfam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillfam_id_;
  bool can_approach_;
  bool ai_debug_;
  ::PROTOBUF_NAMESPACE_ID::uint32 follow_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 script_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAIType_2eproto;
};
// -------------------------------------------------------------------

class Cfg_AIType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_AIType) */ {
 public:
  Cfg_AIType();
  virtual ~Cfg_AIType();

  Cfg_AIType(const Cfg_AIType& from);
  Cfg_AIType(Cfg_AIType&& from) noexcept
    : Cfg_AIType() {
    *this = ::std::move(from);
  }

  inline Cfg_AIType& operator=(const Cfg_AIType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_AIType& operator=(Cfg_AIType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_AIType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_AIType* internal_default_instance() {
    return reinterpret_cast<const Cfg_AIType*>(
               &_Cfg_AIType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cfg_AIType& a, Cfg_AIType& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_AIType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_AIType* New() const final {
    return CreateMaybeMessage<Cfg_AIType>(nullptr);
  }

  Cfg_AIType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_AIType>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_AIType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_AIType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fAIType_2eproto);
    return ::descriptor_table_config_2fCfg_5fAIType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cfg_AIType_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .Cfg_AIType.Row rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Cfg_AIType_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_AIType_Row >*
      mutable_rows();
  private:
  const ::Cfg_AIType_Row& _internal_rows(int index) const;
  ::Cfg_AIType_Row* _internal_add_rows();
  public:
  const ::Cfg_AIType_Row& rows(int index) const;
  ::Cfg_AIType_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_AIType_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:Cfg_AIType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_AIType_Row > rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fAIType_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cfg_AIType_Row

// uint32 idmonster = 1;
inline void Cfg_AIType_Row::clear_idmonster() {
  idmonster_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_idmonster() const {
  return idmonster_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::idmonster() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idmonster)
  return _internal_idmonster();
}
inline void Cfg_AIType_Row::_internal_set_idmonster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idmonster_ = value;
}
inline void Cfg_AIType_Row::set_idmonster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idmonster(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idmonster)
}

// uint32 ai_type = 2;
inline void Cfg_AIType_Row::clear_ai_type() {
  ai_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_ai_type() const {
  return ai_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::ai_type() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.ai_type)
  return _internal_ai_type();
}
inline void Cfg_AIType_Row::_internal_set_ai_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ai_type_ = value;
}
inline void Cfg_AIType_Row::set_ai_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ai_type(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.ai_type)
}

// uint32 idle_randomwalk_ms_min = 3;
inline void Cfg_AIType_Row::clear_idle_randomwalk_ms_min() {
  idle_randomwalk_ms_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_idle_randomwalk_ms_min() const {
  return idle_randomwalk_ms_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::idle_randomwalk_ms_min() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idle_randomwalk_ms_min)
  return _internal_idle_randomwalk_ms_min();
}
inline void Cfg_AIType_Row::_internal_set_idle_randomwalk_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idle_randomwalk_ms_min_ = value;
}
inline void Cfg_AIType_Row::set_idle_randomwalk_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idle_randomwalk_ms_min(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idle_randomwalk_ms_min)
}

// uint32 idle_randomwalk_ms_max = 4;
inline void Cfg_AIType_Row::clear_idle_randomwalk_ms_max() {
  idle_randomwalk_ms_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_idle_randomwalk_ms_max() const {
  return idle_randomwalk_ms_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::idle_randomwalk_ms_max() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idle_randomwalk_ms_max)
  return _internal_idle_randomwalk_ms_max();
}
inline void Cfg_AIType_Row::_internal_set_idle_randomwalk_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idle_randomwalk_ms_max_ = value;
}
inline void Cfg_AIType_Row::set_idle_randomwalk_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idle_randomwalk_ms_max(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idle_randomwalk_ms_max)
}

// float idle_randomwalk_step_min = 5;
inline void Cfg_AIType_Row::clear_idle_randomwalk_step_min() {
  idle_randomwalk_step_min_ = 0;
}
inline float Cfg_AIType_Row::_internal_idle_randomwalk_step_min() const {
  return idle_randomwalk_step_min_;
}
inline float Cfg_AIType_Row::idle_randomwalk_step_min() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idle_randomwalk_step_min)
  return _internal_idle_randomwalk_step_min();
}
inline void Cfg_AIType_Row::_internal_set_idle_randomwalk_step_min(float value) {
  
  idle_randomwalk_step_min_ = value;
}
inline void Cfg_AIType_Row::set_idle_randomwalk_step_min(float value) {
  _internal_set_idle_randomwalk_step_min(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idle_randomwalk_step_min)
}

// float idle_randomwalk_step_max = 6;
inline void Cfg_AIType_Row::clear_idle_randomwalk_step_max() {
  idle_randomwalk_step_max_ = 0;
}
inline float Cfg_AIType_Row::_internal_idle_randomwalk_step_max() const {
  return idle_randomwalk_step_max_;
}
inline float Cfg_AIType_Row::idle_randomwalk_step_max() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idle_randomwalk_step_max)
  return _internal_idle_randomwalk_step_max();
}
inline void Cfg_AIType_Row::_internal_set_idle_randomwalk_step_max(float value) {
  
  idle_randomwalk_step_max_ = value;
}
inline void Cfg_AIType_Row::set_idle_randomwalk_step_max(float value) {
  _internal_set_idle_randomwalk_step_max(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idle_randomwalk_step_max)
}

// float idle_randomwalk_range = 7;
inline void Cfg_AIType_Row::clear_idle_randomwalk_range() {
  idle_randomwalk_range_ = 0;
}
inline float Cfg_AIType_Row::_internal_idle_randomwalk_range() const {
  return idle_randomwalk_range_;
}
inline float Cfg_AIType_Row::idle_randomwalk_range() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.idle_randomwalk_range)
  return _internal_idle_randomwalk_range();
}
inline void Cfg_AIType_Row::_internal_set_idle_randomwalk_range(float value) {
  
  idle_randomwalk_range_ = value;
}
inline void Cfg_AIType_Row::set_idle_randomwalk_range(float value) {
  _internal_set_idle_randomwalk_range(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.idle_randomwalk_range)
}

// float attack_pursue_selfrange = 8;
inline void Cfg_AIType_Row::clear_attack_pursue_selfrange() {
  attack_pursue_selfrange_ = 0;
}
inline float Cfg_AIType_Row::_internal_attack_pursue_selfrange() const {
  return attack_pursue_selfrange_;
}
inline float Cfg_AIType_Row::attack_pursue_selfrange() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.attack_pursue_selfrange)
  return _internal_attack_pursue_selfrange();
}
inline void Cfg_AIType_Row::_internal_set_attack_pursue_selfrange(float value) {
  
  attack_pursue_selfrange_ = value;
}
inline void Cfg_AIType_Row::set_attack_pursue_selfrange(float value) {
  _internal_set_attack_pursue_selfrange(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.attack_pursue_selfrange)
}

// float attack_target_range = 9;
inline void Cfg_AIType_Row::clear_attack_target_range() {
  attack_target_range_ = 0;
}
inline float Cfg_AIType_Row::_internal_attack_target_range() const {
  return attack_target_range_;
}
inline float Cfg_AIType_Row::attack_target_range() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.attack_target_range)
  return _internal_attack_target_range();
}
inline void Cfg_AIType_Row::_internal_set_attack_target_range(float value) {
  
  attack_target_range_ = value;
}
inline void Cfg_AIType_Row::set_attack_target_range(float value) {
  _internal_set_attack_target_range(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.attack_target_range)
}

// float search_enemy_range = 10;
inline void Cfg_AIType_Row::clear_search_enemy_range() {
  search_enemy_range_ = 0;
}
inline float Cfg_AIType_Row::_internal_search_enemy_range() const {
  return search_enemy_range_;
}
inline float Cfg_AIType_Row::search_enemy_range() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.search_enemy_range)
  return _internal_search_enemy_range();
}
inline void Cfg_AIType_Row::_internal_set_search_enemy_range(float value) {
  
  search_enemy_range_ = value;
}
inline void Cfg_AIType_Row::set_search_enemy_range(float value) {
  _internal_set_search_enemy_range(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.search_enemy_range)
}

// float search_enemy_ms_min = 11;
inline void Cfg_AIType_Row::clear_search_enemy_ms_min() {
  search_enemy_ms_min_ = 0;
}
inline float Cfg_AIType_Row::_internal_search_enemy_ms_min() const {
  return search_enemy_ms_min_;
}
inline float Cfg_AIType_Row::search_enemy_ms_min() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.search_enemy_ms_min)
  return _internal_search_enemy_ms_min();
}
inline void Cfg_AIType_Row::_internal_set_search_enemy_ms_min(float value) {
  
  search_enemy_ms_min_ = value;
}
inline void Cfg_AIType_Row::set_search_enemy_ms_min(float value) {
  _internal_set_search_enemy_ms_min(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.search_enemy_ms_min)
}

// float search_enemy_ms_max = 12;
inline void Cfg_AIType_Row::clear_search_enemy_ms_max() {
  search_enemy_ms_max_ = 0;
}
inline float Cfg_AIType_Row::_internal_search_enemy_ms_max() const {
  return search_enemy_ms_max_;
}
inline float Cfg_AIType_Row::search_enemy_ms_max() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.search_enemy_ms_max)
  return _internal_search_enemy_ms_max();
}
inline void Cfg_AIType_Row::_internal_set_search_enemy_ms_max(float value) {
  
  search_enemy_ms_max_ = value;
}
inline void Cfg_AIType_Row::set_search_enemy_ms_max(float value) {
  _internal_set_search_enemy_ms_max(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.search_enemy_ms_max)
}

// uint32 patrol_wait_ms_min = 13;
inline void Cfg_AIType_Row::clear_patrol_wait_ms_min() {
  patrol_wait_ms_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_patrol_wait_ms_min() const {
  return patrol_wait_ms_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::patrol_wait_ms_min() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.patrol_wait_ms_min)
  return _internal_patrol_wait_ms_min();
}
inline void Cfg_AIType_Row::_internal_set_patrol_wait_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  patrol_wait_ms_min_ = value;
}
inline void Cfg_AIType_Row::set_patrol_wait_ms_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_patrol_wait_ms_min(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.patrol_wait_ms_min)
}

// uint32 patrol_wait_ms_max = 14;
inline void Cfg_AIType_Row::clear_patrol_wait_ms_max() {
  patrol_wait_ms_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_patrol_wait_ms_max() const {
  return patrol_wait_ms_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::patrol_wait_ms_max() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.patrol_wait_ms_max)
  return _internal_patrol_wait_ms_max();
}
inline void Cfg_AIType_Row::_internal_set_patrol_wait_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  patrol_wait_ms_max_ = value;
}
inline void Cfg_AIType_Row::set_patrol_wait_ms_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_patrol_wait_ms_max(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.patrol_wait_ms_max)
}

// float escape_range_min = 15;
inline void Cfg_AIType_Row::clear_escape_range_min() {
  escape_range_min_ = 0;
}
inline float Cfg_AIType_Row::_internal_escape_range_min() const {
  return escape_range_min_;
}
inline float Cfg_AIType_Row::escape_range_min() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.escape_range_min)
  return _internal_escape_range_min();
}
inline void Cfg_AIType_Row::_internal_set_escape_range_min(float value) {
  
  escape_range_min_ = value;
}
inline void Cfg_AIType_Row::set_escape_range_min(float value) {
  _internal_set_escape_range_min(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.escape_range_min)
}

// float escape_range_max = 16;
inline void Cfg_AIType_Row::clear_escape_range_max() {
  escape_range_max_ = 0;
}
inline float Cfg_AIType_Row::_internal_escape_range_max() const {
  return escape_range_max_;
}
inline float Cfg_AIType_Row::escape_range_max() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.escape_range_max)
  return _internal_escape_range_max();
}
inline void Cfg_AIType_Row::_internal_set_escape_range_max(float value) {
  
  escape_range_max_ = value;
}
inline void Cfg_AIType_Row::set_escape_range_max(float value) {
  _internal_set_escape_range_max(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.escape_range_max)
}

// bool can_approach = 17;
inline void Cfg_AIType_Row::clear_can_approach() {
  can_approach_ = false;
}
inline bool Cfg_AIType_Row::_internal_can_approach() const {
  return can_approach_;
}
inline bool Cfg_AIType_Row::can_approach() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.can_approach)
  return _internal_can_approach();
}
inline void Cfg_AIType_Row::_internal_set_can_approach(bool value) {
  
  can_approach_ = value;
}
inline void Cfg_AIType_Row::set_can_approach(bool value) {
  _internal_set_can_approach(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.can_approach)
}

// uint32 attack_wait_ms = 18;
inline void Cfg_AIType_Row::clear_attack_wait_ms() {
  attack_wait_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_attack_wait_ms() const {
  return attack_wait_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::attack_wait_ms() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.attack_wait_ms)
  return _internal_attack_wait_ms();
}
inline void Cfg_AIType_Row::_internal_set_attack_wait_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  attack_wait_ms_ = value;
}
inline void Cfg_AIType_Row::set_attack_wait_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attack_wait_ms(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.attack_wait_ms)
}

// uint32 targetfam_id = 20;
inline void Cfg_AIType_Row::clear_targetfam_id() {
  targetfam_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_targetfam_id() const {
  return targetfam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::targetfam_id() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.targetfam_id)
  return _internal_targetfam_id();
}
inline void Cfg_AIType_Row::_internal_set_targetfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetfam_id_ = value;
}
inline void Cfg_AIType_Row::set_targetfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_targetfam_id(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.targetfam_id)
}

// uint32 skillfam_id = 21;
inline void Cfg_AIType_Row::clear_skillfam_id() {
  skillfam_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_skillfam_id() const {
  return skillfam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::skillfam_id() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.skillfam_id)
  return _internal_skillfam_id();
}
inline void Cfg_AIType_Row::_internal_set_skillfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skillfam_id_ = value;
}
inline void Cfg_AIType_Row::set_skillfam_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillfam_id(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.skillfam_id)
}

// repeated uint32 skill_id = 22;
inline int Cfg_AIType_Row::_internal_skill_id_size() const {
  return skill_id_.size();
}
inline int Cfg_AIType_Row::skill_id_size() const {
  return _internal_skill_id_size();
}
inline void Cfg_AIType_Row::clear_skill_id() {
  skill_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_skill_id(int index) const {
  return skill_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.skill_id)
  return _internal_skill_id(index);
}
inline void Cfg_AIType_Row::set_skill_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.skill_id)
}
inline void Cfg_AIType_Row::_internal_add_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  skill_id_.Add(value);
}
inline void Cfg_AIType_Row::add_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_skill_id(value);
  // @@protoc_insertion_point(field_add:Cfg_AIType.Row.skill_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Cfg_AIType_Row::_internal_skill_id() const {
  return skill_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Cfg_AIType_Row::skill_id() const {
  // @@protoc_insertion_point(field_list:Cfg_AIType.Row.skill_id)
  return _internal_skill_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Cfg_AIType_Row::_internal_mutable_skill_id() {
  return &skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Cfg_AIType_Row::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_AIType.Row.skill_id)
  return _internal_mutable_skill_id();
}

// uint32 follow_path = 23;
inline void Cfg_AIType_Row::clear_follow_path() {
  follow_path_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_follow_path() const {
  return follow_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::follow_path() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.follow_path)
  return _internal_follow_path();
}
inline void Cfg_AIType_Row::_internal_set_follow_path(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  follow_path_ = value;
}
inline void Cfg_AIType_Row::set_follow_path(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_follow_path(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.follow_path)
}

// uint32 script_id = 24;
inline void Cfg_AIType_Row::clear_script_id() {
  script_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::_internal_script_id() const {
  return script_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_AIType_Row::script_id() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.script_id)
  return _internal_script_id();
}
inline void Cfg_AIType_Row::_internal_set_script_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  script_id_ = value;
}
inline void Cfg_AIType_Row::set_script_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_script_id(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.script_id)
}

// bool ai_debug = 25;
inline void Cfg_AIType_Row::clear_ai_debug() {
  ai_debug_ = false;
}
inline bool Cfg_AIType_Row::_internal_ai_debug() const {
  return ai_debug_;
}
inline bool Cfg_AIType_Row::ai_debug() const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.Row.ai_debug)
  return _internal_ai_debug();
}
inline void Cfg_AIType_Row::_internal_set_ai_debug(bool value) {
  
  ai_debug_ = value;
}
inline void Cfg_AIType_Row::set_ai_debug(bool value) {
  _internal_set_ai_debug(value);
  // @@protoc_insertion_point(field_set:Cfg_AIType.Row.ai_debug)
}

// -------------------------------------------------------------------

// Cfg_AIType

// repeated .Cfg_AIType.Row rows = 1;
inline int Cfg_AIType::_internal_rows_size() const {
  return rows_.size();
}
inline int Cfg_AIType::rows_size() const {
  return _internal_rows_size();
}
inline void Cfg_AIType::clear_rows() {
  rows_.Clear();
}
inline ::Cfg_AIType_Row* Cfg_AIType::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:Cfg_AIType.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_AIType_Row >*
Cfg_AIType::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:Cfg_AIType.rows)
  return &rows_;
}
inline const ::Cfg_AIType_Row& Cfg_AIType::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::Cfg_AIType_Row& Cfg_AIType::rows(int index) const {
  // @@protoc_insertion_point(field_get:Cfg_AIType.rows)
  return _internal_rows(index);
}
inline ::Cfg_AIType_Row* Cfg_AIType::_internal_add_rows() {
  return rows_.Add();
}
inline ::Cfg_AIType_Row* Cfg_AIType::add_rows() {
  // @@protoc_insertion_point(field_add:Cfg_AIType.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cfg_AIType_Row >&
Cfg_AIType::rows() const {
  // @@protoc_insertion_point(field_list:Cfg_AIType.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fAIType_2eproto
